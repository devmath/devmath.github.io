{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hernands/source/css/main.scss","path":"css/main.scss","modified":0,"renderable":1},{"_id":"themes/hernands/source/images/profile.jpg","path":"images/profile.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hernands/_config.yml","hash":"029c0f28f39bf7ecfc67bc61eb70b41e885c0480","modified":1527966372213},{"_id":"source/_posts/Brincando-com-janelas-no-tmux.md","hash":"716e76065979d0d1478b7e3c401bfed90b4139e9","modified":1527966372210},{"_id":"source/_posts/O-incrivel-mundo-do-tmux.md","hash":"035b0b4b037ac9e178ff63490b56c12e9500b520","modified":1527966372210},{"_id":"source/_posts/Terminais-sao-legais-como-comecar-a-usar.md","hash":"9b4ceb9bc78be244c31bbc46a6cad1a2139e5615","modified":1527970586215},{"_id":"themes/hernands/layout/index.ejs","hash":"37f5efe489b9546932bfad1c19a7ee23b32491ee","modified":1527966372213},{"_id":"themes/hernands/layout/layout.ejs","hash":"c2262f277d7560503f1fd1dc8aa53046f6dbfd66","modified":1527966372213},{"_id":"themes/hernands/layout/post.ejs","hash":"0bd8ff97beb7337cf0920c4794842823894bf1d4","modified":1527966372213},{"_id":"source/_posts/Brincando-com-janelas-no-tmux/current-tmux-windows.jpg","hash":"e199520a0c72a6d8a71e639d3c5145035bacb5db","modified":1527966372210},{"_id":"source/_posts/O-incrivel-mundo-do-tmux/thumbnail.jpg","hash":"5a5fa01709adf197c7bda1409e5fe8722f2989a3","modified":1527966372210},{"_id":"source/_posts/Terminais-sao-legais-como-comecar-a-usar/user-terminal.png","hash":"6fa0c1d712d47f9ddc51ea4f86bdf0646276cff9","modified":1527966372210},{"_id":"themes/hernands/layout/_partials/footer.ejs","hash":"d9f1ec4ccf33ed78ffc940755193d6c552a917f1","modified":1527966372213},{"_id":"themes/hernands/layout/_partials/head.ejs","hash":"4948c0bf65986e40d4e391ecc309edf748db76fe","modified":1527971396336},{"_id":"themes/hernands/source/css/main.scss","hash":"ad9d18cc49d14501c8007d04e404d07358a16f2c","modified":1527966372213},{"_id":"source/_posts/O-incrivel-mundo-do-tmux/tmux.gif","hash":"c18e64a53f60752241383fe1b4489e7128b4b3ce","modified":1527966372210},{"_id":"themes/hernands/source/images/profile.jpg","hash":"fd3512ca96acd9b545c68a5f4fba283d9034093d","modified":1527966372217},{"_id":"themes/hernands/source/css/article/_article.scss","hash":"2c30e0b5e710676ba83b652c9cb6ea6e104286c0","modified":1527968425685},{"_id":"themes/hernands/source/css/default/_footer.scss","hash":"d4c48ebc2e035217dc3c384a36ba02251ddde499","modified":1527966372213},{"_id":"themes/hernands/source/css/default/_section.scss","hash":"21e11c73b466de3fa4d9ac31bcefdae6ae32c8c3","modified":1527969000697},{"_id":"themes/hernands/source/css/default/_spacer.scss","hash":"c24a534272ac9852d0ffb2a84c553b58494b2ab0","modified":1527966372213},{"_id":"themes/hernands/source/css/home/_about.scss","hash":"d98977990fc92be8f148f3725ce9848a37b42d93","modified":1527966372213},{"_id":"themes/hernands/source/css/home/_articles_list.scss","hash":"b5c5d6a8e7a55fce510a83667b3e0d63518eeaf4","modified":1527966372213},{"_id":"themes/hernands/source/css/home/_header.scss","hash":"776cd3fa8849d582d009f0021deb473f1dbcc978","modified":1527966372213},{"_id":"themes/hernands/source/css/home/_projects.scss","hash":"d760de5d25662899159ce3609d23ae362a44bb8b","modified":1527966372213},{"_id":"themes/hernands/source/css/shield/_defaults.scss","hash":"3319f57e6723a37a1707d6f2c8869736e2942617","modified":1527966372213},{"_id":"themes/hernands/source/css/shield/_helpers.scss","hash":"dd2a3b8dedbb3c300f354da45cf0c6047bc82b3f","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/_init.scss","hash":"0268695322d45faa6dc8ad60331478cb1b9a88a5","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/_mixins.scss","hash":"33b807a4c4162d870fc0468e29e8004cde420645","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/_reset.scss","hash":"3091de30e59ad14f75b6590cd56da67d9f4b3f15","modified":1527968485613},{"_id":"themes/hernands/source/css/shield/_shield.scss","hash":"6db07350b93393090eff72fb9296ecf1098e25e5","modified":1527966372217},{"_id":"source/_posts/Terminais-sao-legais-como-comecar-a-usar/learning.jpg","hash":"2592f947acfea0b076bd2e6a08ecf672d760398d","modified":1527970421357},{"_id":"themes/hernands/source/css/shield/helpers/_map-extend.scss","hash":"beba003f1ca0328771bd9efd07404b828f9a23d0","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/_box-sizing.scss","hash":"8d2fa47d8c6a31ea1cd5cd2bc3e0a6af04134cba","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/_flex.scss","hash":"ef93d36727a18eabfac70c7a89fcf547b4efaa49","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/_general-functions.scss","hash":"9b20d0909bfe81896f67fcb9e5269b0fc7d10904","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/_motion.scss","hash":"fba4b6deec8302f66e5d51b805f96d17e962c2ce","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/_placeholder.scss","hash":"75415243a5f51ea0ef04e71efa0b134d97e2626d","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/_z-index.scss","hash":"4c785c30f56ba5b100190f0ae5fcf67344d2371f","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/grid/_grid-generator.scss","hash":"4f6d04a061b80b2f9c91afabe6b76a2b2f3b4c3d","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/media/_media-bet.scss","hash":"99a5987ee5e4b898e0f16e629c7b8850a30fd33e","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/media/_media-firefox.scss","hash":"a368f37d4e84b0532f82e072733aa542fb85420b","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/media/_media-ie.scss","hash":"9d6ed8bc8fe8f57a127fab4ac00f0a27e23e84dc","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/media/_media-max.scss","hash":"04d48b20a7f302a1462763977aee7621e73af396","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/media/_media-min.scss","hash":"54f264f8b9c6df9ba9ff77931bdab2008a54c657","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/media/_media-opera.scss","hash":"e8f554c336354a6cd597aafab0beca9cc6884b01","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/media/_media-print.scss","hash":"19ee5fea46fe9d6ccce939b3d79be901067db031","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/media/_media-retina.scss","hash":"c3b4ad46c9f2f0bf5fd17e86479a67aab9edd003","modified":1527966372217}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Brincando com janelas no tmux","date":"2018-05-22T17:13:16.000Z","_content":"\n# Janelas, painéis e terminais\n\nEu escrevi [outro artigo](https://hernands.com/o-incrivel-mundo-do-tmux/) introduzindo ao tmux, aconselho você a ler antes de continuar caso não conheça o tmux.\n\nPainéis no tmux são apenas divisões na mesma tela. Você consegue navegar entre elas. É algo bem útil para, por exemplo, editar um arquivo enquanto executa testes em outro painel e acompanha a saída de um log.\n\nJanelas são uma abstração superior: você tem várias janelas dentro do tmux, cada uma com seu próprio layout de painéis, scripts e ambiente.\n\nNo começo eu usava no máximo três painéis e duas janelas. Uma com o trabalho e outra com o `weechat`. Depois de um tempo, aprendi a usar mais e mais, atualmente estou usando cerca de 4 ~ 5 janelas no tmux.\n\n## Abrindo uma nova janela\n\nBom, assim que você abre o tmux, você já está numa janela. Todas as janelas são numeradas e tem títulos, por padrão, é o comando que você está executando agora.\n\nSe você se atentar a barra inferior do tmux, vai perceber que tem o nome da sua sessão e logo em seguida, o `número-da-janela:título`, como aqui tenho o `0:bash`, `1:tt`, `2:app`, `3:laradock`, `4:wr`. São, respectivamente, coisas do trabalho(vim, API rodando e outro painel com git e etc), [client do Twitter](https://github.com/orakaro/rainbowstream), front-end da empresa, essa do laradock eu uso pra controlar o docker e executar algumas coisas com sudo(talvez seja uma má prática, mas já fica logado como root) e por último, outro vim aberto com algo do [BackEndBrasil](https://github.com/backend-br/) ou um artigo que esteja escrevendo.\n\n![](current-tmux-windows.jpg)\n\nPara começar, abra o tmux, abra dois ou mais painéis. Depois, pressione `prefix + c`, perceba que agora seus painéis sumiram, é como se você tivesse aberto o tmux agora, certo?\n\nOlhe para baixo, na barra inferior, você tem sua nova janela aberta, provavelmente está escrito `1:bash`. Mas digamos que você queira abrir o `nano`, abra-o. Agora você quer continuar no nano, mas precisa voltar para a outra janela...o que faz?\n\nPressione `prefix + NUMERO_DA_JANELA`, no caso, `prefix + 0`. Você já está na outra janela. O número é exatamente o mesmo que está na barra inferior =)\n\nMas agora, você precisa renomear as janelas, afinal, o título não é muito descritivo...pressione `prefix + ,` em seguida apague o título atual e escreva o que quiser, depois aperte `Enter`.\n\nSua janela tem um novo nome =D\n\nE se você quiser fechar essa janela, use o bom e velho `exit`.\n\n{% blockquote %}\nSe você apertar `prefix + :` e digitar `kill-window`, ele fecha sua janela atual. Cuidado que você pode perder algo se não salvar antes.\n{% endblockquote %}\n\n# Pronto!\n\nAgora você já sabe como instalar o tmux, brincar com painéis, criar, renomear, fechar e mover entre janelas.\n\n","source":"_posts/Brincando-com-janelas-no-tmux.md","raw":"---\ntitle: Brincando com janelas no tmux\ndate: 2018-05-22 14:13:16\ntags:\n---\n\n# Janelas, painéis e terminais\n\nEu escrevi [outro artigo](https://hernands.com/o-incrivel-mundo-do-tmux/) introduzindo ao tmux, aconselho você a ler antes de continuar caso não conheça o tmux.\n\nPainéis no tmux são apenas divisões na mesma tela. Você consegue navegar entre elas. É algo bem útil para, por exemplo, editar um arquivo enquanto executa testes em outro painel e acompanha a saída de um log.\n\nJanelas são uma abstração superior: você tem várias janelas dentro do tmux, cada uma com seu próprio layout de painéis, scripts e ambiente.\n\nNo começo eu usava no máximo três painéis e duas janelas. Uma com o trabalho e outra com o `weechat`. Depois de um tempo, aprendi a usar mais e mais, atualmente estou usando cerca de 4 ~ 5 janelas no tmux.\n\n## Abrindo uma nova janela\n\nBom, assim que você abre o tmux, você já está numa janela. Todas as janelas são numeradas e tem títulos, por padrão, é o comando que você está executando agora.\n\nSe você se atentar a barra inferior do tmux, vai perceber que tem o nome da sua sessão e logo em seguida, o `número-da-janela:título`, como aqui tenho o `0:bash`, `1:tt`, `2:app`, `3:laradock`, `4:wr`. São, respectivamente, coisas do trabalho(vim, API rodando e outro painel com git e etc), [client do Twitter](https://github.com/orakaro/rainbowstream), front-end da empresa, essa do laradock eu uso pra controlar o docker e executar algumas coisas com sudo(talvez seja uma má prática, mas já fica logado como root) e por último, outro vim aberto com algo do [BackEndBrasil](https://github.com/backend-br/) ou um artigo que esteja escrevendo.\n\n![](current-tmux-windows.jpg)\n\nPara começar, abra o tmux, abra dois ou mais painéis. Depois, pressione `prefix + c`, perceba que agora seus painéis sumiram, é como se você tivesse aberto o tmux agora, certo?\n\nOlhe para baixo, na barra inferior, você tem sua nova janela aberta, provavelmente está escrito `1:bash`. Mas digamos que você queira abrir o `nano`, abra-o. Agora você quer continuar no nano, mas precisa voltar para a outra janela...o que faz?\n\nPressione `prefix + NUMERO_DA_JANELA`, no caso, `prefix + 0`. Você já está na outra janela. O número é exatamente o mesmo que está na barra inferior =)\n\nMas agora, você precisa renomear as janelas, afinal, o título não é muito descritivo...pressione `prefix + ,` em seguida apague o título atual e escreva o que quiser, depois aperte `Enter`.\n\nSua janela tem um novo nome =D\n\nE se você quiser fechar essa janela, use o bom e velho `exit`.\n\n{% blockquote %}\nSe você apertar `prefix + :` e digitar `kill-window`, ele fecha sua janela atual. Cuidado que você pode perder algo se não salvar antes.\n{% endblockquote %}\n\n# Pronto!\n\nAgora você já sabe como instalar o tmux, brincar com painéis, criar, renomear, fechar e mover entre janelas.\n\n","slug":"Brincando-com-janelas-no-tmux","published":1,"updated":"2018-06-02T19:06:12.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhxv2x5v0000terp9o9wx5fi","content":"<h1 id=\"Janelas-paineis-e-terminais\"><a href=\"#Janelas-paineis-e-terminais\" class=\"headerlink\" title=\"Janelas, painéis e terminais\"></a>Janelas, painéis e terminais</h1><p>Eu escrevi <a href=\"https://hernands.com/o-incrivel-mundo-do-tmux/\">outro artigo</a> introduzindo ao tmux, aconselho você a ler antes de continuar caso não conheça o tmux.</p>\n<p>Painéis no tmux são apenas divisões na mesma tela. Você consegue navegar entre elas. É algo bem útil para, por exemplo, editar um arquivo enquanto executa testes em outro painel e acompanha a saída de um log.</p>\n<p>Janelas são uma abstração superior: você tem várias janelas dentro do tmux, cada uma com seu próprio layout de painéis, scripts e ambiente.</p>\n<p>No começo eu usava no máximo três painéis e duas janelas. Uma com o trabalho e outra com o <code>weechat</code>. Depois de um tempo, aprendi a usar mais e mais, atualmente estou usando cerca de 4 ~ 5 janelas no tmux.</p>\n<h2 id=\"Abrindo-uma-nova-janela\"><a href=\"#Abrindo-uma-nova-janela\" class=\"headerlink\" title=\"Abrindo uma nova janela\"></a>Abrindo uma nova janela</h2><p>Bom, assim que você abre o tmux, você já está numa janela. Todas as janelas são numeradas e tem títulos, por padrão, é o comando que você está executando agora.</p>\n<p>Se você se atentar a barra inferior do tmux, vai perceber que tem o nome da sua sessão e logo em seguida, o <code>número-da-janela:título</code>, como aqui tenho o <code>0:bash</code>, <code>1:tt</code>, <code>2:app</code>, <code>3:laradock</code>, <code>4:wr</code>. São, respectivamente, coisas do trabalho(vim, API rodando e outro painel com git e etc), <a href=\"https://github.com/orakaro/rainbowstream\" target=\"_blank\" rel=\"noopener\">client do Twitter</a>, front-end da empresa, essa do laradock eu uso pra controlar o docker e executar algumas coisas com sudo(talvez seja uma má prática, mas já fica logado como root) e por último, outro vim aberto com algo do <a href=\"https://github.com/backend-br/\" target=\"_blank\" rel=\"noopener\">BackEndBrasil</a> ou um artigo que esteja escrevendo.</p>\n<p><img src=\"current-tmux-windows.jpg\" alt=\"\"></p>\n<p>Para começar, abra o tmux, abra dois ou mais painéis. Depois, pressione <code>prefix + c</code>, perceba que agora seus painéis sumiram, é como se você tivesse aberto o tmux agora, certo?</p>\n<p>Olhe para baixo, na barra inferior, você tem sua nova janela aberta, provavelmente está escrito <code>1:bash</code>. Mas digamos que você queira abrir o <code>nano</code>, abra-o. Agora você quer continuar no nano, mas precisa voltar para a outra janela…o que faz?</p>\n<p>Pressione <code>prefix + NUMERO_DA_JANELA</code>, no caso, <code>prefix + 0</code>. Você já está na outra janela. O número é exatamente o mesmo que está na barra inferior =)</p>\n<p>Mas agora, você precisa renomear as janelas, afinal, o título não é muito descritivo…pressione <code>prefix + ,</code> em seguida apague o título atual e escreva o que quiser, depois aperte <code>Enter</code>.</p>\n<p>Sua janela tem um novo nome =D</p>\n<p>E se você quiser fechar essa janela, use o bom e velho <code>exit</code>.</p>\n<blockquote><p>Se você apertar <code>prefix + :</code> e digitar <code>kill-window</code>, ele fecha sua janela atual. Cuidado que você pode perder algo se não salvar antes.</p>\n</blockquote>\n<h1 id=\"Pronto\"><a href=\"#Pronto\" class=\"headerlink\" title=\"Pronto!\"></a>Pronto!</h1><p>Agora você já sabe como instalar o tmux, brincar com painéis, criar, renomear, fechar e mover entre janelas.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Janelas-paineis-e-terminais\"><a href=\"#Janelas-paineis-e-terminais\" class=\"headerlink\" title=\"Janelas, painéis e terminais\"></a>Janelas, painéis e terminais</h1><p>Eu escrevi <a href=\"https://hernands.com/o-incrivel-mundo-do-tmux/\">outro artigo</a> introduzindo ao tmux, aconselho você a ler antes de continuar caso não conheça o tmux.</p>\n<p>Painéis no tmux são apenas divisões na mesma tela. Você consegue navegar entre elas. É algo bem útil para, por exemplo, editar um arquivo enquanto executa testes em outro painel e acompanha a saída de um log.</p>\n<p>Janelas são uma abstração superior: você tem várias janelas dentro do tmux, cada uma com seu próprio layout de painéis, scripts e ambiente.</p>\n<p>No começo eu usava no máximo três painéis e duas janelas. Uma com o trabalho e outra com o <code>weechat</code>. Depois de um tempo, aprendi a usar mais e mais, atualmente estou usando cerca de 4 ~ 5 janelas no tmux.</p>\n<h2 id=\"Abrindo-uma-nova-janela\"><a href=\"#Abrindo-uma-nova-janela\" class=\"headerlink\" title=\"Abrindo uma nova janela\"></a>Abrindo uma nova janela</h2><p>Bom, assim que você abre o tmux, você já está numa janela. Todas as janelas são numeradas e tem títulos, por padrão, é o comando que você está executando agora.</p>\n<p>Se você se atentar a barra inferior do tmux, vai perceber que tem o nome da sua sessão e logo em seguida, o <code>número-da-janela:título</code>, como aqui tenho o <code>0:bash</code>, <code>1:tt</code>, <code>2:app</code>, <code>3:laradock</code>, <code>4:wr</code>. São, respectivamente, coisas do trabalho(vim, API rodando e outro painel com git e etc), <a href=\"https://github.com/orakaro/rainbowstream\" target=\"_blank\" rel=\"noopener\">client do Twitter</a>, front-end da empresa, essa do laradock eu uso pra controlar o docker e executar algumas coisas com sudo(talvez seja uma má prática, mas já fica logado como root) e por último, outro vim aberto com algo do <a href=\"https://github.com/backend-br/\" target=\"_blank\" rel=\"noopener\">BackEndBrasil</a> ou um artigo que esteja escrevendo.</p>\n<p><img src=\"current-tmux-windows.jpg\" alt=\"\"></p>\n<p>Para começar, abra o tmux, abra dois ou mais painéis. Depois, pressione <code>prefix + c</code>, perceba que agora seus painéis sumiram, é como se você tivesse aberto o tmux agora, certo?</p>\n<p>Olhe para baixo, na barra inferior, você tem sua nova janela aberta, provavelmente está escrito <code>1:bash</code>. Mas digamos que você queira abrir o <code>nano</code>, abra-o. Agora você quer continuar no nano, mas precisa voltar para a outra janela…o que faz?</p>\n<p>Pressione <code>prefix + NUMERO_DA_JANELA</code>, no caso, <code>prefix + 0</code>. Você já está na outra janela. O número é exatamente o mesmo que está na barra inferior =)</p>\n<p>Mas agora, você precisa renomear as janelas, afinal, o título não é muito descritivo…pressione <code>prefix + ,</code> em seguida apague o título atual e escreva o que quiser, depois aperte <code>Enter</code>.</p>\n<p>Sua janela tem um novo nome =D</p>\n<p>E se você quiser fechar essa janela, use o bom e velho <code>exit</code>.</p>\n<blockquote><p>Se você apertar <code>prefix + :</code> e digitar <code>kill-window</code>, ele fecha sua janela atual. Cuidado que você pode perder algo se não salvar antes.</p>\n</blockquote>\n<h1 id=\"Pronto\"><a href=\"#Pronto\" class=\"headerlink\" title=\"Pronto!\"></a>Pronto!</h1><p>Agora você já sabe como instalar o tmux, brincar com painéis, criar, renomear, fechar e mover entre janelas.</p>\n"},{"title":"O incrível mundo do tmux","date":"2018-04-19T18:52:16.000Z","description":"Você tem um momento para falar de tmux? Venha para o lado negro da força e aumente sua produtividade!","thumbnail":"thumbnail.jpg","_content":"\n# tmux - o que é\n\nTmux é uma ferramenta que basicamente te dá o controle de sessões, janelas e painéis dentro de um único terminal. Sim, você pode voltar pro bom e velho `xterm` e configurar como quiser. Segundo o Wiki deles:\n\n{% blockquote %}\ntmux is a \"terminal multiplexer\", it enables a number of terminals (or windows) to be accessed and controlled from a single terminal. tmux is intended to be a simple, modern, BSD-licensed alternative to programs such as GNU screen\n{% endblockquote %}\n\n![](tmux.gif)\n\n# Instalando\n\nProvavelmente o tmux é suportado pelo seu gerenciador de pacotes - não sei como estão as coisas pra Windows.\n\nUsando o Pacman: `sudo pacman -S tmux`\nUsando o apt-get: `sudo apt-get install tmux`\n\n# Básico\n\nPara começar o tmux, você precisa criar uma sessão. Você tem duas formas, apenas digitando `tmux` no terminal(criando uma sessão chamada 0), ou `tmux new -s <nome-da-sessao>`\n\nAssim que você entrar no tmux, estará dentro de uma sessão, no primeiro painel e na primeira janela.\n\nPara acionar qualquer coisa do tmux, você precisa apertar o prefixo primeiro, para dizer ao tmux que está acionando um comando. O prefixo padrão é `CTRL + b`.\n\n{% blockquote %}\nVou usar o acento `^` para indicar o `CTRL`. Por exemplo, `^b` é o mesmo que `CTRL + b`. Lembre-se que todos os comandos do tmux *são* sensivos a caixa alta e baixa. Então, `^b` não é o mesmo que `^B`. Todo conteúdo sobre tmux que você pesquisar, vai usar essa notação.\n{% endblockquote %}\n\n## Alguns pontos sobre o tmux:\n\n- Você vai notar uma barra inferior assim que entrar em uma sessão do tmux, nela você vai ver o nome da sua sessão, suas janelas, seu usuário@grupo, horário e data atual\n- Se você quiser sair do tmux, basta digitar `exit` no terminal\n\n## Painéis\n\nVamos começar a brincar. Aperte `prefix + %` - coloque seu prefixo no lugar de `prefix` e você pode apertar `Shift + 5` pra produzir o `%`. \nVocê vai dividir sua tela em duas partes. Quer ir para o outro painel? `prefix + o` é a solução.\n\n- `prefix + %` divide sua tela horizontalmente\n- `prefix + \"` (aspas duplas) divide sua tela verticalmente\n- `prefix + o` te coloca no próximo painel\n- `exit` sai do terminal(consequentemente, da sessão do tmux)\n\n# Até a próxima!\n\nIsso foi só por hoje. No próximo artigo vou falar mais sobre as janelas do tmux, mas isso já é o suficiente pra você aprender a brincar com o tmux.\n\ntmux no Github: [https://github.com/tmux/tmux](https://github.com/tmux/tmux)\nWiki to tmux: [https://github.com/tmux/tmux/wiki](https://github.com/tmux/tmux/wiki)\nawesome-tmux: [https://github.com/rothgar/awesome-tmux](https://github.com/rothgar/awesome-tmux)\n","source":"_posts/O-incrivel-mundo-do-tmux.md","raw":"---\ntitle: O incrível mundo do tmux\ndate: 2018-04-19 15:52:16\ntags: tmux produtividade terminal\ndescription: Você tem um momento para falar de tmux? Venha para o lado negro da força e aumente sua produtividade!\nthumbnail: thumbnail.jpg\n---\n\n# tmux - o que é\n\nTmux é uma ferramenta que basicamente te dá o controle de sessões, janelas e painéis dentro de um único terminal. Sim, você pode voltar pro bom e velho `xterm` e configurar como quiser. Segundo o Wiki deles:\n\n{% blockquote %}\ntmux is a \"terminal multiplexer\", it enables a number of terminals (or windows) to be accessed and controlled from a single terminal. tmux is intended to be a simple, modern, BSD-licensed alternative to programs such as GNU screen\n{% endblockquote %}\n\n![](tmux.gif)\n\n# Instalando\n\nProvavelmente o tmux é suportado pelo seu gerenciador de pacotes - não sei como estão as coisas pra Windows.\n\nUsando o Pacman: `sudo pacman -S tmux`\nUsando o apt-get: `sudo apt-get install tmux`\n\n# Básico\n\nPara começar o tmux, você precisa criar uma sessão. Você tem duas formas, apenas digitando `tmux` no terminal(criando uma sessão chamada 0), ou `tmux new -s <nome-da-sessao>`\n\nAssim que você entrar no tmux, estará dentro de uma sessão, no primeiro painel e na primeira janela.\n\nPara acionar qualquer coisa do tmux, você precisa apertar o prefixo primeiro, para dizer ao tmux que está acionando um comando. O prefixo padrão é `CTRL + b`.\n\n{% blockquote %}\nVou usar o acento `^` para indicar o `CTRL`. Por exemplo, `^b` é o mesmo que `CTRL + b`. Lembre-se que todos os comandos do tmux *são* sensivos a caixa alta e baixa. Então, `^b` não é o mesmo que `^B`. Todo conteúdo sobre tmux que você pesquisar, vai usar essa notação.\n{% endblockquote %}\n\n## Alguns pontos sobre o tmux:\n\n- Você vai notar uma barra inferior assim que entrar em uma sessão do tmux, nela você vai ver o nome da sua sessão, suas janelas, seu usuário@grupo, horário e data atual\n- Se você quiser sair do tmux, basta digitar `exit` no terminal\n\n## Painéis\n\nVamos começar a brincar. Aperte `prefix + %` - coloque seu prefixo no lugar de `prefix` e você pode apertar `Shift + 5` pra produzir o `%`. \nVocê vai dividir sua tela em duas partes. Quer ir para o outro painel? `prefix + o` é a solução.\n\n- `prefix + %` divide sua tela horizontalmente\n- `prefix + \"` (aspas duplas) divide sua tela verticalmente\n- `prefix + o` te coloca no próximo painel\n- `exit` sai do terminal(consequentemente, da sessão do tmux)\n\n# Até a próxima!\n\nIsso foi só por hoje. No próximo artigo vou falar mais sobre as janelas do tmux, mas isso já é o suficiente pra você aprender a brincar com o tmux.\n\ntmux no Github: [https://github.com/tmux/tmux](https://github.com/tmux/tmux)\nWiki to tmux: [https://github.com/tmux/tmux/wiki](https://github.com/tmux/tmux/wiki)\nawesome-tmux: [https://github.com/rothgar/awesome-tmux](https://github.com/rothgar/awesome-tmux)\n","slug":"O-incrivel-mundo-do-tmux","published":1,"updated":"2018-06-02T19:06:12.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhxv2x620001terp9zihf0ly","content":"<h1 id=\"tmux-o-que-e\"><a href=\"#tmux-o-que-e\" class=\"headerlink\" title=\"tmux - o que é\"></a>tmux - o que é</h1><p>Tmux é uma ferramenta que basicamente te dá o controle de sessões, janelas e painéis dentro de um único terminal. Sim, você pode voltar pro bom e velho <code>xterm</code> e configurar como quiser. Segundo o Wiki deles:</p>\n<blockquote><p>tmux is a “terminal multiplexer”, it enables a number of terminals (or windows) to be accessed and controlled from a single terminal. tmux is intended to be a simple, modern, BSD-licensed alternative to programs such as GNU screen</p>\n</blockquote>\n<p><img src=\"tmux.gif\" alt=\"\"></p>\n<h1 id=\"Instalando\"><a href=\"#Instalando\" class=\"headerlink\" title=\"Instalando\"></a>Instalando</h1><p>Provavelmente o tmux é suportado pelo seu gerenciador de pacotes - não sei como estão as coisas pra Windows.</p>\n<p>Usando o Pacman: <code>sudo pacman -S tmux</code><br>Usando o apt-get: <code>sudo apt-get install tmux</code></p>\n<h1 id=\"Basico\"><a href=\"#Basico\" class=\"headerlink\" title=\"Básico\"></a>Básico</h1><p>Para começar o tmux, você precisa criar uma sessão. Você tem duas formas, apenas digitando <code>tmux</code> no terminal(criando uma sessão chamada 0), ou <code>tmux new -s &lt;nome-da-sessao&gt;</code></p>\n<p>Assim que você entrar no tmux, estará dentro de uma sessão, no primeiro painel e na primeira janela.</p>\n<p>Para acionar qualquer coisa do tmux, você precisa apertar o prefixo primeiro, para dizer ao tmux que está acionando um comando. O prefixo padrão é <code>CTRL + b</code>.</p>\n<blockquote><p>Vou usar o acento <code>^</code> para indicar o <code>CTRL</code>. Por exemplo, <code>^b</code> é o mesmo que <code>CTRL + b</code>. Lembre-se que todos os comandos do tmux <em>são</em> sensivos a caixa alta e baixa. Então, <code>^b</code> não é o mesmo que <code>^B</code>. Todo conteúdo sobre tmux que você pesquisar, vai usar essa notação.</p>\n</blockquote>\n<h2 id=\"Alguns-pontos-sobre-o-tmux\"><a href=\"#Alguns-pontos-sobre-o-tmux\" class=\"headerlink\" title=\"Alguns pontos sobre o tmux:\"></a>Alguns pontos sobre o tmux:</h2><ul>\n<li>Você vai notar uma barra inferior assim que entrar em uma sessão do tmux, nela você vai ver o nome da sua sessão, suas janelas, seu usuário@grupo, horário e data atual</li>\n<li>Se você quiser sair do tmux, basta digitar <code>exit</code> no terminal</li>\n</ul>\n<h2 id=\"Paineis\"><a href=\"#Paineis\" class=\"headerlink\" title=\"Painéis\"></a>Painéis</h2><p>Vamos começar a brincar. Aperte <code>prefix + %</code> - coloque seu prefixo no lugar de <code>prefix</code> e você pode apertar <code>Shift + 5</code> pra produzir o <code>%</code>.<br>Você vai dividir sua tela em duas partes. Quer ir para o outro painel? <code>prefix + o</code> é a solução.</p>\n<ul>\n<li><code>prefix + %</code> divide sua tela horizontalmente</li>\n<li><code>prefix + &quot;</code> (aspas duplas) divide sua tela verticalmente</li>\n<li><code>prefix + o</code> te coloca no próximo painel</li>\n<li><code>exit</code> sai do terminal(consequentemente, da sessão do tmux)</li>\n</ul>\n<h1 id=\"Ate-a-proxima\"><a href=\"#Ate-a-proxima\" class=\"headerlink\" title=\"Até a próxima!\"></a>Até a próxima!</h1><p>Isso foi só por hoje. No próximo artigo vou falar mais sobre as janelas do tmux, mas isso já é o suficiente pra você aprender a brincar com o tmux.</p>\n<p>tmux no Github: <a href=\"https://github.com/tmux/tmux\" target=\"_blank\" rel=\"noopener\">https://github.com/tmux/tmux</a><br>Wiki to tmux: <a href=\"https://github.com/tmux/tmux/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/tmux/tmux/wiki</a><br>awesome-tmux: <a href=\"https://github.com/rothgar/awesome-tmux\" target=\"_blank\" rel=\"noopener\">https://github.com/rothgar/awesome-tmux</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"tmux-o-que-e\"><a href=\"#tmux-o-que-e\" class=\"headerlink\" title=\"tmux - o que é\"></a>tmux - o que é</h1><p>Tmux é uma ferramenta que basicamente te dá o controle de sessões, janelas e painéis dentro de um único terminal. Sim, você pode voltar pro bom e velho <code>xterm</code> e configurar como quiser. Segundo o Wiki deles:</p>\n<blockquote><p>tmux is a “terminal multiplexer”, it enables a number of terminals (or windows) to be accessed and controlled from a single terminal. tmux is intended to be a simple, modern, BSD-licensed alternative to programs such as GNU screen</p>\n</blockquote>\n<p><img src=\"tmux.gif\" alt=\"\"></p>\n<h1 id=\"Instalando\"><a href=\"#Instalando\" class=\"headerlink\" title=\"Instalando\"></a>Instalando</h1><p>Provavelmente o tmux é suportado pelo seu gerenciador de pacotes - não sei como estão as coisas pra Windows.</p>\n<p>Usando o Pacman: <code>sudo pacman -S tmux</code><br>Usando o apt-get: <code>sudo apt-get install tmux</code></p>\n<h1 id=\"Basico\"><a href=\"#Basico\" class=\"headerlink\" title=\"Básico\"></a>Básico</h1><p>Para começar o tmux, você precisa criar uma sessão. Você tem duas formas, apenas digitando <code>tmux</code> no terminal(criando uma sessão chamada 0), ou <code>tmux new -s &lt;nome-da-sessao&gt;</code></p>\n<p>Assim que você entrar no tmux, estará dentro de uma sessão, no primeiro painel e na primeira janela.</p>\n<p>Para acionar qualquer coisa do tmux, você precisa apertar o prefixo primeiro, para dizer ao tmux que está acionando um comando. O prefixo padrão é <code>CTRL + b</code>.</p>\n<blockquote><p>Vou usar o acento <code>^</code> para indicar o <code>CTRL</code>. Por exemplo, <code>^b</code> é o mesmo que <code>CTRL + b</code>. Lembre-se que todos os comandos do tmux <em>são</em> sensivos a caixa alta e baixa. Então, <code>^b</code> não é o mesmo que <code>^B</code>. Todo conteúdo sobre tmux que você pesquisar, vai usar essa notação.</p>\n</blockquote>\n<h2 id=\"Alguns-pontos-sobre-o-tmux\"><a href=\"#Alguns-pontos-sobre-o-tmux\" class=\"headerlink\" title=\"Alguns pontos sobre o tmux:\"></a>Alguns pontos sobre o tmux:</h2><ul>\n<li>Você vai notar uma barra inferior assim que entrar em uma sessão do tmux, nela você vai ver o nome da sua sessão, suas janelas, seu usuário@grupo, horário e data atual</li>\n<li>Se você quiser sair do tmux, basta digitar <code>exit</code> no terminal</li>\n</ul>\n<h2 id=\"Paineis\"><a href=\"#Paineis\" class=\"headerlink\" title=\"Painéis\"></a>Painéis</h2><p>Vamos começar a brincar. Aperte <code>prefix + %</code> - coloque seu prefixo no lugar de <code>prefix</code> e você pode apertar <code>Shift + 5</code> pra produzir o <code>%</code>.<br>Você vai dividir sua tela em duas partes. Quer ir para o outro painel? <code>prefix + o</code> é a solução.</p>\n<ul>\n<li><code>prefix + %</code> divide sua tela horizontalmente</li>\n<li><code>prefix + &quot;</code> (aspas duplas) divide sua tela verticalmente</li>\n<li><code>prefix + o</code> te coloca no próximo painel</li>\n<li><code>exit</code> sai do terminal(consequentemente, da sessão do tmux)</li>\n</ul>\n<h1 id=\"Ate-a-proxima\"><a href=\"#Ate-a-proxima\" class=\"headerlink\" title=\"Até a próxima!\"></a>Até a próxima!</h1><p>Isso foi só por hoje. No próximo artigo vou falar mais sobre as janelas do tmux, mas isso já é o suficiente pra você aprender a brincar com o tmux.</p>\n<p>tmux no Github: <a href=\"https://github.com/tmux/tmux\" target=\"_blank\" rel=\"noopener\">https://github.com/tmux/tmux</a><br>Wiki to tmux: <a href=\"https://github.com/tmux/tmux/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/tmux/tmux/wiki</a><br>awesome-tmux: <a href=\"https://github.com/rothgar/awesome-tmux\" target=\"_blank\" rel=\"noopener\">https://github.com/rothgar/awesome-tmux</a></p>\n"},{"title":"Terminais são legais: como começar a usar","description":"Todo mundo talvez precise usar o terminal uma hora ou outra, e não é tão difícil quanto parece!","thumbnail":"learning.jpg","date":"2018-06-02T19:47:14.000Z","_content":"\n![](learning.jpg)\n\n# Terminal, o que é?\n\nBasicamente, uma janela onde você escreve `comandos` para o computador executar. Esses comandos podem ler um arquivo, criar pastas, executar scripts, fazer café e muito mais. (é sério, da pra fazer café)\n\n# Por onde começar?\n\nBom, se você já programa, trabalha com PHP, NodeJS, Python, etc, talvez já tenha usado o terminal algumas vezes, copiando e colando comandos da documentação e/ou do StackOverflow. Mas hoje vou mostrar alguns comandos básicos e simples pra te ajudar no dia a dia.\n\nSe você é novo na área, acabou de entrar e etc, eu sugiro você escutar [o podcast QuebraDev](http://quebradev.com.br/) pra te ajudar. Você vai entender melhor depois de escutar os primeiros episódios =]\n\n## Introdução\n\nPara começar, abra o terminal. Vou considerar que está no Linux ou MAC.\n\nAssim que você abrir o terminal, estará em uma pasta, normalmente vai aparecer logo depois do nome do seu usuário e do seu grupo atual, como na imagem:\n\n![](user-terminal.png)\n\nAqui é tudo muito simples: você sabe seu usuário atual, grupo, pasta e tem um espaço pra digitar os comandos, mais nada.\n\nVocê só precisa abrir a janela, digitar seu comando e apertar `Enter` para executar.\n\nNão é difícil, certo? Você só precisa ser cuidadoso com o que vai executar.\n\n## Pastas, caminhos e etc\n\nEssa é a parte crucial de se usar um terminal: você precisa entender como as coisas são ordenadas. Aqui você tem pastas, arquivos e _symlinks_(que são como atalhos comuns).\n\nVou citar aqui alguns atalhos:\n\n- Quando você ver `.` significa que está se referindo à pasta atual, independente de onde estiver. Por exemplo: `./arquivo.txt` significa que estou me referindo ao arquivo `arquivo.txt` na pasta atual.\n- Quando ver `..`, significa que está se referindo à pasta *superior*. Como em `../`.\n- Quando você ver qualquer *caminho* começando com `/`, é porque aquele caminho *começa* da pasta raiz do sistema.\n- Sempre quando você precisar definir caminhos, isto é, dizer onde está cada coisa, vai usar a `/` como separador. No Windows você usa `\\`, no Linux e OSX, usa `/`. Como `./uma/pasta/aqui`.\n\n\n## Variáveis e _piping_\n\nDentro do terminal - você pode ver alguém falar do terminal como `shell`, `bash`, são a mesma coisa -, você pode ter variáveis. É onde você guarda valores para usar em vários lugares(dentro da mesma janela) ou pelo sistema.\n\nVamos ver qual o caminho completo da sua pasta pessoal? Execute `echo $HOME`.\n\n{% blockquote %}\nO comando `echo` serve para exibir na tela algum texto, variável, etc. Você pode usar com qualquer outra coisa, como `echo 123`.\n{% endblockquote %}\n\nViu que saiu algo como `/home/NOME_DO_SEU_USUARIO`? É o caminho da sua pasta pessoal.\n\nVocê pode criar sua própria variável *local* executando `VARIAVEL=VALOR`, em seguida, pode dar um `echo $VARIAVEL` para ver o valor. Quando for usar a variável em algum lugar, coloque um `$` no começo do nome, sem espaços.\n\nLembrando que variáveis podem ser minúsculas ou maiúsculas, mas não podem conter acentuação ou espaços.\n\nComo costume/padrão, sempre criamos variáveis em caixa alta e separamos nomes com *_*.\n\n### O que é _piping_?\n\nÉ quando você precisa juntar dois comandos, ou executá-los ao mesmo tempo. Talvez você não use isso agora de começo, mas acredito que é necessário te dizer o que significam quando você ver por aí.\n\nPara enviar a saída de um comando para outro, você pode usar o `|`, como em `echo 123 | grep 1` - veremos mais sobre `grep` depois.\n\nPara executar um comando seguido do outro, consecutivamente, use `&&`. Exemplo: `echo 123 && echo 456`.\n\nPara enviar a saída de um comando diretamente para um arquivo(sobreescrevendo ou criando), use `>`. Exemplo: `echo 123 > test.txt`. Para colocar a saída no fim do arquivo, sem reescrevê-lo, use `>>`.\n\nAcredito que você não vai usar isso agora, mas é necessáro entender o que cada coisa significa.\n\n## Aprendendo alguns comandos úteis\n\nVamos brincar com os seguintes comandos:\n\n- `cd` serve para caminhar entre pastas\n- `ls` lista o conteúdo da pasta atual e outras\n- `grep` filtra a saída de algo(texto)\n- `touch` cria um novo arquivo\n- `rm` deleta um arquivo/pasta\n\nOk, parece muita coisa, mas não é, vamos aos poucos. Agora que tal ir para a sua pasta pessoal?\n\nPara chegar lá, temos várias formas de navegar usando `cd`:\n\n- Use `cd ~`, o `~` serve como atalho pessoal\n- Use `cd $HOME`, sendo que `$HOME` é uma variável que contém o caminho completo\n- Use `cd /home/NOME_DO_SEU_USUARIO`, indicando um caminho direto da raiz do sistema\n\nTodas as alternativas levam para o mesmo lugar: sua pasta pessoal.\n\nMas, um momento, o que tem aqui? Execute `ls`. \n\nViu que surgiu várias palavras, digo, nomes de pastas e arquivos? Mas está tudo na mesma linha, está difícil de ler...\n\nExecute `ls -l` e veja tudo numa lista/tabela bonita. Ok, tem algumas coisas estranhas a esquerda, mas você percebeu que tem o seu nome de usuário, nome do seu grupo, alguns números, data e o nome dos arquivos?\n\nO `-l` faz a listagem ficar mais fácil pra leitura.\n\n{% blockquote %}\nQuase todo comando aceita _parâmetros_, ou seja, são configurações especiais para dizer o que fazer exatamente e como fazer. No caso de `-l`, indica que queremos em forma de lista. \n{% endblockquote %}\n\nEscolha uma pasta, arquivo, qualquer coisa que tenha aparecido na lista. Só o primeiro nome ou parte dele serve.\n\nAgora execute `ls -l | grep NOME`, com o nome que você escolheu - atente-se ao `|`. Percebeu que só apareceu o que você *filtrou*?\n\n`grep` serve basicamente para filtrar coisas. O `|` que você colocou, indica que `grep` será executado após `ls -l` e usará o resultado de `ls -l` como entrada.\n\nParece legal, não?\n\nDigamos que você precise criar um arquivo agora, como faria? Iria abrir algum editor? Não precisa! Vá até a pasta que queira criar o arquivo e execute `touch ARQUIVO`, onde você pode colocar o nome do arquivo e extensão, ex: `touch texto.txt`, `touch index.js`.\n\nDepois de criar o arquivo, é melhor verificar: na mesma pasta, execute `ls -l | grep ARQUIVO`, e veja se ele aparece.\n\nBom, mas e se você criar um arquivo, e depois decidir que não precisa mais dele? Você pode apagar usando `rm`: execute `rm ARQUIVO`.\n\n{% blockquote %}\n`rm` também pode ser usado para apagar vários arquivos do mesmo formato, com `rm *.js`, pastas com `rm -rf PASTA`, ou apenas o conteúdo de uma pasta, como `rm PASTA/*`. Há várias formas de usar o `rm` e você vai se acostumar mais logo logo. Só não use `rm -rf /` ou qualquer pasta na raiz, porque isso irá prejudicar seu sistema(é sério).\n{% endblockquote %}\n\n# Até a próxima\n\nBom, o artigo ficou um pouco extenso e vou deixar mais para outro. Por agora você já aprendeu alguns comandos bacanas, logo falo mais sobre permissões e outras coisas interessantes, inclusive mais a fundo sobre comandos básicos. Se tiver dúvidas, coloque nos comentários =D\n\n\n","source":"_posts/Terminais-sao-legais-como-comecar-a-usar.md","raw":"---\ntitle: 'Terminais são legais: como começar a usar'\ndescription: 'Todo mundo talvez precise usar o terminal uma hora ou outra, e não é tão difícil quanto parece!'\nthumbnail: 'learning.jpg'\ndate: 2018-06-02 16:47:14\ntags:\n---\n\n![](learning.jpg)\n\n# Terminal, o que é?\n\nBasicamente, uma janela onde você escreve `comandos` para o computador executar. Esses comandos podem ler um arquivo, criar pastas, executar scripts, fazer café e muito mais. (é sério, da pra fazer café)\n\n# Por onde começar?\n\nBom, se você já programa, trabalha com PHP, NodeJS, Python, etc, talvez já tenha usado o terminal algumas vezes, copiando e colando comandos da documentação e/ou do StackOverflow. Mas hoje vou mostrar alguns comandos básicos e simples pra te ajudar no dia a dia.\n\nSe você é novo na área, acabou de entrar e etc, eu sugiro você escutar [o podcast QuebraDev](http://quebradev.com.br/) pra te ajudar. Você vai entender melhor depois de escutar os primeiros episódios =]\n\n## Introdução\n\nPara começar, abra o terminal. Vou considerar que está no Linux ou MAC.\n\nAssim que você abrir o terminal, estará em uma pasta, normalmente vai aparecer logo depois do nome do seu usuário e do seu grupo atual, como na imagem:\n\n![](user-terminal.png)\n\nAqui é tudo muito simples: você sabe seu usuário atual, grupo, pasta e tem um espaço pra digitar os comandos, mais nada.\n\nVocê só precisa abrir a janela, digitar seu comando e apertar `Enter` para executar.\n\nNão é difícil, certo? Você só precisa ser cuidadoso com o que vai executar.\n\n## Pastas, caminhos e etc\n\nEssa é a parte crucial de se usar um terminal: você precisa entender como as coisas são ordenadas. Aqui você tem pastas, arquivos e _symlinks_(que são como atalhos comuns).\n\nVou citar aqui alguns atalhos:\n\n- Quando você ver `.` significa que está se referindo à pasta atual, independente de onde estiver. Por exemplo: `./arquivo.txt` significa que estou me referindo ao arquivo `arquivo.txt` na pasta atual.\n- Quando ver `..`, significa que está se referindo à pasta *superior*. Como em `../`.\n- Quando você ver qualquer *caminho* começando com `/`, é porque aquele caminho *começa* da pasta raiz do sistema.\n- Sempre quando você precisar definir caminhos, isto é, dizer onde está cada coisa, vai usar a `/` como separador. No Windows você usa `\\`, no Linux e OSX, usa `/`. Como `./uma/pasta/aqui`.\n\n\n## Variáveis e _piping_\n\nDentro do terminal - você pode ver alguém falar do terminal como `shell`, `bash`, são a mesma coisa -, você pode ter variáveis. É onde você guarda valores para usar em vários lugares(dentro da mesma janela) ou pelo sistema.\n\nVamos ver qual o caminho completo da sua pasta pessoal? Execute `echo $HOME`.\n\n{% blockquote %}\nO comando `echo` serve para exibir na tela algum texto, variável, etc. Você pode usar com qualquer outra coisa, como `echo 123`.\n{% endblockquote %}\n\nViu que saiu algo como `/home/NOME_DO_SEU_USUARIO`? É o caminho da sua pasta pessoal.\n\nVocê pode criar sua própria variável *local* executando `VARIAVEL=VALOR`, em seguida, pode dar um `echo $VARIAVEL` para ver o valor. Quando for usar a variável em algum lugar, coloque um `$` no começo do nome, sem espaços.\n\nLembrando que variáveis podem ser minúsculas ou maiúsculas, mas não podem conter acentuação ou espaços.\n\nComo costume/padrão, sempre criamos variáveis em caixa alta e separamos nomes com *_*.\n\n### O que é _piping_?\n\nÉ quando você precisa juntar dois comandos, ou executá-los ao mesmo tempo. Talvez você não use isso agora de começo, mas acredito que é necessário te dizer o que significam quando você ver por aí.\n\nPara enviar a saída de um comando para outro, você pode usar o `|`, como em `echo 123 | grep 1` - veremos mais sobre `grep` depois.\n\nPara executar um comando seguido do outro, consecutivamente, use `&&`. Exemplo: `echo 123 && echo 456`.\n\nPara enviar a saída de um comando diretamente para um arquivo(sobreescrevendo ou criando), use `>`. Exemplo: `echo 123 > test.txt`. Para colocar a saída no fim do arquivo, sem reescrevê-lo, use `>>`.\n\nAcredito que você não vai usar isso agora, mas é necessáro entender o que cada coisa significa.\n\n## Aprendendo alguns comandos úteis\n\nVamos brincar com os seguintes comandos:\n\n- `cd` serve para caminhar entre pastas\n- `ls` lista o conteúdo da pasta atual e outras\n- `grep` filtra a saída de algo(texto)\n- `touch` cria um novo arquivo\n- `rm` deleta um arquivo/pasta\n\nOk, parece muita coisa, mas não é, vamos aos poucos. Agora que tal ir para a sua pasta pessoal?\n\nPara chegar lá, temos várias formas de navegar usando `cd`:\n\n- Use `cd ~`, o `~` serve como atalho pessoal\n- Use `cd $HOME`, sendo que `$HOME` é uma variável que contém o caminho completo\n- Use `cd /home/NOME_DO_SEU_USUARIO`, indicando um caminho direto da raiz do sistema\n\nTodas as alternativas levam para o mesmo lugar: sua pasta pessoal.\n\nMas, um momento, o que tem aqui? Execute `ls`. \n\nViu que surgiu várias palavras, digo, nomes de pastas e arquivos? Mas está tudo na mesma linha, está difícil de ler...\n\nExecute `ls -l` e veja tudo numa lista/tabela bonita. Ok, tem algumas coisas estranhas a esquerda, mas você percebeu que tem o seu nome de usuário, nome do seu grupo, alguns números, data e o nome dos arquivos?\n\nO `-l` faz a listagem ficar mais fácil pra leitura.\n\n{% blockquote %}\nQuase todo comando aceita _parâmetros_, ou seja, são configurações especiais para dizer o que fazer exatamente e como fazer. No caso de `-l`, indica que queremos em forma de lista. \n{% endblockquote %}\n\nEscolha uma pasta, arquivo, qualquer coisa que tenha aparecido na lista. Só o primeiro nome ou parte dele serve.\n\nAgora execute `ls -l | grep NOME`, com o nome que você escolheu - atente-se ao `|`. Percebeu que só apareceu o que você *filtrou*?\n\n`grep` serve basicamente para filtrar coisas. O `|` que você colocou, indica que `grep` será executado após `ls -l` e usará o resultado de `ls -l` como entrada.\n\nParece legal, não?\n\nDigamos que você precise criar um arquivo agora, como faria? Iria abrir algum editor? Não precisa! Vá até a pasta que queira criar o arquivo e execute `touch ARQUIVO`, onde você pode colocar o nome do arquivo e extensão, ex: `touch texto.txt`, `touch index.js`.\n\nDepois de criar o arquivo, é melhor verificar: na mesma pasta, execute `ls -l | grep ARQUIVO`, e veja se ele aparece.\n\nBom, mas e se você criar um arquivo, e depois decidir que não precisa mais dele? Você pode apagar usando `rm`: execute `rm ARQUIVO`.\n\n{% blockquote %}\n`rm` também pode ser usado para apagar vários arquivos do mesmo formato, com `rm *.js`, pastas com `rm -rf PASTA`, ou apenas o conteúdo de uma pasta, como `rm PASTA/*`. Há várias formas de usar o `rm` e você vai se acostumar mais logo logo. Só não use `rm -rf /` ou qualquer pasta na raiz, porque isso irá prejudicar seu sistema(é sério).\n{% endblockquote %}\n\n# Até a próxima\n\nBom, o artigo ficou um pouco extenso e vou deixar mais para outro. Por agora você já aprendeu alguns comandos bacanas, logo falo mais sobre permissões e outras coisas interessantes, inclusive mais a fundo sobre comandos básicos. Se tiver dúvidas, coloque nos comentários =D\n\n\n","slug":"Terminais-sao-legais-como-comecar-a-usar","published":1,"updated":"2018-06-02T20:16:26.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhxv2x660002terpmulonuyi","content":"<p><img src=\"learning.jpg\" alt=\"\"></p>\n<h1 id=\"Terminal-o-que-e\"><a href=\"#Terminal-o-que-e\" class=\"headerlink\" title=\"Terminal, o que é?\"></a>Terminal, o que é?</h1><p>Basicamente, uma janela onde você escreve <code>comandos</code> para o computador executar. Esses comandos podem ler um arquivo, criar pastas, executar scripts, fazer café e muito mais. (é sério, da pra fazer café)</p>\n<h1 id=\"Por-onde-comecar\"><a href=\"#Por-onde-comecar\" class=\"headerlink\" title=\"Por onde começar?\"></a>Por onde começar?</h1><p>Bom, se você já programa, trabalha com PHP, NodeJS, Python, etc, talvez já tenha usado o terminal algumas vezes, copiando e colando comandos da documentação e/ou do StackOverflow. Mas hoje vou mostrar alguns comandos básicos e simples pra te ajudar no dia a dia.</p>\n<p>Se você é novo na área, acabou de entrar e etc, eu sugiro você escutar <a href=\"http://quebradev.com.br/\" target=\"_blank\" rel=\"noopener\">o podcast QuebraDev</a> pra te ajudar. Você vai entender melhor depois de escutar os primeiros episódios =]</p>\n<h2 id=\"Introducao\"><a href=\"#Introducao\" class=\"headerlink\" title=\"Introdução\"></a>Introdução</h2><p>Para começar, abra o terminal. Vou considerar que está no Linux ou MAC.</p>\n<p>Assim que você abrir o terminal, estará em uma pasta, normalmente vai aparecer logo depois do nome do seu usuário e do seu grupo atual, como na imagem:</p>\n<p><img src=\"user-terminal.png\" alt=\"\"></p>\n<p>Aqui é tudo muito simples: você sabe seu usuário atual, grupo, pasta e tem um espaço pra digitar os comandos, mais nada.</p>\n<p>Você só precisa abrir a janela, digitar seu comando e apertar <code>Enter</code> para executar.</p>\n<p>Não é difícil, certo? Você só precisa ser cuidadoso com o que vai executar.</p>\n<h2 id=\"Pastas-caminhos-e-etc\"><a href=\"#Pastas-caminhos-e-etc\" class=\"headerlink\" title=\"Pastas, caminhos e etc\"></a>Pastas, caminhos e etc</h2><p>Essa é a parte crucial de se usar um terminal: você precisa entender como as coisas são ordenadas. Aqui você tem pastas, arquivos e <em>symlinks</em>(que são como atalhos comuns).</p>\n<p>Vou citar aqui alguns atalhos:</p>\n<ul>\n<li>Quando você ver <code>.</code> significa que está se referindo à pasta atual, independente de onde estiver. Por exemplo: <code>./arquivo.txt</code> significa que estou me referindo ao arquivo <code>arquivo.txt</code> na pasta atual.</li>\n<li>Quando ver <code>..</code>, significa que está se referindo à pasta <em>superior</em>. Como em <code>../</code>.</li>\n<li>Quando você ver qualquer <em>caminho</em> começando com <code>/</code>, é porque aquele caminho <em>começa</em> da pasta raiz do sistema.</li>\n<li>Sempre quando você precisar definir caminhos, isto é, dizer onde está cada coisa, vai usar a <code>/</code> como separador. No Windows você usa <code>\\</code>, no Linux e OSX, usa <code>/</code>. Como <code>./uma/pasta/aqui</code>.</li>\n</ul>\n<h2 id=\"Variaveis-e-piping\"><a href=\"#Variaveis-e-piping\" class=\"headerlink\" title=\"Variáveis e piping\"></a>Variáveis e <em>piping</em></h2><p>Dentro do terminal - você pode ver alguém falar do terminal como <code>shell</code>, <code>bash</code>, são a mesma coisa -, você pode ter variáveis. É onde você guarda valores para usar em vários lugares(dentro da mesma janela) ou pelo sistema.</p>\n<p>Vamos ver qual o caminho completo da sua pasta pessoal? Execute <code>echo $HOME</code>.</p>\n<blockquote><p>O comando <code>echo</code> serve para exibir na tela algum texto, variável, etc. Você pode usar com qualquer outra coisa, como <code>echo 123</code>.</p>\n</blockquote>\n<p>Viu que saiu algo como <code>/home/NOME_DO_SEU_USUARIO</code>? É o caminho da sua pasta pessoal.</p>\n<p>Você pode criar sua própria variável <em>local</em> executando <code>VARIAVEL=VALOR</code>, em seguida, pode dar um <code>echo $VARIAVEL</code> para ver o valor. Quando for usar a variável em algum lugar, coloque um <code>$</code> no começo do nome, sem espaços.</p>\n<p>Lembrando que variáveis podem ser minúsculas ou maiúsculas, mas não podem conter acentuação ou espaços.</p>\n<p>Como costume/padrão, sempre criamos variáveis em caixa alta e separamos nomes com <em>_</em>.</p>\n<h3 id=\"O-que-e-piping\"><a href=\"#O-que-e-piping\" class=\"headerlink\" title=\"O que é piping?\"></a>O que é <em>piping</em>?</h3><p>É quando você precisa juntar dois comandos, ou executá-los ao mesmo tempo. Talvez você não use isso agora de começo, mas acredito que é necessário te dizer o que significam quando você ver por aí.</p>\n<p>Para enviar a saída de um comando para outro, você pode usar o <code>|</code>, como em <code>echo 123 | grep 1</code> - veremos mais sobre <code>grep</code> depois.</p>\n<p>Para executar um comando seguido do outro, consecutivamente, use <code>&amp;&amp;</code>. Exemplo: <code>echo 123 &amp;&amp; echo 456</code>.</p>\n<p>Para enviar a saída de um comando diretamente para um arquivo(sobreescrevendo ou criando), use <code>&gt;</code>. Exemplo: <code>echo 123 &gt; test.txt</code>. Para colocar a saída no fim do arquivo, sem reescrevê-lo, use <code>&gt;&gt;</code>.</p>\n<p>Acredito que você não vai usar isso agora, mas é necessáro entender o que cada coisa significa.</p>\n<h2 id=\"Aprendendo-alguns-comandos-uteis\"><a href=\"#Aprendendo-alguns-comandos-uteis\" class=\"headerlink\" title=\"Aprendendo alguns comandos úteis\"></a>Aprendendo alguns comandos úteis</h2><p>Vamos brincar com os seguintes comandos:</p>\n<ul>\n<li><code>cd</code> serve para caminhar entre pastas</li>\n<li><code>ls</code> lista o conteúdo da pasta atual e outras</li>\n<li><code>grep</code> filtra a saída de algo(texto)</li>\n<li><code>touch</code> cria um novo arquivo</li>\n<li><code>rm</code> deleta um arquivo/pasta</li>\n</ul>\n<p>Ok, parece muita coisa, mas não é, vamos aos poucos. Agora que tal ir para a sua pasta pessoal?</p>\n<p>Para chegar lá, temos várias formas de navegar usando <code>cd</code>:</p>\n<ul>\n<li>Use <code>cd ~</code>, o <code>~</code> serve como atalho pessoal</li>\n<li>Use <code>cd $HOME</code>, sendo que <code>$HOME</code> é uma variável que contém o caminho completo</li>\n<li>Use <code>cd /home/NOME_DO_SEU_USUARIO</code>, indicando um caminho direto da raiz do sistema</li>\n</ul>\n<p>Todas as alternativas levam para o mesmo lugar: sua pasta pessoal.</p>\n<p>Mas, um momento, o que tem aqui? Execute <code>ls</code>. </p>\n<p>Viu que surgiu várias palavras, digo, nomes de pastas e arquivos? Mas está tudo na mesma linha, está difícil de ler…</p>\n<p>Execute <code>ls -l</code> e veja tudo numa lista/tabela bonita. Ok, tem algumas coisas estranhas a esquerda, mas você percebeu que tem o seu nome de usuário, nome do seu grupo, alguns números, data e o nome dos arquivos?</p>\n<p>O <code>-l</code> faz a listagem ficar mais fácil pra leitura.</p>\n<blockquote><p>Quase todo comando aceita <em>parâmetros</em>, ou seja, são configurações especiais para dizer o que fazer exatamente e como fazer. No caso de <code>-l</code>, indica que queremos em forma de lista. </p>\n</blockquote>\n<p>Escolha uma pasta, arquivo, qualquer coisa que tenha aparecido na lista. Só o primeiro nome ou parte dele serve.</p>\n<p>Agora execute <code>ls -l | grep NOME</code>, com o nome que você escolheu - atente-se ao <code>|</code>. Percebeu que só apareceu o que você <em>filtrou</em>?</p>\n<p><code>grep</code> serve basicamente para filtrar coisas. O <code>|</code> que você colocou, indica que <code>grep</code> será executado após <code>ls -l</code> e usará o resultado de <code>ls -l</code> como entrada.</p>\n<p>Parece legal, não?</p>\n<p>Digamos que você precise criar um arquivo agora, como faria? Iria abrir algum editor? Não precisa! Vá até a pasta que queira criar o arquivo e execute <code>touch ARQUIVO</code>, onde você pode colocar o nome do arquivo e extensão, ex: <code>touch texto.txt</code>, <code>touch index.js</code>.</p>\n<p>Depois de criar o arquivo, é melhor verificar: na mesma pasta, execute <code>ls -l | grep ARQUIVO</code>, e veja se ele aparece.</p>\n<p>Bom, mas e se você criar um arquivo, e depois decidir que não precisa mais dele? Você pode apagar usando <code>rm</code>: execute <code>rm ARQUIVO</code>.</p>\n<blockquote><p><code>rm</code> também pode ser usado para apagar vários arquivos do mesmo formato, com <code>rm *.js</code>, pastas com <code>rm -rf PASTA</code>, ou apenas o conteúdo de uma pasta, como <code>rm PASTA/*</code>. Há várias formas de usar o <code>rm</code> e você vai se acostumar mais logo logo. Só não use <code>rm -rf /</code> ou qualquer pasta na raiz, porque isso irá prejudicar seu sistema(é sério).</p>\n</blockquote>\n<h1 id=\"Ate-a-proxima\"><a href=\"#Ate-a-proxima\" class=\"headerlink\" title=\"Até a próxima\"></a>Até a próxima</h1><p>Bom, o artigo ficou um pouco extenso e vou deixar mais para outro. Por agora você já aprendeu alguns comandos bacanas, logo falo mais sobre permissões e outras coisas interessantes, inclusive mais a fundo sobre comandos básicos. Se tiver dúvidas, coloque nos comentários =D</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"learning.jpg\" alt=\"\"></p>\n<h1 id=\"Terminal-o-que-e\"><a href=\"#Terminal-o-que-e\" class=\"headerlink\" title=\"Terminal, o que é?\"></a>Terminal, o que é?</h1><p>Basicamente, uma janela onde você escreve <code>comandos</code> para o computador executar. Esses comandos podem ler um arquivo, criar pastas, executar scripts, fazer café e muito mais. (é sério, da pra fazer café)</p>\n<h1 id=\"Por-onde-comecar\"><a href=\"#Por-onde-comecar\" class=\"headerlink\" title=\"Por onde começar?\"></a>Por onde começar?</h1><p>Bom, se você já programa, trabalha com PHP, NodeJS, Python, etc, talvez já tenha usado o terminal algumas vezes, copiando e colando comandos da documentação e/ou do StackOverflow. Mas hoje vou mostrar alguns comandos básicos e simples pra te ajudar no dia a dia.</p>\n<p>Se você é novo na área, acabou de entrar e etc, eu sugiro você escutar <a href=\"http://quebradev.com.br/\" target=\"_blank\" rel=\"noopener\">o podcast QuebraDev</a> pra te ajudar. Você vai entender melhor depois de escutar os primeiros episódios =]</p>\n<h2 id=\"Introducao\"><a href=\"#Introducao\" class=\"headerlink\" title=\"Introdução\"></a>Introdução</h2><p>Para começar, abra o terminal. Vou considerar que está no Linux ou MAC.</p>\n<p>Assim que você abrir o terminal, estará em uma pasta, normalmente vai aparecer logo depois do nome do seu usuário e do seu grupo atual, como na imagem:</p>\n<p><img src=\"user-terminal.png\" alt=\"\"></p>\n<p>Aqui é tudo muito simples: você sabe seu usuário atual, grupo, pasta e tem um espaço pra digitar os comandos, mais nada.</p>\n<p>Você só precisa abrir a janela, digitar seu comando e apertar <code>Enter</code> para executar.</p>\n<p>Não é difícil, certo? Você só precisa ser cuidadoso com o que vai executar.</p>\n<h2 id=\"Pastas-caminhos-e-etc\"><a href=\"#Pastas-caminhos-e-etc\" class=\"headerlink\" title=\"Pastas, caminhos e etc\"></a>Pastas, caminhos e etc</h2><p>Essa é a parte crucial de se usar um terminal: você precisa entender como as coisas são ordenadas. Aqui você tem pastas, arquivos e <em>symlinks</em>(que são como atalhos comuns).</p>\n<p>Vou citar aqui alguns atalhos:</p>\n<ul>\n<li>Quando você ver <code>.</code> significa que está se referindo à pasta atual, independente de onde estiver. Por exemplo: <code>./arquivo.txt</code> significa que estou me referindo ao arquivo <code>arquivo.txt</code> na pasta atual.</li>\n<li>Quando ver <code>..</code>, significa que está se referindo à pasta <em>superior</em>. Como em <code>../</code>.</li>\n<li>Quando você ver qualquer <em>caminho</em> começando com <code>/</code>, é porque aquele caminho <em>começa</em> da pasta raiz do sistema.</li>\n<li>Sempre quando você precisar definir caminhos, isto é, dizer onde está cada coisa, vai usar a <code>/</code> como separador. No Windows você usa <code>\\</code>, no Linux e OSX, usa <code>/</code>. Como <code>./uma/pasta/aqui</code>.</li>\n</ul>\n<h2 id=\"Variaveis-e-piping\"><a href=\"#Variaveis-e-piping\" class=\"headerlink\" title=\"Variáveis e piping\"></a>Variáveis e <em>piping</em></h2><p>Dentro do terminal - você pode ver alguém falar do terminal como <code>shell</code>, <code>bash</code>, são a mesma coisa -, você pode ter variáveis. É onde você guarda valores para usar em vários lugares(dentro da mesma janela) ou pelo sistema.</p>\n<p>Vamos ver qual o caminho completo da sua pasta pessoal? Execute <code>echo $HOME</code>.</p>\n<blockquote><p>O comando <code>echo</code> serve para exibir na tela algum texto, variável, etc. Você pode usar com qualquer outra coisa, como <code>echo 123</code>.</p>\n</blockquote>\n<p>Viu que saiu algo como <code>/home/NOME_DO_SEU_USUARIO</code>? É o caminho da sua pasta pessoal.</p>\n<p>Você pode criar sua própria variável <em>local</em> executando <code>VARIAVEL=VALOR</code>, em seguida, pode dar um <code>echo $VARIAVEL</code> para ver o valor. Quando for usar a variável em algum lugar, coloque um <code>$</code> no começo do nome, sem espaços.</p>\n<p>Lembrando que variáveis podem ser minúsculas ou maiúsculas, mas não podem conter acentuação ou espaços.</p>\n<p>Como costume/padrão, sempre criamos variáveis em caixa alta e separamos nomes com <em>_</em>.</p>\n<h3 id=\"O-que-e-piping\"><a href=\"#O-que-e-piping\" class=\"headerlink\" title=\"O que é piping?\"></a>O que é <em>piping</em>?</h3><p>É quando você precisa juntar dois comandos, ou executá-los ao mesmo tempo. Talvez você não use isso agora de começo, mas acredito que é necessário te dizer o que significam quando você ver por aí.</p>\n<p>Para enviar a saída de um comando para outro, você pode usar o <code>|</code>, como em <code>echo 123 | grep 1</code> - veremos mais sobre <code>grep</code> depois.</p>\n<p>Para executar um comando seguido do outro, consecutivamente, use <code>&amp;&amp;</code>. Exemplo: <code>echo 123 &amp;&amp; echo 456</code>.</p>\n<p>Para enviar a saída de um comando diretamente para um arquivo(sobreescrevendo ou criando), use <code>&gt;</code>. Exemplo: <code>echo 123 &gt; test.txt</code>. Para colocar a saída no fim do arquivo, sem reescrevê-lo, use <code>&gt;&gt;</code>.</p>\n<p>Acredito que você não vai usar isso agora, mas é necessáro entender o que cada coisa significa.</p>\n<h2 id=\"Aprendendo-alguns-comandos-uteis\"><a href=\"#Aprendendo-alguns-comandos-uteis\" class=\"headerlink\" title=\"Aprendendo alguns comandos úteis\"></a>Aprendendo alguns comandos úteis</h2><p>Vamos brincar com os seguintes comandos:</p>\n<ul>\n<li><code>cd</code> serve para caminhar entre pastas</li>\n<li><code>ls</code> lista o conteúdo da pasta atual e outras</li>\n<li><code>grep</code> filtra a saída de algo(texto)</li>\n<li><code>touch</code> cria um novo arquivo</li>\n<li><code>rm</code> deleta um arquivo/pasta</li>\n</ul>\n<p>Ok, parece muita coisa, mas não é, vamos aos poucos. Agora que tal ir para a sua pasta pessoal?</p>\n<p>Para chegar lá, temos várias formas de navegar usando <code>cd</code>:</p>\n<ul>\n<li>Use <code>cd ~</code>, o <code>~</code> serve como atalho pessoal</li>\n<li>Use <code>cd $HOME</code>, sendo que <code>$HOME</code> é uma variável que contém o caminho completo</li>\n<li>Use <code>cd /home/NOME_DO_SEU_USUARIO</code>, indicando um caminho direto da raiz do sistema</li>\n</ul>\n<p>Todas as alternativas levam para o mesmo lugar: sua pasta pessoal.</p>\n<p>Mas, um momento, o que tem aqui? Execute <code>ls</code>. </p>\n<p>Viu que surgiu várias palavras, digo, nomes de pastas e arquivos? Mas está tudo na mesma linha, está difícil de ler…</p>\n<p>Execute <code>ls -l</code> e veja tudo numa lista/tabela bonita. Ok, tem algumas coisas estranhas a esquerda, mas você percebeu que tem o seu nome de usuário, nome do seu grupo, alguns números, data e o nome dos arquivos?</p>\n<p>O <code>-l</code> faz a listagem ficar mais fácil pra leitura.</p>\n<blockquote><p>Quase todo comando aceita <em>parâmetros</em>, ou seja, são configurações especiais para dizer o que fazer exatamente e como fazer. No caso de <code>-l</code>, indica que queremos em forma de lista. </p>\n</blockquote>\n<p>Escolha uma pasta, arquivo, qualquer coisa que tenha aparecido na lista. Só o primeiro nome ou parte dele serve.</p>\n<p>Agora execute <code>ls -l | grep NOME</code>, com o nome que você escolheu - atente-se ao <code>|</code>. Percebeu que só apareceu o que você <em>filtrou</em>?</p>\n<p><code>grep</code> serve basicamente para filtrar coisas. O <code>|</code> que você colocou, indica que <code>grep</code> será executado após <code>ls -l</code> e usará o resultado de <code>ls -l</code> como entrada.</p>\n<p>Parece legal, não?</p>\n<p>Digamos que você precise criar um arquivo agora, como faria? Iria abrir algum editor? Não precisa! Vá até a pasta que queira criar o arquivo e execute <code>touch ARQUIVO</code>, onde você pode colocar o nome do arquivo e extensão, ex: <code>touch texto.txt</code>, <code>touch index.js</code>.</p>\n<p>Depois de criar o arquivo, é melhor verificar: na mesma pasta, execute <code>ls -l | grep ARQUIVO</code>, e veja se ele aparece.</p>\n<p>Bom, mas e se você criar um arquivo, e depois decidir que não precisa mais dele? Você pode apagar usando <code>rm</code>: execute <code>rm ARQUIVO</code>.</p>\n<blockquote><p><code>rm</code> também pode ser usado para apagar vários arquivos do mesmo formato, com <code>rm *.js</code>, pastas com <code>rm -rf PASTA</code>, ou apenas o conteúdo de uma pasta, como <code>rm PASTA/*</code>. Há várias formas de usar o <code>rm</code> e você vai se acostumar mais logo logo. Só não use <code>rm -rf /</code> ou qualquer pasta na raiz, porque isso irá prejudicar seu sistema(é sério).</p>\n</blockquote>\n<h1 id=\"Ate-a-proxima\"><a href=\"#Ate-a-proxima\" class=\"headerlink\" title=\"Até a próxima\"></a>Até a próxima</h1><p>Bom, o artigo ficou um pouco extenso e vou deixar mais para outro. Por agora você já aprendeu alguns comandos bacanas, logo falo mais sobre permissões e outras coisas interessantes, inclusive mais a fundo sobre comandos básicos. Se tiver dúvidas, coloque nos comentários =D</p>\n"}],"PostAsset":[{"_id":"source/_posts/Terminais-sao-legais-como-comecar-a-usar/learning.jpg","slug":"learning.jpg","post":"cjhxv2x660002terpmulonuyi","modified":0,"renderable":0},{"_id":"source/_posts/Brincando-com-janelas-no-tmux/current-tmux-windows.jpg","slug":"current-tmux-windows.jpg","post":"cjhxv2x5v0000terp9o9wx5fi","modified":0,"renderable":0},{"_id":"source/_posts/O-incrivel-mundo-do-tmux/thumbnail.jpg","slug":"thumbnail.jpg","post":"cjhxv2x620001terp9zihf0ly","modified":0,"renderable":0},{"_id":"source/_posts/O-incrivel-mundo-do-tmux/tmux.gif","slug":"tmux.gif","post":"cjhxv2x620001terp9zihf0ly","modified":0,"renderable":0},{"_id":"source/_posts/Terminais-sao-legais-como-comecar-a-usar/user-terminal.png","slug":"user-terminal.png","post":"cjhxv2x660002terpmulonuyi","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cjhxv2x620001terp9zihf0ly","tag_id":"cjhxv2x690003terpiole1mee","_id":"cjhxv2x6d0004terp5jzyrh40"}],"Tag":[{"name":"tmux produtividade terminal","_id":"cjhxv2x690003terpiole1mee"}]}}