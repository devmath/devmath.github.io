{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hernands/source/css/main.scss","path":"css/main.scss","modified":0,"renderable":1},{"_id":"themes/hernands/source/images/profile.jpg","path":"images/profile.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hernands/_config.yml","hash":"f758dd7d6743664e4b54cdb162ac67fc2fe1b2bc","modified":1537723467094},{"_id":"source/_drafts/Terminais-sao-legais-v4-0-processos.md","hash":"cf628eda9164c931dc25651f4241932218389357","modified":1534117703638},{"_id":"source/_posts/Brincando-com-janelas-no-tmux.md","hash":"716e76065979d0d1478b7e3c401bfed90b4139e9","modified":1527966372210},{"_id":"source/_posts/Terminais-sao-legais-v1-lendo-e-filtrando-arquivos.md","hash":"e82d6f86cecbcd085b283da132bd9a4e08aa8464","modified":1528587871924},{"_id":"source/_posts/Terminais-sao-legais-v3-1-grupos-de-usuarios.md","hash":"d9aa2be7c96c652dcae34670975f920046a5f8f2","modified":1530387217872},{"_id":"source/_posts/Terminais-sao-legais-v3-2-permissoes.md","hash":"8d767642e0f9d39ba9f05fa687bddfbfa729d6e4","modified":1534117703638},{"_id":"source/_posts/Terminais-sao-legais-v3-usuarios.md","hash":"32b0477259e5c9b95ee1f53623d1e56cfcfcfd99","modified":1530387217872},{"_id":"themes/hernands/layout/index.ejs","hash":"bc8c625a9987bcc5941c485c497ce9d5724f305c","modified":1537724224149},{"_id":"themes/hernands/layout/layout.ejs","hash":"8dda03bd7e3bd428d1b80b56638d5d45d58f6404","modified":1528587871961},{"_id":"themes/hernands/layout/post.ejs","hash":"574d3b73266373bf6b30a0fe07e704b60c23dfb9","modified":1528587871961},{"_id":"source/_posts/Brincando-com-janelas-no-tmux/current-tmux-windows.jpg","hash":"e199520a0c72a6d8a71e639d3c5145035bacb5db","modified":1527966372210},{"_id":"source/_posts/O-incrivel-mundo-do-tmux/thumbnail.jpg","hash":"5a5fa01709adf197c7bda1409e5fe8722f2989a3","modified":1527966372210},{"_id":"source/_posts/O-incrivel-mundo-do-tmux.md","hash":"035b0b4b037ac9e178ff63490b56c12e9500b520","modified":1527966372210},{"_id":"source/_posts/Terminais-sao-legais-como-comecar-a-usar/user-terminal.png","hash":"6fa0c1d712d47f9ddc51ea4f86bdf0646276cff9","modified":1527966372210},{"_id":"source/_posts/Terminais-sao-legais-v1-lendo-e-filtrando-arquivos/filters-espresso-machine-filter-coffee.jpg","hash":"4ea7febb03588b5ccc3af77dac5e6f731fbd2a90","modified":1528587871961},{"_id":"themes/hernands/layout/_partials/footer.ejs","hash":"6cfc2d203f89e0fa33c5fcf11b440361a1ae5731","modified":1528587871961},{"_id":"themes/hernands/layout/_partials/head.ejs","hash":"c045fd858e4302855b8f4822e45ec9fc68a891a4","modified":1528587871961},{"_id":"themes/hernands/source/css/main.scss","hash":"59dbf3d8c59423d51a7cbef9c0dc2edf2a5d3f11","modified":1528587871964},{"_id":"source/_posts/Terminais-sao-legais-v3-1-grupos-de-usuarios/groups.jpg","hash":"7d9c9741991c5a64ca640875e2bf0237f7dc6a1b","modified":1530387217872},{"_id":"themes/hernands/source/images/profile.jpg","hash":"fd3512ca96acd9b545c68a5f4fba283d9034093d","modified":1527966372217},{"_id":"source/_drafts/Terminais-sao-legais-v4-0-processos/top.png","hash":"e52a1e71af6513d687a60fb05ca488a153cf3f3f","modified":1534117703638},{"_id":"source/_posts/Terminais-sao-legais-v3-2-permissoes/ls-l.png","hash":"cbf0351523851256c0ba7858a12845d1c95cccd4","modified":1534117703641},{"_id":"source/_posts/Terminais-sao-legais-v2-pastas.md","hash":"cc5cc8c7fd6526e05f2a7e5a46a04c384598342d","modified":1528675123544},{"_id":"themes/hernands/source/css/article/_article.scss","hash":"2c30e0b5e710676ba83b652c9cb6ea6e104286c0","modified":1527968425685},{"_id":"themes/hernands/source/css/default/_footer.scss","hash":"d4c48ebc2e035217dc3c384a36ba02251ddde499","modified":1527966372213},{"_id":"themes/hernands/source/css/default/_goback.scss","hash":"44e4b805f034373ec09db55ad38affa107c39e84","modified":1528587871964},{"_id":"themes/hernands/source/css/default/_section.scss","hash":"21e11c73b466de3fa4d9ac31bcefdae6ae32c8c3","modified":1527969000697},{"_id":"themes/hernands/source/css/default/_spacer.scss","hash":"c24a534272ac9852d0ffb2a84c553b58494b2ab0","modified":1527966372213},{"_id":"themes/hernands/source/css/home/_about.scss","hash":"d98977990fc92be8f148f3725ce9848a37b42d93","modified":1527966372213},{"_id":"themes/hernands/source/css/home/_articles_list.scss","hash":"b5c5d6a8e7a55fce510a83667b3e0d63518eeaf4","modified":1527966372213},{"_id":"themes/hernands/source/css/home/_header.scss","hash":"776cd3fa8849d582d009f0021deb473f1dbcc978","modified":1527966372213},{"_id":"themes/hernands/source/css/home/_projects.scss","hash":"d760de5d25662899159ce3609d23ae362a44bb8b","modified":1527966372213},{"_id":"themes/hernands/source/css/shield/_defaults.scss","hash":"3319f57e6723a37a1707d6f2c8869736e2942617","modified":1527966372213},{"_id":"themes/hernands/source/css/shield/_helpers.scss","hash":"dd2a3b8dedbb3c300f354da45cf0c6047bc82b3f","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/_init.scss","hash":"0268695322d45faa6dc8ad60331478cb1b9a88a5","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/_mixins.scss","hash":"33b807a4c4162d870fc0468e29e8004cde420645","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/_reset.scss","hash":"3091de30e59ad14f75b6590cd56da67d9f4b3f15","modified":1527968485613},{"_id":"themes/hernands/source/css/shield/_shield.scss","hash":"6db07350b93393090eff72fb9296ecf1098e25e5","modified":1527966372217},{"_id":"source/_posts/O-incrivel-mundo-do-tmux/tmux.gif","hash":"c18e64a53f60752241383fe1b4489e7128b4b3ce","modified":1527966372210},{"_id":"source/_posts/Terminais-sao-legais-como-comecar-a-usar/learning.jpg","hash":"2592f947acfea0b076bd2e6a08ecf672d760398d","modified":1527970421357},{"_id":"themes/hernands/source/css/shield/helpers/_map-extend.scss","hash":"beba003f1ca0328771bd9efd07404b828f9a23d0","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/_box-sizing.scss","hash":"8d2fa47d8c6a31ea1cd5cd2bc3e0a6af04134cba","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/_flex.scss","hash":"ef93d36727a18eabfac70c7a89fcf547b4efaa49","modified":1527966372217},{"_id":"source/_posts/Terminais-sao-legais-como-comecar-a-usar.md","hash":"9b4ceb9bc78be244c31bbc46a6cad1a2139e5615","modified":1527970586215},{"_id":"themes/hernands/source/css/shield/mixins/_general-functions.scss","hash":"9b20d0909bfe81896f67fcb9e5269b0fc7d10904","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/_placeholder.scss","hash":"75415243a5f51ea0ef04e71efa0b134d97e2626d","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/_z-index.scss","hash":"4c785c30f56ba5b100190f0ae5fcf67344d2371f","modified":1527966372217},{"_id":"source/_posts/Terminais-sao-legais-v2-pastas/files.jpg","hash":"997744a013e57c19d8257b7f408ef823289d472c","modified":1528674858796},{"_id":"source/_posts/Terminais-sao-legais-v3-usuarios/people.jpg","hash":"2fbfd7745e569d7692e55551dc4ae71f5d025658","modified":1530387217872},{"_id":"themes/hernands/source/css/shield/mixins/_motion.scss","hash":"fba4b6deec8302f66e5d51b805f96d17e962c2ce","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/grid/_grid-generator.scss","hash":"4f6d04a061b80b2f9c91afabe6b76a2b2f3b4c3d","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/media/_media-bet.scss","hash":"99a5987ee5e4b898e0f16e629c7b8850a30fd33e","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/media/_media-min.scss","hash":"54f264f8b9c6df9ba9ff77931bdab2008a54c657","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/media/_media-opera.scss","hash":"e8f554c336354a6cd597aafab0beca9cc6884b01","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/media/_media-print.scss","hash":"19ee5fea46fe9d6ccce939b3d79be901067db031","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/media/_media-retina.scss","hash":"c3b4ad46c9f2f0bf5fd17e86479a67aab9edd003","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/media/_media-firefox.scss","hash":"a368f37d4e84b0532f82e072733aa542fb85420b","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/media/_media-max.scss","hash":"04d48b20a7f302a1462763977aee7621e73af396","modified":1527966372217},{"_id":"themes/hernands/source/css/shield/mixins/media/_media-ie.scss","hash":"9d6ed8bc8fe8f57a127fab4ac00f0a27e23e84dc","modified":1527966372217}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Terminais são legais v4.0: processos","date":"2018-07-23T17:12:00.000Z","description":null,"thumbnail":null,"_content":"\n## Anteriormente...\n\nVimos algumas coisas legais sobre Linux, se você ainda não leu ou quer refrescar sua memória, se liga:\n\n- [Terminais são legais: como começar a usar ](/terminais-sao-legais-como-comecar-a-usar)\n- [Terminais são legais v1: lendo e filtrando arquivos](/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/)\n- [Terminais são legais v2: trabalhando com arquivos e pastas](/terminais-sao-legais-v2-pastas/)\n- [Terminais são legais v3.0: usuários](/terminais-sao-legais-v3-usuarios/)\n- [Terminais são legais v3.1: grupos de usuários](/terminais-sao-legais-v3-1-grupos-de-usuarios/)\n- [Terminais são legais v3.2: permissões](/terminais-sao-legais-v3-2-permissoes/)\n\nE hoje vamos aprender um pouco mais sobre processos.\n\n# Processos?\n\nUm processo é a representação/instância de um programa, dentro do seu sistema operacional. Um programa, pode ter vários processos, para melhorar a performance, por exemplo.\n\nO Google Chrome usa/usava um esquema onde cada guia tinha seu próprio processo, sua própria alocação de memória e etc, assim o controle de guias era melhor, o consumo era isolado e caso o processo não respondesse mais, *matar* aquele processo não atrapalharia o navegador em si.\n\nTodo processo pode ter processos-filhos, e tem um pai.\n\nNo exemplo do Google Chrome, você tem o processo do navegador em si, e tem vários outros processos para extensões e guias.\n\n## Trabalhando com processos\n\nPara ver processos, temos alguns comandos muito úteis, com eles podemos obter o PID(Process ID) atual e do processo pai, também quantia de memória sendo usada, CPU utilizada, quanto tempo está sendo executado, *quem executou*(usuário, grupo), e muito mais.\n\nComeçando, temos alguns comandos:\n\n- `htop` ou `top`\n- `ps`\n- `pstree`\n\nO `top` e `htop` servem pra mostrar uma grade com processos atuais, segue um printscreen do `top` e em seguida do `htop`:\n\n![tabela de processos mostrando nome, PID, consumo de memória, CPU e mais](top.png)\n![tabela de processos mostrando nome, PID, consumo de memória, CPU e mais](htop.png)\n\n\n","source":"_drafts/Terminais-sao-legais-v4-0-processos.md","raw":"---\ntitle: 'Terminais são legais v4.0: processos'\ndate: 2018-07-23 14:12:00\ndescription:\nthumbnail:\ntags:\n---\n\n## Anteriormente...\n\nVimos algumas coisas legais sobre Linux, se você ainda não leu ou quer refrescar sua memória, se liga:\n\n- [Terminais são legais: como começar a usar ](/terminais-sao-legais-como-comecar-a-usar)\n- [Terminais são legais v1: lendo e filtrando arquivos](/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/)\n- [Terminais são legais v2: trabalhando com arquivos e pastas](/terminais-sao-legais-v2-pastas/)\n- [Terminais são legais v3.0: usuários](/terminais-sao-legais-v3-usuarios/)\n- [Terminais são legais v3.1: grupos de usuários](/terminais-sao-legais-v3-1-grupos-de-usuarios/)\n- [Terminais são legais v3.2: permissões](/terminais-sao-legais-v3-2-permissoes/)\n\nE hoje vamos aprender um pouco mais sobre processos.\n\n# Processos?\n\nUm processo é a representação/instância de um programa, dentro do seu sistema operacional. Um programa, pode ter vários processos, para melhorar a performance, por exemplo.\n\nO Google Chrome usa/usava um esquema onde cada guia tinha seu próprio processo, sua própria alocação de memória e etc, assim o controle de guias era melhor, o consumo era isolado e caso o processo não respondesse mais, *matar* aquele processo não atrapalharia o navegador em si.\n\nTodo processo pode ter processos-filhos, e tem um pai.\n\nNo exemplo do Google Chrome, você tem o processo do navegador em si, e tem vários outros processos para extensões e guias.\n\n## Trabalhando com processos\n\nPara ver processos, temos alguns comandos muito úteis, com eles podemos obter o PID(Process ID) atual e do processo pai, também quantia de memória sendo usada, CPU utilizada, quanto tempo está sendo executado, *quem executou*(usuário, grupo), e muito mais.\n\nComeçando, temos alguns comandos:\n\n- `htop` ou `top`\n- `ps`\n- `pstree`\n\nO `top` e `htop` servem pra mostrar uma grade com processos atuais, segue um printscreen do `top` e em seguida do `htop`:\n\n![tabela de processos mostrando nome, PID, consumo de memória, CPU e mais](top.png)\n![tabela de processos mostrando nome, PID, consumo de memória, CPU e mais](htop.png)\n\n\n","slug":"Terminais-sao-legais-v4-0-processos","published":0,"updated":"2018-08-12T23:48:23.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmf456we00004grpuxr1gmbe","content":"<h2 id=\"Anteriormente…\"><a href=\"#Anteriormente…\" class=\"headerlink\" title=\"Anteriormente…\"></a>Anteriormente…</h2><p>Vimos algumas coisas legais sobre Linux, se você ainda não leu ou quer refrescar sua memória, se liga:</p>\n<ul>\n<li><a href=\"/terminais-sao-legais-como-comecar-a-usar\">Terminais são legais: como começar a usar </a></li>\n<li><a href=\"/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/\">Terminais são legais v1: lendo e filtrando arquivos</a></li>\n<li><a href=\"/terminais-sao-legais-v2-pastas/\">Terminais são legais v2: trabalhando com arquivos e pastas</a></li>\n<li><a href=\"/terminais-sao-legais-v3-usuarios/\">Terminais são legais v3.0: usuários</a></li>\n<li><a href=\"/terminais-sao-legais-v3-1-grupos-de-usuarios/\">Terminais são legais v3.1: grupos de usuários</a></li>\n<li><a href=\"/terminais-sao-legais-v3-2-permissoes/\">Terminais são legais v3.2: permissões</a></li>\n</ul>\n<p>E hoje vamos aprender um pouco mais sobre processos.</p>\n<h1 id=\"Processos\"><a href=\"#Processos\" class=\"headerlink\" title=\"Processos?\"></a>Processos?</h1><p>Um processo é a representação/instância de um programa, dentro do seu sistema operacional. Um programa, pode ter vários processos, para melhorar a performance, por exemplo.</p>\n<p>O Google Chrome usa/usava um esquema onde cada guia tinha seu próprio processo, sua própria alocação de memória e etc, assim o controle de guias era melhor, o consumo era isolado e caso o processo não respondesse mais, <em>matar</em> aquele processo não atrapalharia o navegador em si.</p>\n<p>Todo processo pode ter processos-filhos, e tem um pai.</p>\n<p>No exemplo do Google Chrome, você tem o processo do navegador em si, e tem vários outros processos para extensões e guias.</p>\n<h2 id=\"Trabalhando-com-processos\"><a href=\"#Trabalhando-com-processos\" class=\"headerlink\" title=\"Trabalhando com processos\"></a>Trabalhando com processos</h2><p>Para ver processos, temos alguns comandos muito úteis, com eles podemos obter o PID(Process ID) atual e do processo pai, também quantia de memória sendo usada, CPU utilizada, quanto tempo está sendo executado, <em>quem executou</em>(usuário, grupo), e muito mais.</p>\n<p>Começando, temos alguns comandos:</p>\n<ul>\n<li><code>htop</code> ou <code>top</code></li>\n<li><code>ps</code></li>\n<li><code>pstree</code></li>\n</ul>\n<p>O <code>top</code> e <code>htop</code> servem pra mostrar uma grade com processos atuais, segue um printscreen do <code>top</code> e em seguida do <code>htop</code>:</p>\n<p><img src=\"top.png\" alt=\"tabela de processos mostrando nome, PID, consumo de memória, CPU e mais\"><br><img src=\"htop.png\" alt=\"tabela de processos mostrando nome, PID, consumo de memória, CPU e mais\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Anteriormente…\"><a href=\"#Anteriormente…\" class=\"headerlink\" title=\"Anteriormente…\"></a>Anteriormente…</h2><p>Vimos algumas coisas legais sobre Linux, se você ainda não leu ou quer refrescar sua memória, se liga:</p>\n<ul>\n<li><a href=\"/terminais-sao-legais-como-comecar-a-usar\">Terminais são legais: como começar a usar </a></li>\n<li><a href=\"/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/\">Terminais são legais v1: lendo e filtrando arquivos</a></li>\n<li><a href=\"/terminais-sao-legais-v2-pastas/\">Terminais são legais v2: trabalhando com arquivos e pastas</a></li>\n<li><a href=\"/terminais-sao-legais-v3-usuarios/\">Terminais são legais v3.0: usuários</a></li>\n<li><a href=\"/terminais-sao-legais-v3-1-grupos-de-usuarios/\">Terminais são legais v3.1: grupos de usuários</a></li>\n<li><a href=\"/terminais-sao-legais-v3-2-permissoes/\">Terminais são legais v3.2: permissões</a></li>\n</ul>\n<p>E hoje vamos aprender um pouco mais sobre processos.</p>\n<h1 id=\"Processos\"><a href=\"#Processos\" class=\"headerlink\" title=\"Processos?\"></a>Processos?</h1><p>Um processo é a representação/instância de um programa, dentro do seu sistema operacional. Um programa, pode ter vários processos, para melhorar a performance, por exemplo.</p>\n<p>O Google Chrome usa/usava um esquema onde cada guia tinha seu próprio processo, sua própria alocação de memória e etc, assim o controle de guias era melhor, o consumo era isolado e caso o processo não respondesse mais, <em>matar</em> aquele processo não atrapalharia o navegador em si.</p>\n<p>Todo processo pode ter processos-filhos, e tem um pai.</p>\n<p>No exemplo do Google Chrome, você tem o processo do navegador em si, e tem vários outros processos para extensões e guias.</p>\n<h2 id=\"Trabalhando-com-processos\"><a href=\"#Trabalhando-com-processos\" class=\"headerlink\" title=\"Trabalhando com processos\"></a>Trabalhando com processos</h2><p>Para ver processos, temos alguns comandos muito úteis, com eles podemos obter o PID(Process ID) atual e do processo pai, também quantia de memória sendo usada, CPU utilizada, quanto tempo está sendo executado, <em>quem executou</em>(usuário, grupo), e muito mais.</p>\n<p>Começando, temos alguns comandos:</p>\n<ul>\n<li><code>htop</code> ou <code>top</code></li>\n<li><code>ps</code></li>\n<li><code>pstree</code></li>\n</ul>\n<p>O <code>top</code> e <code>htop</code> servem pra mostrar uma grade com processos atuais, segue um printscreen do <code>top</code> e em seguida do <code>htop</code>:</p>\n<p><img src=\"top.png\" alt=\"tabela de processos mostrando nome, PID, consumo de memória, CPU e mais\"><br><img src=\"htop.png\" alt=\"tabela de processos mostrando nome, PID, consumo de memória, CPU e mais\"></p>\n"},{"title":"Brincando com janelas no tmux","date":"2018-05-22T17:13:16.000Z","_content":"\n# Janelas, painéis e terminais\n\nEu escrevi [outro artigo](https://hernands.com/o-incrivel-mundo-do-tmux/) introduzindo ao tmux, aconselho você a ler antes de continuar caso não conheça o tmux.\n\nPainéis no tmux são apenas divisões na mesma tela. Você consegue navegar entre elas. É algo bem útil para, por exemplo, editar um arquivo enquanto executa testes em outro painel e acompanha a saída de um log.\n\nJanelas são uma abstração superior: você tem várias janelas dentro do tmux, cada uma com seu próprio layout de painéis, scripts e ambiente.\n\nNo começo eu usava no máximo três painéis e duas janelas. Uma com o trabalho e outra com o `weechat`. Depois de um tempo, aprendi a usar mais e mais, atualmente estou usando cerca de 4 ~ 5 janelas no tmux.\n\n## Abrindo uma nova janela\n\nBom, assim que você abre o tmux, você já está numa janela. Todas as janelas são numeradas e tem títulos, por padrão, é o comando que você está executando agora.\n\nSe você se atentar a barra inferior do tmux, vai perceber que tem o nome da sua sessão e logo em seguida, o `número-da-janela:título`, como aqui tenho o `0:bash`, `1:tt`, `2:app`, `3:laradock`, `4:wr`. São, respectivamente, coisas do trabalho(vim, API rodando e outro painel com git e etc), [client do Twitter](https://github.com/orakaro/rainbowstream), front-end da empresa, essa do laradock eu uso pra controlar o docker e executar algumas coisas com sudo(talvez seja uma má prática, mas já fica logado como root) e por último, outro vim aberto com algo do [BackEndBrasil](https://github.com/backend-br/) ou um artigo que esteja escrevendo.\n\n![](current-tmux-windows.jpg)\n\nPara começar, abra o tmux, abra dois ou mais painéis. Depois, pressione `prefix + c`, perceba que agora seus painéis sumiram, é como se você tivesse aberto o tmux agora, certo?\n\nOlhe para baixo, na barra inferior, você tem sua nova janela aberta, provavelmente está escrito `1:bash`. Mas digamos que você queira abrir o `nano`, abra-o. Agora você quer continuar no nano, mas precisa voltar para a outra janela...o que faz?\n\nPressione `prefix + NUMERO_DA_JANELA`, no caso, `prefix + 0`. Você já está na outra janela. O número é exatamente o mesmo que está na barra inferior =)\n\nMas agora, você precisa renomear as janelas, afinal, o título não é muito descritivo...pressione `prefix + ,` em seguida apague o título atual e escreva o que quiser, depois aperte `Enter`.\n\nSua janela tem um novo nome =D\n\nE se você quiser fechar essa janela, use o bom e velho `exit`.\n\n{% blockquote %}\nSe você apertar `prefix + :` e digitar `kill-window`, ele fecha sua janela atual. Cuidado que você pode perder algo se não salvar antes.\n{% endblockquote %}\n\n# Pronto!\n\nAgora você já sabe como instalar o tmux, brincar com painéis, criar, renomear, fechar e mover entre janelas.\n\n","source":"_posts/Brincando-com-janelas-no-tmux.md","raw":"---\ntitle: Brincando com janelas no tmux\ndate: 2018-05-22 14:13:16\ntags:\n---\n\n# Janelas, painéis e terminais\n\nEu escrevi [outro artigo](https://hernands.com/o-incrivel-mundo-do-tmux/) introduzindo ao tmux, aconselho você a ler antes de continuar caso não conheça o tmux.\n\nPainéis no tmux são apenas divisões na mesma tela. Você consegue navegar entre elas. É algo bem útil para, por exemplo, editar um arquivo enquanto executa testes em outro painel e acompanha a saída de um log.\n\nJanelas são uma abstração superior: você tem várias janelas dentro do tmux, cada uma com seu próprio layout de painéis, scripts e ambiente.\n\nNo começo eu usava no máximo três painéis e duas janelas. Uma com o trabalho e outra com o `weechat`. Depois de um tempo, aprendi a usar mais e mais, atualmente estou usando cerca de 4 ~ 5 janelas no tmux.\n\n## Abrindo uma nova janela\n\nBom, assim que você abre o tmux, você já está numa janela. Todas as janelas são numeradas e tem títulos, por padrão, é o comando que você está executando agora.\n\nSe você se atentar a barra inferior do tmux, vai perceber que tem o nome da sua sessão e logo em seguida, o `número-da-janela:título`, como aqui tenho o `0:bash`, `1:tt`, `2:app`, `3:laradock`, `4:wr`. São, respectivamente, coisas do trabalho(vim, API rodando e outro painel com git e etc), [client do Twitter](https://github.com/orakaro/rainbowstream), front-end da empresa, essa do laradock eu uso pra controlar o docker e executar algumas coisas com sudo(talvez seja uma má prática, mas já fica logado como root) e por último, outro vim aberto com algo do [BackEndBrasil](https://github.com/backend-br/) ou um artigo que esteja escrevendo.\n\n![](current-tmux-windows.jpg)\n\nPara começar, abra o tmux, abra dois ou mais painéis. Depois, pressione `prefix + c`, perceba que agora seus painéis sumiram, é como se você tivesse aberto o tmux agora, certo?\n\nOlhe para baixo, na barra inferior, você tem sua nova janela aberta, provavelmente está escrito `1:bash`. Mas digamos que você queira abrir o `nano`, abra-o. Agora você quer continuar no nano, mas precisa voltar para a outra janela...o que faz?\n\nPressione `prefix + NUMERO_DA_JANELA`, no caso, `prefix + 0`. Você já está na outra janela. O número é exatamente o mesmo que está na barra inferior =)\n\nMas agora, você precisa renomear as janelas, afinal, o título não é muito descritivo...pressione `prefix + ,` em seguida apague o título atual e escreva o que quiser, depois aperte `Enter`.\n\nSua janela tem um novo nome =D\n\nE se você quiser fechar essa janela, use o bom e velho `exit`.\n\n{% blockquote %}\nSe você apertar `prefix + :` e digitar `kill-window`, ele fecha sua janela atual. Cuidado que você pode perder algo se não salvar antes.\n{% endblockquote %}\n\n# Pronto!\n\nAgora você já sabe como instalar o tmux, brincar com painéis, criar, renomear, fechar e mover entre janelas.\n\n","slug":"Brincando-com-janelas-no-tmux","published":1,"updated":"2018-06-02T19:06:12.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmf456wk00014grp2ejo070g","content":"<h1 id=\"Janelas-paineis-e-terminais\"><a href=\"#Janelas-paineis-e-terminais\" class=\"headerlink\" title=\"Janelas, painéis e terminais\"></a>Janelas, painéis e terminais</h1><p>Eu escrevi <a href=\"https://hernands.com/o-incrivel-mundo-do-tmux/\" target=\"_blank\" rel=\"noopener\">outro artigo</a> introduzindo ao tmux, aconselho você a ler antes de continuar caso não conheça o tmux.</p>\n<p>Painéis no tmux são apenas divisões na mesma tela. Você consegue navegar entre elas. É algo bem útil para, por exemplo, editar um arquivo enquanto executa testes em outro painel e acompanha a saída de um log.</p>\n<p>Janelas são uma abstração superior: você tem várias janelas dentro do tmux, cada uma com seu próprio layout de painéis, scripts e ambiente.</p>\n<p>No começo eu usava no máximo três painéis e duas janelas. Uma com o trabalho e outra com o <code>weechat</code>. Depois de um tempo, aprendi a usar mais e mais, atualmente estou usando cerca de 4 ~ 5 janelas no tmux.</p>\n<h2 id=\"Abrindo-uma-nova-janela\"><a href=\"#Abrindo-uma-nova-janela\" class=\"headerlink\" title=\"Abrindo uma nova janela\"></a>Abrindo uma nova janela</h2><p>Bom, assim que você abre o tmux, você já está numa janela. Todas as janelas são numeradas e tem títulos, por padrão, é o comando que você está executando agora.</p>\n<p>Se você se atentar a barra inferior do tmux, vai perceber que tem o nome da sua sessão e logo em seguida, o <code>número-da-janela:título</code>, como aqui tenho o <code>0:bash</code>, <code>1:tt</code>, <code>2:app</code>, <code>3:laradock</code>, <code>4:wr</code>. São, respectivamente, coisas do trabalho(vim, API rodando e outro painel com git e etc), <a href=\"https://github.com/orakaro/rainbowstream\" target=\"_blank\" rel=\"noopener\">client do Twitter</a>, front-end da empresa, essa do laradock eu uso pra controlar o docker e executar algumas coisas com sudo(talvez seja uma má prática, mas já fica logado como root) e por último, outro vim aberto com algo do <a href=\"https://github.com/backend-br/\" target=\"_blank\" rel=\"noopener\">BackEndBrasil</a> ou um artigo que esteja escrevendo.</p>\n<p><img src=\"current-tmux-windows.jpg\" alt=\"\"></p>\n<p>Para começar, abra o tmux, abra dois ou mais painéis. Depois, pressione <code>prefix + c</code>, perceba que agora seus painéis sumiram, é como se você tivesse aberto o tmux agora, certo?</p>\n<p>Olhe para baixo, na barra inferior, você tem sua nova janela aberta, provavelmente está escrito <code>1:bash</code>. Mas digamos que você queira abrir o <code>nano</code>, abra-o. Agora você quer continuar no nano, mas precisa voltar para a outra janela…o que faz?</p>\n<p>Pressione <code>prefix + NUMERO_DA_JANELA</code>, no caso, <code>prefix + 0</code>. Você já está na outra janela. O número é exatamente o mesmo que está na barra inferior =)</p>\n<p>Mas agora, você precisa renomear as janelas, afinal, o título não é muito descritivo…pressione <code>prefix + ,</code> em seguida apague o título atual e escreva o que quiser, depois aperte <code>Enter</code>.</p>\n<p>Sua janela tem um novo nome =D</p>\n<p>E se você quiser fechar essa janela, use o bom e velho <code>exit</code>.</p>\n<blockquote><p>Se você apertar <code>prefix + :</code> e digitar <code>kill-window</code>, ele fecha sua janela atual. Cuidado que você pode perder algo se não salvar antes.</p>\n</blockquote>\n<h1 id=\"Pronto\"><a href=\"#Pronto\" class=\"headerlink\" title=\"Pronto!\"></a>Pronto!</h1><p>Agora você já sabe como instalar o tmux, brincar com painéis, criar, renomear, fechar e mover entre janelas.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Janelas-paineis-e-terminais\"><a href=\"#Janelas-paineis-e-terminais\" class=\"headerlink\" title=\"Janelas, painéis e terminais\"></a>Janelas, painéis e terminais</h1><p>Eu escrevi <a href=\"https://hernands.com/o-incrivel-mundo-do-tmux/\" target=\"_blank\" rel=\"noopener\">outro artigo</a> introduzindo ao tmux, aconselho você a ler antes de continuar caso não conheça o tmux.</p>\n<p>Painéis no tmux são apenas divisões na mesma tela. Você consegue navegar entre elas. É algo bem útil para, por exemplo, editar um arquivo enquanto executa testes em outro painel e acompanha a saída de um log.</p>\n<p>Janelas são uma abstração superior: você tem várias janelas dentro do tmux, cada uma com seu próprio layout de painéis, scripts e ambiente.</p>\n<p>No começo eu usava no máximo três painéis e duas janelas. Uma com o trabalho e outra com o <code>weechat</code>. Depois de um tempo, aprendi a usar mais e mais, atualmente estou usando cerca de 4 ~ 5 janelas no tmux.</p>\n<h2 id=\"Abrindo-uma-nova-janela\"><a href=\"#Abrindo-uma-nova-janela\" class=\"headerlink\" title=\"Abrindo uma nova janela\"></a>Abrindo uma nova janela</h2><p>Bom, assim que você abre o tmux, você já está numa janela. Todas as janelas são numeradas e tem títulos, por padrão, é o comando que você está executando agora.</p>\n<p>Se você se atentar a barra inferior do tmux, vai perceber que tem o nome da sua sessão e logo em seguida, o <code>número-da-janela:título</code>, como aqui tenho o <code>0:bash</code>, <code>1:tt</code>, <code>2:app</code>, <code>3:laradock</code>, <code>4:wr</code>. São, respectivamente, coisas do trabalho(vim, API rodando e outro painel com git e etc), <a href=\"https://github.com/orakaro/rainbowstream\" target=\"_blank\" rel=\"noopener\">client do Twitter</a>, front-end da empresa, essa do laradock eu uso pra controlar o docker e executar algumas coisas com sudo(talvez seja uma má prática, mas já fica logado como root) e por último, outro vim aberto com algo do <a href=\"https://github.com/backend-br/\" target=\"_blank\" rel=\"noopener\">BackEndBrasil</a> ou um artigo que esteja escrevendo.</p>\n<p><img src=\"current-tmux-windows.jpg\" alt=\"\"></p>\n<p>Para começar, abra o tmux, abra dois ou mais painéis. Depois, pressione <code>prefix + c</code>, perceba que agora seus painéis sumiram, é como se você tivesse aberto o tmux agora, certo?</p>\n<p>Olhe para baixo, na barra inferior, você tem sua nova janela aberta, provavelmente está escrito <code>1:bash</code>. Mas digamos que você queira abrir o <code>nano</code>, abra-o. Agora você quer continuar no nano, mas precisa voltar para a outra janela…o que faz?</p>\n<p>Pressione <code>prefix + NUMERO_DA_JANELA</code>, no caso, <code>prefix + 0</code>. Você já está na outra janela. O número é exatamente o mesmo que está na barra inferior =)</p>\n<p>Mas agora, você precisa renomear as janelas, afinal, o título não é muito descritivo…pressione <code>prefix + ,</code> em seguida apague o título atual e escreva o que quiser, depois aperte <code>Enter</code>.</p>\n<p>Sua janela tem um novo nome =D</p>\n<p>E se você quiser fechar essa janela, use o bom e velho <code>exit</code>.</p>\n<blockquote><p>Se você apertar <code>prefix + :</code> e digitar <code>kill-window</code>, ele fecha sua janela atual. Cuidado que você pode perder algo se não salvar antes.</p>\n</blockquote>\n<h1 id=\"Pronto\"><a href=\"#Pronto\" class=\"headerlink\" title=\"Pronto!\"></a>Pronto!</h1><p>Agora você já sabe como instalar o tmux, brincar com painéis, criar, renomear, fechar e mover entre janelas.</p>\n"},{"title":"Terminais são legais v1: lendo e filtrando arquivos","date":"2018-06-05T19:13:50.000Z","description":"Ler e filtrar as coisas no terminal é bem simples e divertido com cat, less, tail, grep e mais!","thumbnail":"filters-espresso-machine-filter-coffee.jpg","_content":"\n![](filters-espresso-machine-filter-coffee.jpg)\n\n# Lendo e filtrando arquivos\n\n[No artigo anterior](https://hernands.com/terminais-sao-legais-como-comecar-a-usar/), falei um pouco sobre começar a usar o terminal, e hoje vamos brincar um pouco com leitura e filtragem de arquivos.\n\nOs comandos que veremos hoje são:\n\n- `cat`\n- `less`\n- `tail`\n- `grep`, `egrep`, `fgrep`\n- `history`\n\n## Lendo arquivos com `cat`, `less`, `tail`\n\n### `cat`\n\nNão, você não exibe um gato na tela(poderia..). Com `cat` você basicamente lê *todo* o conteúdo de um arquivo(ou mais) na tela.\n\nVamos começar criando um arquivo, preenchê-lo com um texto qualquer e ler seu conteúdo. Execute: `echo \"SEU NOME\" > teste.txt`. Depois, use o `cat` para ler o conteúdo do arquivo: `cat teste.txt`.\n\nComo disse, o `cat` simplesmente lê *todo* o conteúdo do arquivo, lembre-se que é *todo o conteúdo*, você irá entender melhor depois.\n\n`cat` aceita o nome de um arquivo, ou mais, ele irá concatená-los, ou seja, juntá-los na exibição.\n\n### `less`\n\nComo você já tem o arquivo `teste.txt` criado, vamos direto para a prática: execute `less teste.txt`. Percebeu que apareceu o conteúdo do arquivo, porém algo parecido com `(END)` no final? É porque o arquivo contém pouco conteúdo, para sair pressione `q`.\n\nVamos testar com algo maior. Abra [http://mussumipsum.com/](http://mussumipsum.com/) e gere um texto com 150 parágrafos, abra o arquivo `teste.txt` no seu editor e insira o texto lá, salve e feche.\n\n{% blockquote %}\nVocê pode \"limpar\" seu terminal, removendo tudo que já fez: pode executar o comando `clear`, ou usar o atalho `CTRL + l`\n{% endblockquote %}\n\nBom, se o texto for grande o suficiente, você verá que o `less` está de fato exibindo o conteúdo do arquivo, porém não é tudo. Aqui você pode navegar usando as setas para cima/baixo, e se precisar sair, pressione `q`.\n\nSe quiser pesquisar dentro do `less`, você pode apenas pressionar `/` e em seguida digitar a palavra(a pesquisa será para frente), ou fazer o mesmo com `?` para trás. Se usar o `&`, irá apenas exibir as linhas que combinaram\n\n`less` é um comando bem complexo com várias coisas legais e logo irei escrever um artigo apenas sobre ele, mas por agora acredito que você aprendeu bastante hehe.\n\n### `tail`\n\nEsse comando é parecido com o `cat`, com a exceção de que ele fica *escutando* o arquivo, então caso outro programa altere seu conteúdo, você saberá. Ele tenta ler o arquivo novamente a cada 1 segundo. Para brincar um pouco melhor com isso, eu sugiro abrir dois terminais lado a lado.\n\nExecute `tail -F teste.txt` e no outro terminal - navegue até a mesma pasta, caso não esteja - execute `echo TESTE >> teste.txt`. Verá que no primeiro terminal, o que você executou, apareceu, isto porque `tail` tem a capacidade de acompanhar o conteúdo de um arquivo.\n\nEsse comando é ótimo para ficar assistindo arquivos de log de um servidor, por exemplo.\n\nCom o `tail`, você pode passar o parâmetro `-f`, que ele irá \"seguir\" o arquivo(tradução literal da documentação), e se usar `-F`, ele irá fazer o mesmo, porém caso falhe na leitura, tentará novamente. Para sair, pressione `CTRL + c`.\n\nE bom, se você não passar nenhum parâmetro, ele funcionará como o `cat`.\n\nVocê também pode passar mais de um arquivo, no caso ele irá exibir o nome do arquivo seguido pelo resultado.\n\nPor padrão, ele lê apenas 10 linhas, mas você pode alterar isso usando o parâmetro `-n` seguido pela quantidade, ou `--line=10`.\n\nDependendo de quem está alterando o arquivo, pode ocorrer um erro na leitura, então o `tail` não irá funcionar. Você pode passar o paràmetro `--retry` para tentar novamente em caso de erro.\n\n## Filtrando com `grep`, `egrep` e `fgrep`\n\nSó para esclarecer, `egrep` é só um atalho para `grep -E`, assim como `fgrep` para `grep -F`.\n\nComo dito no artigo anterior, `grep` serve para basicamente filtrar resultados...só que não, você pode também pesquisar dentro de arquivos. =]\n\nPor exemplo: `grep mussum teste.txt` vai te dar todas as linhas que contém \"mussum\" dentro de `teste.txt`.\n\nQuer executar alguma `RegEx`? Use `-E`. Como em `grep -e ^mussum teste.txt`. Mas você também pode passar uma frase, como em `grep -E \"mussum lorem\" teste.txt`.\n\nMas e se você está pesquisando dentro de algum arquivo de programação e realmente quer encontrar uma `RegEx` em si, ao invés de executá-la? Use `-F` ao invés de `-E`.\n\nPercebeu que com `grep` você decide *o que quer que apareça*, mas e se eu quiser o contrário, que por exemplo, linhas que contenham *mussum* não apareçam? É só passar o parâmetro `-v` no começo, ele vai `reverter` o processo.\n\nOk, mas eu quero pesquisar em *todos* os arquivos na pasta atual, dentro de um projeto por exemplo, você só precisa colocar o parâmetro `-r` e não passar o nome do arquivo.\n\nMais outro caso, e se eu quiser pegar *apenas o trecho que combina com a minha busca*, ao invés da linha inteira? Use o parâmetro `-o`.\n\nO `grep` e seus similares ignoram arquivos binários por padrão, caso queria realmente ver um binário com `grep`, use o parâmetro `-a`\n\nE por último, e se eu quiser realizar vários filtros? Digo, filtrar várias palavras diferentes, por exemplo? É só concatenar tudo usando _piping_! Se liga: `cat teste.txt | grep mussum | grep -o mussum`. Assim você pode aplicar quantos `grep`s você quiser, sem problemas!\n\n## Bônus: `history`.\n\nEle simplesmente te dá o histórico do seu terminal. Veja por si mesmo: `history`. Legal, não? É muito útil quando você precisa pesquisar uma série de comandos, ou está executando várias coisas e gostaria de se lembrar depois.\n\nCaso queira pesquisar por algum comando e se lembra apenas de parte dele, pode pressionar `CTRL + r` e digitar um trecho do comando, o terminal vai pesquisar pra você dentro do histório e mostrar o que mais se encaixa, se você ver que está próximo do que tinha executado, pode parar de escrever e navegar com as setas =]\n\nSe você ficou interessado por algum comando ou quer saber mais sobre ele, pode sempre passar o parâmetro `--help`, quase todos os comandos aceitam isso e exibem uma documentação sobre o comando, indicando como você pode usá-lo. Exemplos: `cat --help`, `less --help`, `grep --help`\n\n# Até a próxima!\n\nPor agora é isso, logo farei outros artigos sobre mais comandos do Linux, sistema de arquivos, permissões e etc.\n","source":"_posts/Terminais-sao-legais-v1-lendo-e-filtrando-arquivos.md","raw":"---\ntitle: 'Terminais são legais v1: lendo e filtrando arquivos'\ndate: 2018-06-05 16:13:50\ndescription: 'Ler e filtrar as coisas no terminal é bem simples e divertido com cat, less, tail, grep e mais!'\nthumbnail: 'filters-espresso-machine-filter-coffee.jpg'\ntags:\n---\n\n![](filters-espresso-machine-filter-coffee.jpg)\n\n# Lendo e filtrando arquivos\n\n[No artigo anterior](https://hernands.com/terminais-sao-legais-como-comecar-a-usar/), falei um pouco sobre começar a usar o terminal, e hoje vamos brincar um pouco com leitura e filtragem de arquivos.\n\nOs comandos que veremos hoje são:\n\n- `cat`\n- `less`\n- `tail`\n- `grep`, `egrep`, `fgrep`\n- `history`\n\n## Lendo arquivos com `cat`, `less`, `tail`\n\n### `cat`\n\nNão, você não exibe um gato na tela(poderia..). Com `cat` você basicamente lê *todo* o conteúdo de um arquivo(ou mais) na tela.\n\nVamos começar criando um arquivo, preenchê-lo com um texto qualquer e ler seu conteúdo. Execute: `echo \"SEU NOME\" > teste.txt`. Depois, use o `cat` para ler o conteúdo do arquivo: `cat teste.txt`.\n\nComo disse, o `cat` simplesmente lê *todo* o conteúdo do arquivo, lembre-se que é *todo o conteúdo*, você irá entender melhor depois.\n\n`cat` aceita o nome de um arquivo, ou mais, ele irá concatená-los, ou seja, juntá-los na exibição.\n\n### `less`\n\nComo você já tem o arquivo `teste.txt` criado, vamos direto para a prática: execute `less teste.txt`. Percebeu que apareceu o conteúdo do arquivo, porém algo parecido com `(END)` no final? É porque o arquivo contém pouco conteúdo, para sair pressione `q`.\n\nVamos testar com algo maior. Abra [http://mussumipsum.com/](http://mussumipsum.com/) e gere um texto com 150 parágrafos, abra o arquivo `teste.txt` no seu editor e insira o texto lá, salve e feche.\n\n{% blockquote %}\nVocê pode \"limpar\" seu terminal, removendo tudo que já fez: pode executar o comando `clear`, ou usar o atalho `CTRL + l`\n{% endblockquote %}\n\nBom, se o texto for grande o suficiente, você verá que o `less` está de fato exibindo o conteúdo do arquivo, porém não é tudo. Aqui você pode navegar usando as setas para cima/baixo, e se precisar sair, pressione `q`.\n\nSe quiser pesquisar dentro do `less`, você pode apenas pressionar `/` e em seguida digitar a palavra(a pesquisa será para frente), ou fazer o mesmo com `?` para trás. Se usar o `&`, irá apenas exibir as linhas que combinaram\n\n`less` é um comando bem complexo com várias coisas legais e logo irei escrever um artigo apenas sobre ele, mas por agora acredito que você aprendeu bastante hehe.\n\n### `tail`\n\nEsse comando é parecido com o `cat`, com a exceção de que ele fica *escutando* o arquivo, então caso outro programa altere seu conteúdo, você saberá. Ele tenta ler o arquivo novamente a cada 1 segundo. Para brincar um pouco melhor com isso, eu sugiro abrir dois terminais lado a lado.\n\nExecute `tail -F teste.txt` e no outro terminal - navegue até a mesma pasta, caso não esteja - execute `echo TESTE >> teste.txt`. Verá que no primeiro terminal, o que você executou, apareceu, isto porque `tail` tem a capacidade de acompanhar o conteúdo de um arquivo.\n\nEsse comando é ótimo para ficar assistindo arquivos de log de um servidor, por exemplo.\n\nCom o `tail`, você pode passar o parâmetro `-f`, que ele irá \"seguir\" o arquivo(tradução literal da documentação), e se usar `-F`, ele irá fazer o mesmo, porém caso falhe na leitura, tentará novamente. Para sair, pressione `CTRL + c`.\n\nE bom, se você não passar nenhum parâmetro, ele funcionará como o `cat`.\n\nVocê também pode passar mais de um arquivo, no caso ele irá exibir o nome do arquivo seguido pelo resultado.\n\nPor padrão, ele lê apenas 10 linhas, mas você pode alterar isso usando o parâmetro `-n` seguido pela quantidade, ou `--line=10`.\n\nDependendo de quem está alterando o arquivo, pode ocorrer um erro na leitura, então o `tail` não irá funcionar. Você pode passar o paràmetro `--retry` para tentar novamente em caso de erro.\n\n## Filtrando com `grep`, `egrep` e `fgrep`\n\nSó para esclarecer, `egrep` é só um atalho para `grep -E`, assim como `fgrep` para `grep -F`.\n\nComo dito no artigo anterior, `grep` serve para basicamente filtrar resultados...só que não, você pode também pesquisar dentro de arquivos. =]\n\nPor exemplo: `grep mussum teste.txt` vai te dar todas as linhas que contém \"mussum\" dentro de `teste.txt`.\n\nQuer executar alguma `RegEx`? Use `-E`. Como em `grep -e ^mussum teste.txt`. Mas você também pode passar uma frase, como em `grep -E \"mussum lorem\" teste.txt`.\n\nMas e se você está pesquisando dentro de algum arquivo de programação e realmente quer encontrar uma `RegEx` em si, ao invés de executá-la? Use `-F` ao invés de `-E`.\n\nPercebeu que com `grep` você decide *o que quer que apareça*, mas e se eu quiser o contrário, que por exemplo, linhas que contenham *mussum* não apareçam? É só passar o parâmetro `-v` no começo, ele vai `reverter` o processo.\n\nOk, mas eu quero pesquisar em *todos* os arquivos na pasta atual, dentro de um projeto por exemplo, você só precisa colocar o parâmetro `-r` e não passar o nome do arquivo.\n\nMais outro caso, e se eu quiser pegar *apenas o trecho que combina com a minha busca*, ao invés da linha inteira? Use o parâmetro `-o`.\n\nO `grep` e seus similares ignoram arquivos binários por padrão, caso queria realmente ver um binário com `grep`, use o parâmetro `-a`\n\nE por último, e se eu quiser realizar vários filtros? Digo, filtrar várias palavras diferentes, por exemplo? É só concatenar tudo usando _piping_! Se liga: `cat teste.txt | grep mussum | grep -o mussum`. Assim você pode aplicar quantos `grep`s você quiser, sem problemas!\n\n## Bônus: `history`.\n\nEle simplesmente te dá o histórico do seu terminal. Veja por si mesmo: `history`. Legal, não? É muito útil quando você precisa pesquisar uma série de comandos, ou está executando várias coisas e gostaria de se lembrar depois.\n\nCaso queira pesquisar por algum comando e se lembra apenas de parte dele, pode pressionar `CTRL + r` e digitar um trecho do comando, o terminal vai pesquisar pra você dentro do histório e mostrar o que mais se encaixa, se você ver que está próximo do que tinha executado, pode parar de escrever e navegar com as setas =]\n\nSe você ficou interessado por algum comando ou quer saber mais sobre ele, pode sempre passar o parâmetro `--help`, quase todos os comandos aceitam isso e exibem uma documentação sobre o comando, indicando como você pode usá-lo. Exemplos: `cat --help`, `less --help`, `grep --help`\n\n# Até a próxima!\n\nPor agora é isso, logo farei outros artigos sobre mais comandos do Linux, sistema de arquivos, permissões e etc.\n","slug":"Terminais-sao-legais-v1-lendo-e-filtrando-arquivos","published":1,"updated":"2018-06-09T23:44:31.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmf456wn00024grpfv9xi2ka","content":"<p><img src=\"filters-espresso-machine-filter-coffee.jpg\" alt=\"\"></p>\n<h1 id=\"Lendo-e-filtrando-arquivos\"><a href=\"#Lendo-e-filtrando-arquivos\" class=\"headerlink\" title=\"Lendo e filtrando arquivos\"></a>Lendo e filtrando arquivos</h1><p><a href=\"https://hernands.com/terminais-sao-legais-como-comecar-a-usar/\" target=\"_blank\" rel=\"noopener\">No artigo anterior</a>, falei um pouco sobre começar a usar o terminal, e hoje vamos brincar um pouco com leitura e filtragem de arquivos.</p>\n<p>Os comandos que veremos hoje são:</p>\n<ul>\n<li><code>cat</code></li>\n<li><code>less</code></li>\n<li><code>tail</code></li>\n<li><code>grep</code>, <code>egrep</code>, <code>fgrep</code></li>\n<li><code>history</code></li>\n</ul>\n<h2 id=\"Lendo-arquivos-com-cat-less-tail\"><a href=\"#Lendo-arquivos-com-cat-less-tail\" class=\"headerlink\" title=\"Lendo arquivos com cat, less, tail\"></a>Lendo arquivos com <code>cat</code>, <code>less</code>, <code>tail</code></h2><h3 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a><code>cat</code></h3><p>Não, você não exibe um gato na tela(poderia..). Com <code>cat</code> você basicamente lê <em>todo</em> o conteúdo de um arquivo(ou mais) na tela.</p>\n<p>Vamos começar criando um arquivo, preenchê-lo com um texto qualquer e ler seu conteúdo. Execute: <code>echo &quot;SEU NOME&quot; &gt; teste.txt</code>. Depois, use o <code>cat</code> para ler o conteúdo do arquivo: <code>cat teste.txt</code>.</p>\n<p>Como disse, o <code>cat</code> simplesmente lê <em>todo</em> o conteúdo do arquivo, lembre-se que é <em>todo o conteúdo</em>, você irá entender melhor depois.</p>\n<p><code>cat</code> aceita o nome de um arquivo, ou mais, ele irá concatená-los, ou seja, juntá-los na exibição.</p>\n<h3 id=\"less\"><a href=\"#less\" class=\"headerlink\" title=\"less\"></a><code>less</code></h3><p>Como você já tem o arquivo <code>teste.txt</code> criado, vamos direto para a prática: execute <code>less teste.txt</code>. Percebeu que apareceu o conteúdo do arquivo, porém algo parecido com <code>(END)</code> no final? É porque o arquivo contém pouco conteúdo, para sair pressione <code>q</code>.</p>\n<p>Vamos testar com algo maior. Abra <a href=\"http://mussumipsum.com/\" target=\"_blank\" rel=\"noopener\">http://mussumipsum.com/</a> e gere um texto com 150 parágrafos, abra o arquivo <code>teste.txt</code> no seu editor e insira o texto lá, salve e feche.</p>\n<blockquote><p>Você pode “limpar” seu terminal, removendo tudo que já fez: pode executar o comando <code>clear</code>, ou usar o atalho <code>CTRL + l</code></p>\n</blockquote>\n<p>Bom, se o texto for grande o suficiente, você verá que o <code>less</code> está de fato exibindo o conteúdo do arquivo, porém não é tudo. Aqui você pode navegar usando as setas para cima/baixo, e se precisar sair, pressione <code>q</code>.</p>\n<p>Se quiser pesquisar dentro do <code>less</code>, você pode apenas pressionar <code>/</code> e em seguida digitar a palavra(a pesquisa será para frente), ou fazer o mesmo com <code>?</code> para trás. Se usar o <code>&amp;</code>, irá apenas exibir as linhas que combinaram</p>\n<p><code>less</code> é um comando bem complexo com várias coisas legais e logo irei escrever um artigo apenas sobre ele, mas por agora acredito que você aprendeu bastante hehe.</p>\n<h3 id=\"tail\"><a href=\"#tail\" class=\"headerlink\" title=\"tail\"></a><code>tail</code></h3><p>Esse comando é parecido com o <code>cat</code>, com a exceção de que ele fica <em>escutando</em> o arquivo, então caso outro programa altere seu conteúdo, você saberá. Ele tenta ler o arquivo novamente a cada 1 segundo. Para brincar um pouco melhor com isso, eu sugiro abrir dois terminais lado a lado.</p>\n<p>Execute <code>tail -F teste.txt</code> e no outro terminal - navegue até a mesma pasta, caso não esteja - execute <code>echo TESTE &gt;&gt; teste.txt</code>. Verá que no primeiro terminal, o que você executou, apareceu, isto porque <code>tail</code> tem a capacidade de acompanhar o conteúdo de um arquivo.</p>\n<p>Esse comando é ótimo para ficar assistindo arquivos de log de um servidor, por exemplo.</p>\n<p>Com o <code>tail</code>, você pode passar o parâmetro <code>-f</code>, que ele irá “seguir” o arquivo(tradução literal da documentação), e se usar <code>-F</code>, ele irá fazer o mesmo, porém caso falhe na leitura, tentará novamente. Para sair, pressione <code>CTRL + c</code>.</p>\n<p>E bom, se você não passar nenhum parâmetro, ele funcionará como o <code>cat</code>.</p>\n<p>Você também pode passar mais de um arquivo, no caso ele irá exibir o nome do arquivo seguido pelo resultado.</p>\n<p>Por padrão, ele lê apenas 10 linhas, mas você pode alterar isso usando o parâmetro <code>-n</code> seguido pela quantidade, ou <code>--line=10</code>.</p>\n<p>Dependendo de quem está alterando o arquivo, pode ocorrer um erro na leitura, então o <code>tail</code> não irá funcionar. Você pode passar o paràmetro <code>--retry</code> para tentar novamente em caso de erro.</p>\n<h2 id=\"Filtrando-com-grep-egrep-e-fgrep\"><a href=\"#Filtrando-com-grep-egrep-e-fgrep\" class=\"headerlink\" title=\"Filtrando com grep, egrep e fgrep\"></a>Filtrando com <code>grep</code>, <code>egrep</code> e <code>fgrep</code></h2><p>Só para esclarecer, <code>egrep</code> é só um atalho para <code>grep -E</code>, assim como <code>fgrep</code> para <code>grep -F</code>.</p>\n<p>Como dito no artigo anterior, <code>grep</code> serve para basicamente filtrar resultados…só que não, você pode também pesquisar dentro de arquivos. =]</p>\n<p>Por exemplo: <code>grep mussum teste.txt</code> vai te dar todas as linhas que contém “mussum” dentro de <code>teste.txt</code>.</p>\n<p>Quer executar alguma <code>RegEx</code>? Use <code>-E</code>. Como em <code>grep -e ^mussum teste.txt</code>. Mas você também pode passar uma frase, como em <code>grep -E &quot;mussum lorem&quot; teste.txt</code>.</p>\n<p>Mas e se você está pesquisando dentro de algum arquivo de programação e realmente quer encontrar uma <code>RegEx</code> em si, ao invés de executá-la? Use <code>-F</code> ao invés de <code>-E</code>.</p>\n<p>Percebeu que com <code>grep</code> você decide <em>o que quer que apareça</em>, mas e se eu quiser o contrário, que por exemplo, linhas que contenham <em>mussum</em> não apareçam? É só passar o parâmetro <code>-v</code> no começo, ele vai <code>reverter</code> o processo.</p>\n<p>Ok, mas eu quero pesquisar em <em>todos</em> os arquivos na pasta atual, dentro de um projeto por exemplo, você só precisa colocar o parâmetro <code>-r</code> e não passar o nome do arquivo.</p>\n<p>Mais outro caso, e se eu quiser pegar <em>apenas o trecho que combina com a minha busca</em>, ao invés da linha inteira? Use o parâmetro <code>-o</code>.</p>\n<p>O <code>grep</code> e seus similares ignoram arquivos binários por padrão, caso queria realmente ver um binário com <code>grep</code>, use o parâmetro <code>-a</code></p>\n<p>E por último, e se eu quiser realizar vários filtros? Digo, filtrar várias palavras diferentes, por exemplo? É só concatenar tudo usando <em>piping</em>! Se liga: <code>cat teste.txt | grep mussum | grep -o mussum</code>. Assim você pode aplicar quantos <code>grep</code>s você quiser, sem problemas!</p>\n<h2 id=\"Bonus-history\"><a href=\"#Bonus-history\" class=\"headerlink\" title=\"Bônus: history.\"></a>Bônus: <code>history</code>.</h2><p>Ele simplesmente te dá o histórico do seu terminal. Veja por si mesmo: <code>history</code>. Legal, não? É muito útil quando você precisa pesquisar uma série de comandos, ou está executando várias coisas e gostaria de se lembrar depois.</p>\n<p>Caso queira pesquisar por algum comando e se lembra apenas de parte dele, pode pressionar <code>CTRL + r</code> e digitar um trecho do comando, o terminal vai pesquisar pra você dentro do histório e mostrar o que mais se encaixa, se você ver que está próximo do que tinha executado, pode parar de escrever e navegar com as setas =]</p>\n<p>Se você ficou interessado por algum comando ou quer saber mais sobre ele, pode sempre passar o parâmetro <code>--help</code>, quase todos os comandos aceitam isso e exibem uma documentação sobre o comando, indicando como você pode usá-lo. Exemplos: <code>cat --help</code>, <code>less --help</code>, <code>grep --help</code></p>\n<h1 id=\"Ate-a-proxima\"><a href=\"#Ate-a-proxima\" class=\"headerlink\" title=\"Até a próxima!\"></a>Até a próxima!</h1><p>Por agora é isso, logo farei outros artigos sobre mais comandos do Linux, sistema de arquivos, permissões e etc.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"filters-espresso-machine-filter-coffee.jpg\" alt=\"\"></p>\n<h1 id=\"Lendo-e-filtrando-arquivos\"><a href=\"#Lendo-e-filtrando-arquivos\" class=\"headerlink\" title=\"Lendo e filtrando arquivos\"></a>Lendo e filtrando arquivos</h1><p><a href=\"https://hernands.com/terminais-sao-legais-como-comecar-a-usar/\" target=\"_blank\" rel=\"noopener\">No artigo anterior</a>, falei um pouco sobre começar a usar o terminal, e hoje vamos brincar um pouco com leitura e filtragem de arquivos.</p>\n<p>Os comandos que veremos hoje são:</p>\n<ul>\n<li><code>cat</code></li>\n<li><code>less</code></li>\n<li><code>tail</code></li>\n<li><code>grep</code>, <code>egrep</code>, <code>fgrep</code></li>\n<li><code>history</code></li>\n</ul>\n<h2 id=\"Lendo-arquivos-com-cat-less-tail\"><a href=\"#Lendo-arquivos-com-cat-less-tail\" class=\"headerlink\" title=\"Lendo arquivos com cat, less, tail\"></a>Lendo arquivos com <code>cat</code>, <code>less</code>, <code>tail</code></h2><h3 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a><code>cat</code></h3><p>Não, você não exibe um gato na tela(poderia..). Com <code>cat</code> você basicamente lê <em>todo</em> o conteúdo de um arquivo(ou mais) na tela.</p>\n<p>Vamos começar criando um arquivo, preenchê-lo com um texto qualquer e ler seu conteúdo. Execute: <code>echo &quot;SEU NOME&quot; &gt; teste.txt</code>. Depois, use o <code>cat</code> para ler o conteúdo do arquivo: <code>cat teste.txt</code>.</p>\n<p>Como disse, o <code>cat</code> simplesmente lê <em>todo</em> o conteúdo do arquivo, lembre-se que é <em>todo o conteúdo</em>, você irá entender melhor depois.</p>\n<p><code>cat</code> aceita o nome de um arquivo, ou mais, ele irá concatená-los, ou seja, juntá-los na exibição.</p>\n<h3 id=\"less\"><a href=\"#less\" class=\"headerlink\" title=\"less\"></a><code>less</code></h3><p>Como você já tem o arquivo <code>teste.txt</code> criado, vamos direto para a prática: execute <code>less teste.txt</code>. Percebeu que apareceu o conteúdo do arquivo, porém algo parecido com <code>(END)</code> no final? É porque o arquivo contém pouco conteúdo, para sair pressione <code>q</code>.</p>\n<p>Vamos testar com algo maior. Abra <a href=\"http://mussumipsum.com/\" target=\"_blank\" rel=\"noopener\">http://mussumipsum.com/</a> e gere um texto com 150 parágrafos, abra o arquivo <code>teste.txt</code> no seu editor e insira o texto lá, salve e feche.</p>\n<blockquote><p>Você pode “limpar” seu terminal, removendo tudo que já fez: pode executar o comando <code>clear</code>, ou usar o atalho <code>CTRL + l</code></p>\n</blockquote>\n<p>Bom, se o texto for grande o suficiente, você verá que o <code>less</code> está de fato exibindo o conteúdo do arquivo, porém não é tudo. Aqui você pode navegar usando as setas para cima/baixo, e se precisar sair, pressione <code>q</code>.</p>\n<p>Se quiser pesquisar dentro do <code>less</code>, você pode apenas pressionar <code>/</code> e em seguida digitar a palavra(a pesquisa será para frente), ou fazer o mesmo com <code>?</code> para trás. Se usar o <code>&amp;</code>, irá apenas exibir as linhas que combinaram</p>\n<p><code>less</code> é um comando bem complexo com várias coisas legais e logo irei escrever um artigo apenas sobre ele, mas por agora acredito que você aprendeu bastante hehe.</p>\n<h3 id=\"tail\"><a href=\"#tail\" class=\"headerlink\" title=\"tail\"></a><code>tail</code></h3><p>Esse comando é parecido com o <code>cat</code>, com a exceção de que ele fica <em>escutando</em> o arquivo, então caso outro programa altere seu conteúdo, você saberá. Ele tenta ler o arquivo novamente a cada 1 segundo. Para brincar um pouco melhor com isso, eu sugiro abrir dois terminais lado a lado.</p>\n<p>Execute <code>tail -F teste.txt</code> e no outro terminal - navegue até a mesma pasta, caso não esteja - execute <code>echo TESTE &gt;&gt; teste.txt</code>. Verá que no primeiro terminal, o que você executou, apareceu, isto porque <code>tail</code> tem a capacidade de acompanhar o conteúdo de um arquivo.</p>\n<p>Esse comando é ótimo para ficar assistindo arquivos de log de um servidor, por exemplo.</p>\n<p>Com o <code>tail</code>, você pode passar o parâmetro <code>-f</code>, que ele irá “seguir” o arquivo(tradução literal da documentação), e se usar <code>-F</code>, ele irá fazer o mesmo, porém caso falhe na leitura, tentará novamente. Para sair, pressione <code>CTRL + c</code>.</p>\n<p>E bom, se você não passar nenhum parâmetro, ele funcionará como o <code>cat</code>.</p>\n<p>Você também pode passar mais de um arquivo, no caso ele irá exibir o nome do arquivo seguido pelo resultado.</p>\n<p>Por padrão, ele lê apenas 10 linhas, mas você pode alterar isso usando o parâmetro <code>-n</code> seguido pela quantidade, ou <code>--line=10</code>.</p>\n<p>Dependendo de quem está alterando o arquivo, pode ocorrer um erro na leitura, então o <code>tail</code> não irá funcionar. Você pode passar o paràmetro <code>--retry</code> para tentar novamente em caso de erro.</p>\n<h2 id=\"Filtrando-com-grep-egrep-e-fgrep\"><a href=\"#Filtrando-com-grep-egrep-e-fgrep\" class=\"headerlink\" title=\"Filtrando com grep, egrep e fgrep\"></a>Filtrando com <code>grep</code>, <code>egrep</code> e <code>fgrep</code></h2><p>Só para esclarecer, <code>egrep</code> é só um atalho para <code>grep -E</code>, assim como <code>fgrep</code> para <code>grep -F</code>.</p>\n<p>Como dito no artigo anterior, <code>grep</code> serve para basicamente filtrar resultados…só que não, você pode também pesquisar dentro de arquivos. =]</p>\n<p>Por exemplo: <code>grep mussum teste.txt</code> vai te dar todas as linhas que contém “mussum” dentro de <code>teste.txt</code>.</p>\n<p>Quer executar alguma <code>RegEx</code>? Use <code>-E</code>. Como em <code>grep -e ^mussum teste.txt</code>. Mas você também pode passar uma frase, como em <code>grep -E &quot;mussum lorem&quot; teste.txt</code>.</p>\n<p>Mas e se você está pesquisando dentro de algum arquivo de programação e realmente quer encontrar uma <code>RegEx</code> em si, ao invés de executá-la? Use <code>-F</code> ao invés de <code>-E</code>.</p>\n<p>Percebeu que com <code>grep</code> você decide <em>o que quer que apareça</em>, mas e se eu quiser o contrário, que por exemplo, linhas que contenham <em>mussum</em> não apareçam? É só passar o parâmetro <code>-v</code> no começo, ele vai <code>reverter</code> o processo.</p>\n<p>Ok, mas eu quero pesquisar em <em>todos</em> os arquivos na pasta atual, dentro de um projeto por exemplo, você só precisa colocar o parâmetro <code>-r</code> e não passar o nome do arquivo.</p>\n<p>Mais outro caso, e se eu quiser pegar <em>apenas o trecho que combina com a minha busca</em>, ao invés da linha inteira? Use o parâmetro <code>-o</code>.</p>\n<p>O <code>grep</code> e seus similares ignoram arquivos binários por padrão, caso queria realmente ver um binário com <code>grep</code>, use o parâmetro <code>-a</code></p>\n<p>E por último, e se eu quiser realizar vários filtros? Digo, filtrar várias palavras diferentes, por exemplo? É só concatenar tudo usando <em>piping</em>! Se liga: <code>cat teste.txt | grep mussum | grep -o mussum</code>. Assim você pode aplicar quantos <code>grep</code>s você quiser, sem problemas!</p>\n<h2 id=\"Bonus-history\"><a href=\"#Bonus-history\" class=\"headerlink\" title=\"Bônus: history.\"></a>Bônus: <code>history</code>.</h2><p>Ele simplesmente te dá o histórico do seu terminal. Veja por si mesmo: <code>history</code>. Legal, não? É muito útil quando você precisa pesquisar uma série de comandos, ou está executando várias coisas e gostaria de se lembrar depois.</p>\n<p>Caso queira pesquisar por algum comando e se lembra apenas de parte dele, pode pressionar <code>CTRL + r</code> e digitar um trecho do comando, o terminal vai pesquisar pra você dentro do histório e mostrar o que mais se encaixa, se você ver que está próximo do que tinha executado, pode parar de escrever e navegar com as setas =]</p>\n<p>Se você ficou interessado por algum comando ou quer saber mais sobre ele, pode sempre passar o parâmetro <code>--help</code>, quase todos os comandos aceitam isso e exibem uma documentação sobre o comando, indicando como você pode usá-lo. Exemplos: <code>cat --help</code>, <code>less --help</code>, <code>grep --help</code></p>\n<h1 id=\"Ate-a-proxima\"><a href=\"#Ate-a-proxima\" class=\"headerlink\" title=\"Até a próxima!\"></a>Até a próxima!</h1><p>Por agora é isso, logo farei outros artigos sobre mais comandos do Linux, sistema de arquivos, permissões e etc.</p>\n"},{"title":"Terminais são legais v3.1: grupos de usuários","description":"Grupos de usuários são úteis e simples de se usar, podem te ajudar muito, principalmente com a segurança do seu sistema","thumbnail":"groups.jpg","date":"2018-06-25T17:01:36.000Z","_content":"\n\n![](groups.jpg)\n\nNos artigos anteriores, vimos um pouco sobre:\n\n- [Terminais são legais: como começar a usar ](/terminais-sao-legais-como-comecar-a-usar)\n- [Terminais são legais v1: lendo e filtrando arquivos](/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/)\n- [Terminais são legais v2: trabalhando com arquivos e pastas](/terminais-sao-legais-v2-pastas/)\n- [Terminais são legais v3.0: usuários](/terminais-sao-legais-v3-usuarios/)\n\n# Grupos de Usuários\n\nAgora vamos trabalhar com *grupos de usuários*, como o próprio nome já diz, você pode agrupar usuários e definir permissões baseadas em grupos.\n\nComandos do dia:\n\n- `groupadd`\n- `groupmod`\n- `groupdel`\n- `groups`\n- `groupmems`\n\n## Criando um grupo de usuários\n\nÉ bem simples, basta executar `sudo groupadd <nome-do-grupo`. Em seguida você vai precisar colocar a senha do grupo(sim, grupos tem senha!), assim como fez para criar um novo usuário.\n\nCaso queira listar os grupos e saber se o seu foi criado, pode olhar o arquivo `/etc/group`. \n\nPara ver os grupos atuais, pode usar o comando `groups`, você também pode executar `groups <nome-do-usuario>` para saber em quais grupos um usuário está.\n\n## Adicionando usuários ao novo grupo\n\nOk, agora temos um grupo de usuários, mas ele está vazio. Precisamos adicionar usuário a ele, certo?\n\nLembra do `usermod`? Então, aqui também usamos ele, mas dessa vez com o parâmetro `-G` ou `--groups` seguido pelo nome do nosso novo grupo. Exemplo: `sudo usermod -G <nome-do-grupo> <nome-do-usuario>`.\n\nPara verificar, use `groups <nome-do-usuario>`.\n\nCom isso, você pode gerenciar os grupos de qualquer usuário.\n\nHá também o comando `groupmems`, que serve para gerenciar os membros do grupo primário de um usuário, dizendo melhor, o grupo principal.\n\nSe você quiser adicionar seu usuário ao grupo `root`, pode executar `sudo groupmems -a <nome-do-usuario>`.\n\nO `groupmems` é bom por ser versátil e mais fácil de usar para adicionar usuários. Você pode usar o seguinte comando como exemplo para adicionar um usuário a outros grupos: `sudo groupmems -g <nome-do-grupo> -a <nome-do-usuario>`\n\n## Modificando e apagando grupos de usuários\n\nVocê pode alterar o nome do grupo com `sudo groupmod -n <novo-nome> <nome-do-grupo>`. Os parâmetros `-n` e `--new-name` são equivalentes.\n\nTambém pode alterar a senha de um grupo usando o parâmetro `-p` ou `--password` seguido da nova senha.\n\nPara apagar um grupo de usuário, pode usar o comando `groupdel`. Se o grupo que está sendo apagado é o grupo primário de um usuário, ele não será apagado, a menos que você passe o parâmetro `-f` ou `--force`. Ficaria algo como `sudo groupdel <nome-do-grupo`.\n\n### Grupos primários?\n\nAqui nós temos dois \"tipos\" de grupos, os primários e secundários. Um usuário tem um grupo primário, o principal do qual faz parte, e há grupos secundários.\n\nNão há grande diferença além do que, quando conectar via login, ou SSH/TTY/etc, o grupo primário é o que aparecerá.\n\n# Até a próxima!\n\nLogo veremos sobre permissões, uma das partes cruciais de sistemas operacionais.\n\n","source":"_posts/Terminais-sao-legais-v3-1-grupos-de-usuarios.md","raw":"---\ntitle: 'Terminais são legais v3.1: grupos de usuários'\ndescription: >-\n  Grupos de usuários são úteis e simples de se usar, podem te ajudar muito,\n  principalmente com a segurança do seu sistema\nthumbnail: groups.jpg\ndate: 2018-06-25 14:01:36\ntags:\n---\n\n\n![](groups.jpg)\n\nNos artigos anteriores, vimos um pouco sobre:\n\n- [Terminais são legais: como começar a usar ](/terminais-sao-legais-como-comecar-a-usar)\n- [Terminais são legais v1: lendo e filtrando arquivos](/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/)\n- [Terminais são legais v2: trabalhando com arquivos e pastas](/terminais-sao-legais-v2-pastas/)\n- [Terminais são legais v3.0: usuários](/terminais-sao-legais-v3-usuarios/)\n\n# Grupos de Usuários\n\nAgora vamos trabalhar com *grupos de usuários*, como o próprio nome já diz, você pode agrupar usuários e definir permissões baseadas em grupos.\n\nComandos do dia:\n\n- `groupadd`\n- `groupmod`\n- `groupdel`\n- `groups`\n- `groupmems`\n\n## Criando um grupo de usuários\n\nÉ bem simples, basta executar `sudo groupadd <nome-do-grupo`. Em seguida você vai precisar colocar a senha do grupo(sim, grupos tem senha!), assim como fez para criar um novo usuário.\n\nCaso queira listar os grupos e saber se o seu foi criado, pode olhar o arquivo `/etc/group`. \n\nPara ver os grupos atuais, pode usar o comando `groups`, você também pode executar `groups <nome-do-usuario>` para saber em quais grupos um usuário está.\n\n## Adicionando usuários ao novo grupo\n\nOk, agora temos um grupo de usuários, mas ele está vazio. Precisamos adicionar usuário a ele, certo?\n\nLembra do `usermod`? Então, aqui também usamos ele, mas dessa vez com o parâmetro `-G` ou `--groups` seguido pelo nome do nosso novo grupo. Exemplo: `sudo usermod -G <nome-do-grupo> <nome-do-usuario>`.\n\nPara verificar, use `groups <nome-do-usuario>`.\n\nCom isso, você pode gerenciar os grupos de qualquer usuário.\n\nHá também o comando `groupmems`, que serve para gerenciar os membros do grupo primário de um usuário, dizendo melhor, o grupo principal.\n\nSe você quiser adicionar seu usuário ao grupo `root`, pode executar `sudo groupmems -a <nome-do-usuario>`.\n\nO `groupmems` é bom por ser versátil e mais fácil de usar para adicionar usuários. Você pode usar o seguinte comando como exemplo para adicionar um usuário a outros grupos: `sudo groupmems -g <nome-do-grupo> -a <nome-do-usuario>`\n\n## Modificando e apagando grupos de usuários\n\nVocê pode alterar o nome do grupo com `sudo groupmod -n <novo-nome> <nome-do-grupo>`. Os parâmetros `-n` e `--new-name` são equivalentes.\n\nTambém pode alterar a senha de um grupo usando o parâmetro `-p` ou `--password` seguido da nova senha.\n\nPara apagar um grupo de usuário, pode usar o comando `groupdel`. Se o grupo que está sendo apagado é o grupo primário de um usuário, ele não será apagado, a menos que você passe o parâmetro `-f` ou `--force`. Ficaria algo como `sudo groupdel <nome-do-grupo`.\n\n### Grupos primários?\n\nAqui nós temos dois \"tipos\" de grupos, os primários e secundários. Um usuário tem um grupo primário, o principal do qual faz parte, e há grupos secundários.\n\nNão há grande diferença além do que, quando conectar via login, ou SSH/TTY/etc, o grupo primário é o que aparecerá.\n\n# Até a próxima!\n\nLogo veremos sobre permissões, uma das partes cruciais de sistemas operacionais.\n\n","slug":"Terminais-sao-legais-v3-1-grupos-de-usuarios","published":1,"updated":"2018-06-30T19:33:37.872Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmf456wo00034grpg7tr6ti4","content":"<p><img src=\"groups.jpg\" alt=\"\"></p>\n<p>Nos artigos anteriores, vimos um pouco sobre:</p>\n<ul>\n<li><a href=\"/terminais-sao-legais-como-comecar-a-usar\">Terminais são legais: como começar a usar </a></li>\n<li><a href=\"/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/\">Terminais são legais v1: lendo e filtrando arquivos</a></li>\n<li><a href=\"/terminais-sao-legais-v2-pastas/\">Terminais são legais v2: trabalhando com arquivos e pastas</a></li>\n<li><a href=\"/terminais-sao-legais-v3-usuarios/\">Terminais são legais v3.0: usuários</a></li>\n</ul>\n<h1 id=\"Grupos-de-Usuarios\"><a href=\"#Grupos-de-Usuarios\" class=\"headerlink\" title=\"Grupos de Usuários\"></a>Grupos de Usuários</h1><p>Agora vamos trabalhar com <em>grupos de usuários</em>, como o próprio nome já diz, você pode agrupar usuários e definir permissões baseadas em grupos.</p>\n<p>Comandos do dia:</p>\n<ul>\n<li><code>groupadd</code></li>\n<li><code>groupmod</code></li>\n<li><code>groupdel</code></li>\n<li><code>groups</code></li>\n<li><code>groupmems</code></li>\n</ul>\n<h2 id=\"Criando-um-grupo-de-usuarios\"><a href=\"#Criando-um-grupo-de-usuarios\" class=\"headerlink\" title=\"Criando um grupo de usuários\"></a>Criando um grupo de usuários</h2><p>É bem simples, basta executar <code>sudo groupadd &lt;nome-do-grupo</code>. Em seguida você vai precisar colocar a senha do grupo(sim, grupos tem senha!), assim como fez para criar um novo usuário.</p>\n<p>Caso queira listar os grupos e saber se o seu foi criado, pode olhar o arquivo <code>/etc/group</code>. </p>\n<p>Para ver os grupos atuais, pode usar o comando <code>groups</code>, você também pode executar <code>groups &lt;nome-do-usuario&gt;</code> para saber em quais grupos um usuário está.</p>\n<h2 id=\"Adicionando-usuarios-ao-novo-grupo\"><a href=\"#Adicionando-usuarios-ao-novo-grupo\" class=\"headerlink\" title=\"Adicionando usuários ao novo grupo\"></a>Adicionando usuários ao novo grupo</h2><p>Ok, agora temos um grupo de usuários, mas ele está vazio. Precisamos adicionar usuário a ele, certo?</p>\n<p>Lembra do <code>usermod</code>? Então, aqui também usamos ele, mas dessa vez com o parâmetro <code>-G</code> ou <code>--groups</code> seguido pelo nome do nosso novo grupo. Exemplo: <code>sudo usermod -G &lt;nome-do-grupo&gt; &lt;nome-do-usuario&gt;</code>.</p>\n<p>Para verificar, use <code>groups &lt;nome-do-usuario&gt;</code>.</p>\n<p>Com isso, você pode gerenciar os grupos de qualquer usuário.</p>\n<p>Há também o comando <code>groupmems</code>, que serve para gerenciar os membros do grupo primário de um usuário, dizendo melhor, o grupo principal.</p>\n<p>Se você quiser adicionar seu usuário ao grupo <code>root</code>, pode executar <code>sudo groupmems -a &lt;nome-do-usuario&gt;</code>.</p>\n<p>O <code>groupmems</code> é bom por ser versátil e mais fácil de usar para adicionar usuários. Você pode usar o seguinte comando como exemplo para adicionar um usuário a outros grupos: <code>sudo groupmems -g &lt;nome-do-grupo&gt; -a &lt;nome-do-usuario&gt;</code></p>\n<h2 id=\"Modificando-e-apagando-grupos-de-usuarios\"><a href=\"#Modificando-e-apagando-grupos-de-usuarios\" class=\"headerlink\" title=\"Modificando e apagando grupos de usuários\"></a>Modificando e apagando grupos de usuários</h2><p>Você pode alterar o nome do grupo com <code>sudo groupmod -n &lt;novo-nome&gt; &lt;nome-do-grupo&gt;</code>. Os parâmetros <code>-n</code> e <code>--new-name</code> são equivalentes.</p>\n<p>Também pode alterar a senha de um grupo usando o parâmetro <code>-p</code> ou <code>--password</code> seguido da nova senha.</p>\n<p>Para apagar um grupo de usuário, pode usar o comando <code>groupdel</code>. Se o grupo que está sendo apagado é o grupo primário de um usuário, ele não será apagado, a menos que você passe o parâmetro <code>-f</code> ou <code>--force</code>. Ficaria algo como <code>sudo groupdel &lt;nome-do-grupo</code>.</p>\n<h3 id=\"Grupos-primarios\"><a href=\"#Grupos-primarios\" class=\"headerlink\" title=\"Grupos primários?\"></a>Grupos primários?</h3><p>Aqui nós temos dois “tipos” de grupos, os primários e secundários. Um usuário tem um grupo primário, o principal do qual faz parte, e há grupos secundários.</p>\n<p>Não há grande diferença além do que, quando conectar via login, ou SSH/TTY/etc, o grupo primário é o que aparecerá.</p>\n<h1 id=\"Ate-a-proxima\"><a href=\"#Ate-a-proxima\" class=\"headerlink\" title=\"Até a próxima!\"></a>Até a próxima!</h1><p>Logo veremos sobre permissões, uma das partes cruciais de sistemas operacionais.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"groups.jpg\" alt=\"\"></p>\n<p>Nos artigos anteriores, vimos um pouco sobre:</p>\n<ul>\n<li><a href=\"/terminais-sao-legais-como-comecar-a-usar\">Terminais são legais: como começar a usar </a></li>\n<li><a href=\"/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/\">Terminais são legais v1: lendo e filtrando arquivos</a></li>\n<li><a href=\"/terminais-sao-legais-v2-pastas/\">Terminais são legais v2: trabalhando com arquivos e pastas</a></li>\n<li><a href=\"/terminais-sao-legais-v3-usuarios/\">Terminais são legais v3.0: usuários</a></li>\n</ul>\n<h1 id=\"Grupos-de-Usuarios\"><a href=\"#Grupos-de-Usuarios\" class=\"headerlink\" title=\"Grupos de Usuários\"></a>Grupos de Usuários</h1><p>Agora vamos trabalhar com <em>grupos de usuários</em>, como o próprio nome já diz, você pode agrupar usuários e definir permissões baseadas em grupos.</p>\n<p>Comandos do dia:</p>\n<ul>\n<li><code>groupadd</code></li>\n<li><code>groupmod</code></li>\n<li><code>groupdel</code></li>\n<li><code>groups</code></li>\n<li><code>groupmems</code></li>\n</ul>\n<h2 id=\"Criando-um-grupo-de-usuarios\"><a href=\"#Criando-um-grupo-de-usuarios\" class=\"headerlink\" title=\"Criando um grupo de usuários\"></a>Criando um grupo de usuários</h2><p>É bem simples, basta executar <code>sudo groupadd &lt;nome-do-grupo</code>. Em seguida você vai precisar colocar a senha do grupo(sim, grupos tem senha!), assim como fez para criar um novo usuário.</p>\n<p>Caso queira listar os grupos e saber se o seu foi criado, pode olhar o arquivo <code>/etc/group</code>. </p>\n<p>Para ver os grupos atuais, pode usar o comando <code>groups</code>, você também pode executar <code>groups &lt;nome-do-usuario&gt;</code> para saber em quais grupos um usuário está.</p>\n<h2 id=\"Adicionando-usuarios-ao-novo-grupo\"><a href=\"#Adicionando-usuarios-ao-novo-grupo\" class=\"headerlink\" title=\"Adicionando usuários ao novo grupo\"></a>Adicionando usuários ao novo grupo</h2><p>Ok, agora temos um grupo de usuários, mas ele está vazio. Precisamos adicionar usuário a ele, certo?</p>\n<p>Lembra do <code>usermod</code>? Então, aqui também usamos ele, mas dessa vez com o parâmetro <code>-G</code> ou <code>--groups</code> seguido pelo nome do nosso novo grupo. Exemplo: <code>sudo usermod -G &lt;nome-do-grupo&gt; &lt;nome-do-usuario&gt;</code>.</p>\n<p>Para verificar, use <code>groups &lt;nome-do-usuario&gt;</code>.</p>\n<p>Com isso, você pode gerenciar os grupos de qualquer usuário.</p>\n<p>Há também o comando <code>groupmems</code>, que serve para gerenciar os membros do grupo primário de um usuário, dizendo melhor, o grupo principal.</p>\n<p>Se você quiser adicionar seu usuário ao grupo <code>root</code>, pode executar <code>sudo groupmems -a &lt;nome-do-usuario&gt;</code>.</p>\n<p>O <code>groupmems</code> é bom por ser versátil e mais fácil de usar para adicionar usuários. Você pode usar o seguinte comando como exemplo para adicionar um usuário a outros grupos: <code>sudo groupmems -g &lt;nome-do-grupo&gt; -a &lt;nome-do-usuario&gt;</code></p>\n<h2 id=\"Modificando-e-apagando-grupos-de-usuarios\"><a href=\"#Modificando-e-apagando-grupos-de-usuarios\" class=\"headerlink\" title=\"Modificando e apagando grupos de usuários\"></a>Modificando e apagando grupos de usuários</h2><p>Você pode alterar o nome do grupo com <code>sudo groupmod -n &lt;novo-nome&gt; &lt;nome-do-grupo&gt;</code>. Os parâmetros <code>-n</code> e <code>--new-name</code> são equivalentes.</p>\n<p>Também pode alterar a senha de um grupo usando o parâmetro <code>-p</code> ou <code>--password</code> seguido da nova senha.</p>\n<p>Para apagar um grupo de usuário, pode usar o comando <code>groupdel</code>. Se o grupo que está sendo apagado é o grupo primário de um usuário, ele não será apagado, a menos que você passe o parâmetro <code>-f</code> ou <code>--force</code>. Ficaria algo como <code>sudo groupdel &lt;nome-do-grupo</code>.</p>\n<h3 id=\"Grupos-primarios\"><a href=\"#Grupos-primarios\" class=\"headerlink\" title=\"Grupos primários?\"></a>Grupos primários?</h3><p>Aqui nós temos dois “tipos” de grupos, os primários e secundários. Um usuário tem um grupo primário, o principal do qual faz parte, e há grupos secundários.</p>\n<p>Não há grande diferença além do que, quando conectar via login, ou SSH/TTY/etc, o grupo primário é o que aparecerá.</p>\n<h1 id=\"Ate-a-proxima\"><a href=\"#Ate-a-proxima\" class=\"headerlink\" title=\"Até a próxima!\"></a>Até a próxima!</h1><p>Logo veremos sobre permissões, uma das partes cruciais de sistemas operacionais.</p>\n"},{"title":"Terminais são legais v3.2: permissões","date":"2018-07-05T18:54:20.000Z","description":null,"thumbnail":null,"_content":"\n\n## Anteriormente...\n\nVimos algumas coisas legais sobre Linux, se você ainda não leu ou quer refrescar sua memória, se liga:\n\n- [Terminais são legais: como começar a usar ](/terminais-sao-legais-como-comecar-a-usar)\n- [Terminais são legais v1: lendo e filtrando arquivos](/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/)\n- [Terminais são legais v2: trabalhando com arquivos e pastas](/terminais-sao-legais-v2-pastas/)\n- [Terminais são legais v3.0: usuários](/terminais-sao-legais-v3-usuarios/)\n- [Terminais são legais v3.1: grupos de usuários](/terminais-sao-legais-v3-1-grupos-de-usuarios/)\n\nE hoje vamos aprender um pouco mais sobre permissões.\n\n## Sistema de Permissões no Linux\n\nBom, como você já deve ter visto por aí, alguns comandos como o `ls` exibem algumas combinações de letras estranhas, ou até sequências de números como `0777`, `0755`, `drwx-xr-x`, etc. \n\nTodas são *representações* das permissões de determinada pasta/arquivo. Normalmente, você vai encontrar a representação númérica em fóruns, artigos e etc, por ser mais fácil de decorar, e a outra, em comandos como `ls -l`.\n\n### Mas o que significam?\n\nPara começar, precisamos entender primeiro os *níveis de permissão* existentes no Linux.\n\nEsses níveis são divididos em três: usuário, grupo do usuário e outros usuários.\n\nNós temos três possíveis ações: *ler*, *escrever/editar*, *executar*. \n\nVocê pode entender cada uma com sua sigla assim:\n\n- ler = *r* de _read_\n- escrever/editar = *w* de _write_\n- executar = *x* de _eXecute_\n\nSendo assim, veja a seguinte combinação: `rwxrwxrwx`\n\nOlhando bem, da pra perceber que temos 3 grupos com as mesmas permissões, sendo elas, na ordem: *leitura, escrita e execução*.\n\nMas se são 3 grupos, isso quer dizer que...sim! Cada grupo representa respectivamente o usuário atual, seu grupo, e os outros usuários.\n\nComo em `rwxr-xr-x`, estamos dizendo que o usuário atual pode fazer tudo, o grupo dele pode apenas ler e executar, e o restante apenas pode executar.\n\nComo comentei antes, você pode também representar com números, equivalendo:\n\n- *r* = 4\n- *w* = 2\n- *x* = 1\n\nVamos ver como fica, comparando duas representações? Se liga:\n\n`rwxr-xr-x` é o mesmo que `755`.\n`rwxrwxrwx` é o mesmo que `777`.\n\nE por aí vai.\n\nNormalmente, você vai encontrar mais a representação numérica, por ser mais fácil de decorar e escrever.\n\nCom o comando `ls`, você pode ver também as permissões das pastas usando o parâmetro `-l`. \n\n![](ls-l.png)\n\nHá algumas coisas a mais sobre permissões, mas vou deixar para outro artigo, você precisa decorar bem para não ter problemas depois. \n\n\nAté a próxima!\n","source":"_posts/Terminais-sao-legais-v3-2-permissoes.md","raw":"---\ntitle: 'Terminais são legais v3.2: permissões'\ndate: 2018-07-05 15:54:20\ndescription:\nthumbnail:\ntags:\n---\n\n\n## Anteriormente...\n\nVimos algumas coisas legais sobre Linux, se você ainda não leu ou quer refrescar sua memória, se liga:\n\n- [Terminais são legais: como começar a usar ](/terminais-sao-legais-como-comecar-a-usar)\n- [Terminais são legais v1: lendo e filtrando arquivos](/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/)\n- [Terminais são legais v2: trabalhando com arquivos e pastas](/terminais-sao-legais-v2-pastas/)\n- [Terminais são legais v3.0: usuários](/terminais-sao-legais-v3-usuarios/)\n- [Terminais são legais v3.1: grupos de usuários](/terminais-sao-legais-v3-1-grupos-de-usuarios/)\n\nE hoje vamos aprender um pouco mais sobre permissões.\n\n## Sistema de Permissões no Linux\n\nBom, como você já deve ter visto por aí, alguns comandos como o `ls` exibem algumas combinações de letras estranhas, ou até sequências de números como `0777`, `0755`, `drwx-xr-x`, etc. \n\nTodas são *representações* das permissões de determinada pasta/arquivo. Normalmente, você vai encontrar a representação númérica em fóruns, artigos e etc, por ser mais fácil de decorar, e a outra, em comandos como `ls -l`.\n\n### Mas o que significam?\n\nPara começar, precisamos entender primeiro os *níveis de permissão* existentes no Linux.\n\nEsses níveis são divididos em três: usuário, grupo do usuário e outros usuários.\n\nNós temos três possíveis ações: *ler*, *escrever/editar*, *executar*. \n\nVocê pode entender cada uma com sua sigla assim:\n\n- ler = *r* de _read_\n- escrever/editar = *w* de _write_\n- executar = *x* de _eXecute_\n\nSendo assim, veja a seguinte combinação: `rwxrwxrwx`\n\nOlhando bem, da pra perceber que temos 3 grupos com as mesmas permissões, sendo elas, na ordem: *leitura, escrita e execução*.\n\nMas se são 3 grupos, isso quer dizer que...sim! Cada grupo representa respectivamente o usuário atual, seu grupo, e os outros usuários.\n\nComo em `rwxr-xr-x`, estamos dizendo que o usuário atual pode fazer tudo, o grupo dele pode apenas ler e executar, e o restante apenas pode executar.\n\nComo comentei antes, você pode também representar com números, equivalendo:\n\n- *r* = 4\n- *w* = 2\n- *x* = 1\n\nVamos ver como fica, comparando duas representações? Se liga:\n\n`rwxr-xr-x` é o mesmo que `755`.\n`rwxrwxrwx` é o mesmo que `777`.\n\nE por aí vai.\n\nNormalmente, você vai encontrar mais a representação numérica, por ser mais fácil de decorar e escrever.\n\nCom o comando `ls`, você pode ver também as permissões das pastas usando o parâmetro `-l`. \n\n![](ls-l.png)\n\nHá algumas coisas a mais sobre permissões, mas vou deixar para outro artigo, você precisa decorar bem para não ter problemas depois. \n\n\nAté a próxima!\n","slug":"Terminais-sao-legais-v3-2-permissoes","published":1,"updated":"2018-08-12T23:48:23.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmf456wq00044grpfrkrxd1s","content":"<h2 id=\"Anteriormente…\"><a href=\"#Anteriormente…\" class=\"headerlink\" title=\"Anteriormente…\"></a>Anteriormente…</h2><p>Vimos algumas coisas legais sobre Linux, se você ainda não leu ou quer refrescar sua memória, se liga:</p>\n<ul>\n<li><a href=\"/terminais-sao-legais-como-comecar-a-usar\">Terminais são legais: como começar a usar </a></li>\n<li><a href=\"/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/\">Terminais são legais v1: lendo e filtrando arquivos</a></li>\n<li><a href=\"/terminais-sao-legais-v2-pastas/\">Terminais são legais v2: trabalhando com arquivos e pastas</a></li>\n<li><a href=\"/terminais-sao-legais-v3-usuarios/\">Terminais são legais v3.0: usuários</a></li>\n<li><a href=\"/terminais-sao-legais-v3-1-grupos-de-usuarios/\">Terminais são legais v3.1: grupos de usuários</a></li>\n</ul>\n<p>E hoje vamos aprender um pouco mais sobre permissões.</p>\n<h2 id=\"Sistema-de-Permissoes-no-Linux\"><a href=\"#Sistema-de-Permissoes-no-Linux\" class=\"headerlink\" title=\"Sistema de Permissões no Linux\"></a>Sistema de Permissões no Linux</h2><p>Bom, como você já deve ter visto por aí, alguns comandos como o <code>ls</code> exibem algumas combinações de letras estranhas, ou até sequências de números como <code>0777</code>, <code>0755</code>, <code>drwx-xr-x</code>, etc. </p>\n<p>Todas são <em>representações</em> das permissões de determinada pasta/arquivo. Normalmente, você vai encontrar a representação númérica em fóruns, artigos e etc, por ser mais fácil de decorar, e a outra, em comandos como <code>ls -l</code>.</p>\n<h3 id=\"Mas-o-que-significam\"><a href=\"#Mas-o-que-significam\" class=\"headerlink\" title=\"Mas o que significam?\"></a>Mas o que significam?</h3><p>Para começar, precisamos entender primeiro os <em>níveis de permissão</em> existentes no Linux.</p>\n<p>Esses níveis são divididos em três: usuário, grupo do usuário e outros usuários.</p>\n<p>Nós temos três possíveis ações: <em>ler</em>, <em>escrever/editar</em>, <em>executar</em>. </p>\n<p>Você pode entender cada uma com sua sigla assim:</p>\n<ul>\n<li>ler = <em>r</em> de <em>read</em></li>\n<li>escrever/editar = <em>w</em> de <em>write</em></li>\n<li>executar = <em>x</em> de <em>eXecute</em></li>\n</ul>\n<p>Sendo assim, veja a seguinte combinação: <code>rwxrwxrwx</code></p>\n<p>Olhando bem, da pra perceber que temos 3 grupos com as mesmas permissões, sendo elas, na ordem: <em>leitura, escrita e execução</em>.</p>\n<p>Mas se são 3 grupos, isso quer dizer que…sim! Cada grupo representa respectivamente o usuário atual, seu grupo, e os outros usuários.</p>\n<p>Como em <code>rwxr-xr-x</code>, estamos dizendo que o usuário atual pode fazer tudo, o grupo dele pode apenas ler e executar, e o restante apenas pode executar.</p>\n<p>Como comentei antes, você pode também representar com números, equivalendo:</p>\n<ul>\n<li><em>r</em> = 4</li>\n<li><em>w</em> = 2</li>\n<li><em>x</em> = 1</li>\n</ul>\n<p>Vamos ver como fica, comparando duas representações? Se liga:</p>\n<p><code>rwxr-xr-x</code> é o mesmo que <code>755</code>.<br><code>rwxrwxrwx</code> é o mesmo que <code>777</code>.</p>\n<p>E por aí vai.</p>\n<p>Normalmente, você vai encontrar mais a representação numérica, por ser mais fácil de decorar e escrever.</p>\n<p>Com o comando <code>ls</code>, você pode ver também as permissões das pastas usando o parâmetro <code>-l</code>. </p>\n<p><img src=\"ls-l.png\" alt=\"\"></p>\n<p>Há algumas coisas a mais sobre permissões, mas vou deixar para outro artigo, você precisa decorar bem para não ter problemas depois. </p>\n<p>Até a próxima!</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Anteriormente…\"><a href=\"#Anteriormente…\" class=\"headerlink\" title=\"Anteriormente…\"></a>Anteriormente…</h2><p>Vimos algumas coisas legais sobre Linux, se você ainda não leu ou quer refrescar sua memória, se liga:</p>\n<ul>\n<li><a href=\"/terminais-sao-legais-como-comecar-a-usar\">Terminais são legais: como começar a usar </a></li>\n<li><a href=\"/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/\">Terminais são legais v1: lendo e filtrando arquivos</a></li>\n<li><a href=\"/terminais-sao-legais-v2-pastas/\">Terminais são legais v2: trabalhando com arquivos e pastas</a></li>\n<li><a href=\"/terminais-sao-legais-v3-usuarios/\">Terminais são legais v3.0: usuários</a></li>\n<li><a href=\"/terminais-sao-legais-v3-1-grupos-de-usuarios/\">Terminais são legais v3.1: grupos de usuários</a></li>\n</ul>\n<p>E hoje vamos aprender um pouco mais sobre permissões.</p>\n<h2 id=\"Sistema-de-Permissoes-no-Linux\"><a href=\"#Sistema-de-Permissoes-no-Linux\" class=\"headerlink\" title=\"Sistema de Permissões no Linux\"></a>Sistema de Permissões no Linux</h2><p>Bom, como você já deve ter visto por aí, alguns comandos como o <code>ls</code> exibem algumas combinações de letras estranhas, ou até sequências de números como <code>0777</code>, <code>0755</code>, <code>drwx-xr-x</code>, etc. </p>\n<p>Todas são <em>representações</em> das permissões de determinada pasta/arquivo. Normalmente, você vai encontrar a representação númérica em fóruns, artigos e etc, por ser mais fácil de decorar, e a outra, em comandos como <code>ls -l</code>.</p>\n<h3 id=\"Mas-o-que-significam\"><a href=\"#Mas-o-que-significam\" class=\"headerlink\" title=\"Mas o que significam?\"></a>Mas o que significam?</h3><p>Para começar, precisamos entender primeiro os <em>níveis de permissão</em> existentes no Linux.</p>\n<p>Esses níveis são divididos em três: usuário, grupo do usuário e outros usuários.</p>\n<p>Nós temos três possíveis ações: <em>ler</em>, <em>escrever/editar</em>, <em>executar</em>. </p>\n<p>Você pode entender cada uma com sua sigla assim:</p>\n<ul>\n<li>ler = <em>r</em> de <em>read</em></li>\n<li>escrever/editar = <em>w</em> de <em>write</em></li>\n<li>executar = <em>x</em> de <em>eXecute</em></li>\n</ul>\n<p>Sendo assim, veja a seguinte combinação: <code>rwxrwxrwx</code></p>\n<p>Olhando bem, da pra perceber que temos 3 grupos com as mesmas permissões, sendo elas, na ordem: <em>leitura, escrita e execução</em>.</p>\n<p>Mas se são 3 grupos, isso quer dizer que…sim! Cada grupo representa respectivamente o usuário atual, seu grupo, e os outros usuários.</p>\n<p>Como em <code>rwxr-xr-x</code>, estamos dizendo que o usuário atual pode fazer tudo, o grupo dele pode apenas ler e executar, e o restante apenas pode executar.</p>\n<p>Como comentei antes, você pode também representar com números, equivalendo:</p>\n<ul>\n<li><em>r</em> = 4</li>\n<li><em>w</em> = 2</li>\n<li><em>x</em> = 1</li>\n</ul>\n<p>Vamos ver como fica, comparando duas representações? Se liga:</p>\n<p><code>rwxr-xr-x</code> é o mesmo que <code>755</code>.<br><code>rwxrwxrwx</code> é o mesmo que <code>777</code>.</p>\n<p>E por aí vai.</p>\n<p>Normalmente, você vai encontrar mais a representação numérica, por ser mais fácil de decorar e escrever.</p>\n<p>Com o comando <code>ls</code>, você pode ver também as permissões das pastas usando o parâmetro <code>-l</code>. </p>\n<p><img src=\"ls-l.png\" alt=\"\"></p>\n<p>Há algumas coisas a mais sobre permissões, mas vou deixar para outro artigo, você precisa decorar bem para não ter problemas depois. </p>\n<p>Até a próxima!</p>\n"},{"layout":"draf","title":"Terminais são legais v3.0: usuários","description":"Já pensou em criar e gerenciar usuários pelo terminal? É muito fácil e simples!","thumbnail":"people.jpg","date":"2018-06-18T12:41:47.000Z","_content":"\n\n![](people.jpg)\n\nSó para te contextualizar, esse artigo é uma continuação de uma série sobre terminal/shell, se quiser ver outros artigos, aqui estão:\n\n- [Terminais são legais: como começar a usar ](/terminais-sao-legais-como-comecar-a-usar)\n- [Terminais são legais v1: lendo e filtrando arquivos](/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/)\n- [Terminais são legais v2: trabalhando com arquivos e pastas](/terminais-sao-legais-v2-pastas/)\n\n# Como usuários funcionam?\n\nE agora vamos abordar sobre usuários(criar, alterar, apagar, etc), no próximo, sobre grupos e por fim permissões.\n\nComo você já deve ter visto, no Linux nós temos *usuários* e *grupos de usuários*. Quando você instalou sua distribuição, você precisou definir o nome de um usuário, que é o mesmo usado no login, também o mesmo que aparece no seu terminal.\n\nPor padrão, quando instalamos o Linux, temos além do nosso usuário, o *root*, que nada mais é que o usuário administrador do sistema, com permissão para fazer tudo o que quiser, mexer onde quiser sem restrições.\n\nA senha do usuário *root* é definida na instalação do sistema e eu sempre costumo colocar a mesma senha do meu usuário. Isso é uma má prática e deve ser evitada, mas sou preguiçoso para isso =|\n\nVamos trabalhar com os seguintes comandos:\n\n- `useradd` para adicionar um novo usuário\n- `usermod` para alterar um usuário\n- `passwd` para definir uma senha ao novo usuário\n- `userdel` para apagar um usuário\n\n## Criando um usuário\n\nEsse comando altera usuários, então não é qualquer um que pode executar, senão poderia deixar o sistema vulnerável. Para ações mais restritas, o Linux tem uma conta de administrador por padrão, chamada *root*. É uma conta com acesso total à qualquer lugar do sistema, pode alterar o que quiser e como quiser.\n\nNormalmente, quando você instala o Linux, a senha do usuário *root* é a mesma que você colocou para o seu usuário, a menos que tenha alterado isso propositalmente. Para executar comandos como *root*, você precisa colocar `sudo` no começo do comando. Quando usar, o terminal irá pedir a senha do usuário *root*, para confirmação, em seguida prosseguirá com o fluxo.\n\nPara criar um novo usuário, você pode usar o comando `useradd` da seguinte forma: `sudo useradd -m <nome-do-usuario>`, o terminal irá pedir a senha do usuário *root*, em seguida você vai precisar inserir a senha do usuário que está sendo criado.\n\nO parâmetro `-m` é o mesmo que `--create-home`, ele cria a pasta do usuário.\n\n## Testando o novo usuário\n\nPara saber se o usuário foi criado corretamente, temos duas formas: verificando o arquivo `/etc/passwd` ou fazendo log in como o novo usuário.\n\nO arquivo `/etc/passwd` possui uma listagem dos usuários do sistema basicamente. Ele é um arquivo de texto, então [você pode ler seu conteúdo como faria com qualquer outro arquivo](/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/), como por exemplo, usando `cat /etc/passwd`. Se ficou muita coisa, pode combinar com o `grep`: `cat /etc/passwd | grep <nome-do-usuario>`.\n\nPara fazer o log in como o novo usuário, você nem precisa sair da sua conta, basta execuar `su - <nome-do-usuario>`, o terminal irá pedir a senha para aquele usuário e em seguida você estará conectado como seu novo usuário.\n\nSaia usando o comando `exit`, ele irá fazer o log off do usuário e retornará para onde estava.\n\n## Modificando um usuário\n\nComo vamos modificar os dados de usuário, precisamos sempre usar o `sudo` no começo de cada comando.\n\nDigamos que agora você quer alterar algumas coisas do usuário que criou, como a pasta, nome de login, ou mudar sua senha. Você pode usar o `usermod` para alterar os dados e `passwd` para alterar a senha.\n\nUsuários podem ser bloqueados no Linux, para isso existe o parâmetro `-L`, ou `--lock`: `sudo -L <nome-do-usuario>`. Se quiser desbloquear, pode fazer usando `-U` ou `--unlock`.\n\nQuer mudar o nome de login? Existe o parâmetro `-l` ou `--login` seguido pelo novo nome de login. \n\nSe você quiser mudar a pasta pessoal do usuário, use `-d` ou `--home` seguido pelo caminho completo da nova pasta. Só isso irá criar uma nova pasta, caso não exista, e usá-la como padrão, mas *não irá mover o conteúdo da pasta antiga para lá*, para fazer isso, use também `-m` ou `--move-home`.\n\nCaso precise alterar a senha, pode usar o `sudo passwd <nome-do-usuario>`\n\n## Apagando um usuário\n\nOk, até agora criamos um usuário, verificamos se ele existe mesmo, fizemos login, alteramos a conta e a senha. Mas e se eu quiser deletar?\n\nUse o comando `userdel <nome-do-usuario>`. Ele irá apagar *apenas o usuário*, caso você queira apagar sua pasta pessoal também, use `-r` ou `--remove` antes do nome do usuário. \n\nIsso irá apagar sua pasta pessoal e seu conteúdo. Caso haja algum arquivo ou pasta que não seja do usuário que está sendo apagado, o mesmo não será apagado. Se quiser forçar, pode passar o parâmetro `-f` ou `--force`\n","source":"_posts/Terminais-sao-legais-v3-usuarios.md","raw":"---\nlayout: draf\ntitle: 'Terminais são legais v3.0: usuários'\ndescription: >-\n  Já pensou em criar e gerenciar usuários pelo terminal? É muito fácil e\n  simples!\nthumbnail: people.jpg\ndate: 2018-06-18 09:41:47\ntags:\n---\n\n\n![](people.jpg)\n\nSó para te contextualizar, esse artigo é uma continuação de uma série sobre terminal/shell, se quiser ver outros artigos, aqui estão:\n\n- [Terminais são legais: como começar a usar ](/terminais-sao-legais-como-comecar-a-usar)\n- [Terminais são legais v1: lendo e filtrando arquivos](/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/)\n- [Terminais são legais v2: trabalhando com arquivos e pastas](/terminais-sao-legais-v2-pastas/)\n\n# Como usuários funcionam?\n\nE agora vamos abordar sobre usuários(criar, alterar, apagar, etc), no próximo, sobre grupos e por fim permissões.\n\nComo você já deve ter visto, no Linux nós temos *usuários* e *grupos de usuários*. Quando você instalou sua distribuição, você precisou definir o nome de um usuário, que é o mesmo usado no login, também o mesmo que aparece no seu terminal.\n\nPor padrão, quando instalamos o Linux, temos além do nosso usuário, o *root*, que nada mais é que o usuário administrador do sistema, com permissão para fazer tudo o que quiser, mexer onde quiser sem restrições.\n\nA senha do usuário *root* é definida na instalação do sistema e eu sempre costumo colocar a mesma senha do meu usuário. Isso é uma má prática e deve ser evitada, mas sou preguiçoso para isso =|\n\nVamos trabalhar com os seguintes comandos:\n\n- `useradd` para adicionar um novo usuário\n- `usermod` para alterar um usuário\n- `passwd` para definir uma senha ao novo usuário\n- `userdel` para apagar um usuário\n\n## Criando um usuário\n\nEsse comando altera usuários, então não é qualquer um que pode executar, senão poderia deixar o sistema vulnerável. Para ações mais restritas, o Linux tem uma conta de administrador por padrão, chamada *root*. É uma conta com acesso total à qualquer lugar do sistema, pode alterar o que quiser e como quiser.\n\nNormalmente, quando você instala o Linux, a senha do usuário *root* é a mesma que você colocou para o seu usuário, a menos que tenha alterado isso propositalmente. Para executar comandos como *root*, você precisa colocar `sudo` no começo do comando. Quando usar, o terminal irá pedir a senha do usuário *root*, para confirmação, em seguida prosseguirá com o fluxo.\n\nPara criar um novo usuário, você pode usar o comando `useradd` da seguinte forma: `sudo useradd -m <nome-do-usuario>`, o terminal irá pedir a senha do usuário *root*, em seguida você vai precisar inserir a senha do usuário que está sendo criado.\n\nO parâmetro `-m` é o mesmo que `--create-home`, ele cria a pasta do usuário.\n\n## Testando o novo usuário\n\nPara saber se o usuário foi criado corretamente, temos duas formas: verificando o arquivo `/etc/passwd` ou fazendo log in como o novo usuário.\n\nO arquivo `/etc/passwd` possui uma listagem dos usuários do sistema basicamente. Ele é um arquivo de texto, então [você pode ler seu conteúdo como faria com qualquer outro arquivo](/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/), como por exemplo, usando `cat /etc/passwd`. Se ficou muita coisa, pode combinar com o `grep`: `cat /etc/passwd | grep <nome-do-usuario>`.\n\nPara fazer o log in como o novo usuário, você nem precisa sair da sua conta, basta execuar `su - <nome-do-usuario>`, o terminal irá pedir a senha para aquele usuário e em seguida você estará conectado como seu novo usuário.\n\nSaia usando o comando `exit`, ele irá fazer o log off do usuário e retornará para onde estava.\n\n## Modificando um usuário\n\nComo vamos modificar os dados de usuário, precisamos sempre usar o `sudo` no começo de cada comando.\n\nDigamos que agora você quer alterar algumas coisas do usuário que criou, como a pasta, nome de login, ou mudar sua senha. Você pode usar o `usermod` para alterar os dados e `passwd` para alterar a senha.\n\nUsuários podem ser bloqueados no Linux, para isso existe o parâmetro `-L`, ou `--lock`: `sudo -L <nome-do-usuario>`. Se quiser desbloquear, pode fazer usando `-U` ou `--unlock`.\n\nQuer mudar o nome de login? Existe o parâmetro `-l` ou `--login` seguido pelo novo nome de login. \n\nSe você quiser mudar a pasta pessoal do usuário, use `-d` ou `--home` seguido pelo caminho completo da nova pasta. Só isso irá criar uma nova pasta, caso não exista, e usá-la como padrão, mas *não irá mover o conteúdo da pasta antiga para lá*, para fazer isso, use também `-m` ou `--move-home`.\n\nCaso precise alterar a senha, pode usar o `sudo passwd <nome-do-usuario>`\n\n## Apagando um usuário\n\nOk, até agora criamos um usuário, verificamos se ele existe mesmo, fizemos login, alteramos a conta e a senha. Mas e se eu quiser deletar?\n\nUse o comando `userdel <nome-do-usuario>`. Ele irá apagar *apenas o usuário*, caso você queira apagar sua pasta pessoal também, use `-r` ou `--remove` antes do nome do usuário. \n\nIsso irá apagar sua pasta pessoal e seu conteúdo. Caso haja algum arquivo ou pasta que não seja do usuário que está sendo apagado, o mesmo não será apagado. Se quiser forçar, pode passar o parâmetro `-f` ou `--force`\n","slug":"Terminais-sao-legais-v3-usuarios","published":1,"updated":"2018-06-30T19:33:37.872Z","comments":1,"photos":[],"link":"","_id":"cjmf456ws00054grpwtikn9nz","content":"<p><img src=\"people.jpg\" alt=\"\"></p>\n<p>Só para te contextualizar, esse artigo é uma continuação de uma série sobre terminal/shell, se quiser ver outros artigos, aqui estão:</p>\n<ul>\n<li><a href=\"/terminais-sao-legais-como-comecar-a-usar\">Terminais são legais: como começar a usar </a></li>\n<li><a href=\"/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/\">Terminais são legais v1: lendo e filtrando arquivos</a></li>\n<li><a href=\"/terminais-sao-legais-v2-pastas/\">Terminais são legais v2: trabalhando com arquivos e pastas</a></li>\n</ul>\n<h1 id=\"Como-usuarios-funcionam\"><a href=\"#Como-usuarios-funcionam\" class=\"headerlink\" title=\"Como usuários funcionam?\"></a>Como usuários funcionam?</h1><p>E agora vamos abordar sobre usuários(criar, alterar, apagar, etc), no próximo, sobre grupos e por fim permissões.</p>\n<p>Como você já deve ter visto, no Linux nós temos <em>usuários</em> e <em>grupos de usuários</em>. Quando você instalou sua distribuição, você precisou definir o nome de um usuário, que é o mesmo usado no login, também o mesmo que aparece no seu terminal.</p>\n<p>Por padrão, quando instalamos o Linux, temos além do nosso usuário, o <em>root</em>, que nada mais é que o usuário administrador do sistema, com permissão para fazer tudo o que quiser, mexer onde quiser sem restrições.</p>\n<p>A senha do usuário <em>root</em> é definida na instalação do sistema e eu sempre costumo colocar a mesma senha do meu usuário. Isso é uma má prática e deve ser evitada, mas sou preguiçoso para isso =|</p>\n<p>Vamos trabalhar com os seguintes comandos:</p>\n<ul>\n<li><code>useradd</code> para adicionar um novo usuário</li>\n<li><code>usermod</code> para alterar um usuário</li>\n<li><code>passwd</code> para definir uma senha ao novo usuário</li>\n<li><code>userdel</code> para apagar um usuário</li>\n</ul>\n<h2 id=\"Criando-um-usuario\"><a href=\"#Criando-um-usuario\" class=\"headerlink\" title=\"Criando um usuário\"></a>Criando um usuário</h2><p>Esse comando altera usuários, então não é qualquer um que pode executar, senão poderia deixar o sistema vulnerável. Para ações mais restritas, o Linux tem uma conta de administrador por padrão, chamada <em>root</em>. É uma conta com acesso total à qualquer lugar do sistema, pode alterar o que quiser e como quiser.</p>\n<p>Normalmente, quando você instala o Linux, a senha do usuário <em>root</em> é a mesma que você colocou para o seu usuário, a menos que tenha alterado isso propositalmente. Para executar comandos como <em>root</em>, você precisa colocar <code>sudo</code> no começo do comando. Quando usar, o terminal irá pedir a senha do usuário <em>root</em>, para confirmação, em seguida prosseguirá com o fluxo.</p>\n<p>Para criar um novo usuário, você pode usar o comando <code>useradd</code> da seguinte forma: <code>sudo useradd -m &lt;nome-do-usuario&gt;</code>, o terminal irá pedir a senha do usuário <em>root</em>, em seguida você vai precisar inserir a senha do usuário que está sendo criado.</p>\n<p>O parâmetro <code>-m</code> é o mesmo que <code>--create-home</code>, ele cria a pasta do usuário.</p>\n<h2 id=\"Testando-o-novo-usuario\"><a href=\"#Testando-o-novo-usuario\" class=\"headerlink\" title=\"Testando o novo usuário\"></a>Testando o novo usuário</h2><p>Para saber se o usuário foi criado corretamente, temos duas formas: verificando o arquivo <code>/etc/passwd</code> ou fazendo log in como o novo usuário.</p>\n<p>O arquivo <code>/etc/passwd</code> possui uma listagem dos usuários do sistema basicamente. Ele é um arquivo de texto, então <a href=\"/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/\">você pode ler seu conteúdo como faria com qualquer outro arquivo</a>, como por exemplo, usando <code>cat /etc/passwd</code>. Se ficou muita coisa, pode combinar com o <code>grep</code>: <code>cat /etc/passwd | grep &lt;nome-do-usuario&gt;</code>.</p>\n<p>Para fazer o log in como o novo usuário, você nem precisa sair da sua conta, basta execuar <code>su - &lt;nome-do-usuario&gt;</code>, o terminal irá pedir a senha para aquele usuário e em seguida você estará conectado como seu novo usuário.</p>\n<p>Saia usando o comando <code>exit</code>, ele irá fazer o log off do usuário e retornará para onde estava.</p>\n<h2 id=\"Modificando-um-usuario\"><a href=\"#Modificando-um-usuario\" class=\"headerlink\" title=\"Modificando um usuário\"></a>Modificando um usuário</h2><p>Como vamos modificar os dados de usuário, precisamos sempre usar o <code>sudo</code> no começo de cada comando.</p>\n<p>Digamos que agora você quer alterar algumas coisas do usuário que criou, como a pasta, nome de login, ou mudar sua senha. Você pode usar o <code>usermod</code> para alterar os dados e <code>passwd</code> para alterar a senha.</p>\n<p>Usuários podem ser bloqueados no Linux, para isso existe o parâmetro <code>-L</code>, ou <code>--lock</code>: <code>sudo -L &lt;nome-do-usuario&gt;</code>. Se quiser desbloquear, pode fazer usando <code>-U</code> ou <code>--unlock</code>.</p>\n<p>Quer mudar o nome de login? Existe o parâmetro <code>-l</code> ou <code>--login</code> seguido pelo novo nome de login. </p>\n<p>Se você quiser mudar a pasta pessoal do usuário, use <code>-d</code> ou <code>--home</code> seguido pelo caminho completo da nova pasta. Só isso irá criar uma nova pasta, caso não exista, e usá-la como padrão, mas <em>não irá mover o conteúdo da pasta antiga para lá</em>, para fazer isso, use também <code>-m</code> ou <code>--move-home</code>.</p>\n<p>Caso precise alterar a senha, pode usar o <code>sudo passwd &lt;nome-do-usuario&gt;</code></p>\n<h2 id=\"Apagando-um-usuario\"><a href=\"#Apagando-um-usuario\" class=\"headerlink\" title=\"Apagando um usuário\"></a>Apagando um usuário</h2><p>Ok, até agora criamos um usuário, verificamos se ele existe mesmo, fizemos login, alteramos a conta e a senha. Mas e se eu quiser deletar?</p>\n<p>Use o comando <code>userdel &lt;nome-do-usuario&gt;</code>. Ele irá apagar <em>apenas o usuário</em>, caso você queira apagar sua pasta pessoal também, use <code>-r</code> ou <code>--remove</code> antes do nome do usuário. </p>\n<p>Isso irá apagar sua pasta pessoal e seu conteúdo. Caso haja algum arquivo ou pasta que não seja do usuário que está sendo apagado, o mesmo não será apagado. Se quiser forçar, pode passar o parâmetro <code>-f</code> ou <code>--force</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"people.jpg\" alt=\"\"></p>\n<p>Só para te contextualizar, esse artigo é uma continuação de uma série sobre terminal/shell, se quiser ver outros artigos, aqui estão:</p>\n<ul>\n<li><a href=\"/terminais-sao-legais-como-comecar-a-usar\">Terminais são legais: como começar a usar </a></li>\n<li><a href=\"/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/\">Terminais são legais v1: lendo e filtrando arquivos</a></li>\n<li><a href=\"/terminais-sao-legais-v2-pastas/\">Terminais são legais v2: trabalhando com arquivos e pastas</a></li>\n</ul>\n<h1 id=\"Como-usuarios-funcionam\"><a href=\"#Como-usuarios-funcionam\" class=\"headerlink\" title=\"Como usuários funcionam?\"></a>Como usuários funcionam?</h1><p>E agora vamos abordar sobre usuários(criar, alterar, apagar, etc), no próximo, sobre grupos e por fim permissões.</p>\n<p>Como você já deve ter visto, no Linux nós temos <em>usuários</em> e <em>grupos de usuários</em>. Quando você instalou sua distribuição, você precisou definir o nome de um usuário, que é o mesmo usado no login, também o mesmo que aparece no seu terminal.</p>\n<p>Por padrão, quando instalamos o Linux, temos além do nosso usuário, o <em>root</em>, que nada mais é que o usuário administrador do sistema, com permissão para fazer tudo o que quiser, mexer onde quiser sem restrições.</p>\n<p>A senha do usuário <em>root</em> é definida na instalação do sistema e eu sempre costumo colocar a mesma senha do meu usuário. Isso é uma má prática e deve ser evitada, mas sou preguiçoso para isso =|</p>\n<p>Vamos trabalhar com os seguintes comandos:</p>\n<ul>\n<li><code>useradd</code> para adicionar um novo usuário</li>\n<li><code>usermod</code> para alterar um usuário</li>\n<li><code>passwd</code> para definir uma senha ao novo usuário</li>\n<li><code>userdel</code> para apagar um usuário</li>\n</ul>\n<h2 id=\"Criando-um-usuario\"><a href=\"#Criando-um-usuario\" class=\"headerlink\" title=\"Criando um usuário\"></a>Criando um usuário</h2><p>Esse comando altera usuários, então não é qualquer um que pode executar, senão poderia deixar o sistema vulnerável. Para ações mais restritas, o Linux tem uma conta de administrador por padrão, chamada <em>root</em>. É uma conta com acesso total à qualquer lugar do sistema, pode alterar o que quiser e como quiser.</p>\n<p>Normalmente, quando você instala o Linux, a senha do usuário <em>root</em> é a mesma que você colocou para o seu usuário, a menos que tenha alterado isso propositalmente. Para executar comandos como <em>root</em>, você precisa colocar <code>sudo</code> no começo do comando. Quando usar, o terminal irá pedir a senha do usuário <em>root</em>, para confirmação, em seguida prosseguirá com o fluxo.</p>\n<p>Para criar um novo usuário, você pode usar o comando <code>useradd</code> da seguinte forma: <code>sudo useradd -m &lt;nome-do-usuario&gt;</code>, o terminal irá pedir a senha do usuário <em>root</em>, em seguida você vai precisar inserir a senha do usuário que está sendo criado.</p>\n<p>O parâmetro <code>-m</code> é o mesmo que <code>--create-home</code>, ele cria a pasta do usuário.</p>\n<h2 id=\"Testando-o-novo-usuario\"><a href=\"#Testando-o-novo-usuario\" class=\"headerlink\" title=\"Testando o novo usuário\"></a>Testando o novo usuário</h2><p>Para saber se o usuário foi criado corretamente, temos duas formas: verificando o arquivo <code>/etc/passwd</code> ou fazendo log in como o novo usuário.</p>\n<p>O arquivo <code>/etc/passwd</code> possui uma listagem dos usuários do sistema basicamente. Ele é um arquivo de texto, então <a href=\"/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/\">você pode ler seu conteúdo como faria com qualquer outro arquivo</a>, como por exemplo, usando <code>cat /etc/passwd</code>. Se ficou muita coisa, pode combinar com o <code>grep</code>: <code>cat /etc/passwd | grep &lt;nome-do-usuario&gt;</code>.</p>\n<p>Para fazer o log in como o novo usuário, você nem precisa sair da sua conta, basta execuar <code>su - &lt;nome-do-usuario&gt;</code>, o terminal irá pedir a senha para aquele usuário e em seguida você estará conectado como seu novo usuário.</p>\n<p>Saia usando o comando <code>exit</code>, ele irá fazer o log off do usuário e retornará para onde estava.</p>\n<h2 id=\"Modificando-um-usuario\"><a href=\"#Modificando-um-usuario\" class=\"headerlink\" title=\"Modificando um usuário\"></a>Modificando um usuário</h2><p>Como vamos modificar os dados de usuário, precisamos sempre usar o <code>sudo</code> no começo de cada comando.</p>\n<p>Digamos que agora você quer alterar algumas coisas do usuário que criou, como a pasta, nome de login, ou mudar sua senha. Você pode usar o <code>usermod</code> para alterar os dados e <code>passwd</code> para alterar a senha.</p>\n<p>Usuários podem ser bloqueados no Linux, para isso existe o parâmetro <code>-L</code>, ou <code>--lock</code>: <code>sudo -L &lt;nome-do-usuario&gt;</code>. Se quiser desbloquear, pode fazer usando <code>-U</code> ou <code>--unlock</code>.</p>\n<p>Quer mudar o nome de login? Existe o parâmetro <code>-l</code> ou <code>--login</code> seguido pelo novo nome de login. </p>\n<p>Se você quiser mudar a pasta pessoal do usuário, use <code>-d</code> ou <code>--home</code> seguido pelo caminho completo da nova pasta. Só isso irá criar uma nova pasta, caso não exista, e usá-la como padrão, mas <em>não irá mover o conteúdo da pasta antiga para lá</em>, para fazer isso, use também <code>-m</code> ou <code>--move-home</code>.</p>\n<p>Caso precise alterar a senha, pode usar o <code>sudo passwd &lt;nome-do-usuario&gt;</code></p>\n<h2 id=\"Apagando-um-usuario\"><a href=\"#Apagando-um-usuario\" class=\"headerlink\" title=\"Apagando um usuário\"></a>Apagando um usuário</h2><p>Ok, até agora criamos um usuário, verificamos se ele existe mesmo, fizemos login, alteramos a conta e a senha. Mas e se eu quiser deletar?</p>\n<p>Use o comando <code>userdel &lt;nome-do-usuario&gt;</code>. Ele irá apagar <em>apenas o usuário</em>, caso você queira apagar sua pasta pessoal também, use <code>-r</code> ou <code>--remove</code> antes do nome do usuário. </p>\n<p>Isso irá apagar sua pasta pessoal e seu conteúdo. Caso haja algum arquivo ou pasta que não seja do usuário que está sendo apagado, o mesmo não será apagado. Se quiser forçar, pode passar o parâmetro <code>-f</code> ou <code>--force</code></p>\n"},{"title":"O incrível mundo do tmux","date":"2018-04-19T18:52:16.000Z","description":"Você tem um momento para falar de tmux? Venha para o lado negro da força e aumente sua produtividade!","thumbnail":"thumbnail.jpg","_content":"\n# tmux - o que é\n\nTmux é uma ferramenta que basicamente te dá o controle de sessões, janelas e painéis dentro de um único terminal. Sim, você pode voltar pro bom e velho `xterm` e configurar como quiser. Segundo o Wiki deles:\n\n{% blockquote %}\ntmux is a \"terminal multiplexer\", it enables a number of terminals (or windows) to be accessed and controlled from a single terminal. tmux is intended to be a simple, modern, BSD-licensed alternative to programs such as GNU screen\n{% endblockquote %}\n\n![](tmux.gif)\n\n# Instalando\n\nProvavelmente o tmux é suportado pelo seu gerenciador de pacotes - não sei como estão as coisas pra Windows.\n\nUsando o Pacman: `sudo pacman -S tmux`\nUsando o apt-get: `sudo apt-get install tmux`\n\n# Básico\n\nPara começar o tmux, você precisa criar uma sessão. Você tem duas formas, apenas digitando `tmux` no terminal(criando uma sessão chamada 0), ou `tmux new -s <nome-da-sessao>`\n\nAssim que você entrar no tmux, estará dentro de uma sessão, no primeiro painel e na primeira janela.\n\nPara acionar qualquer coisa do tmux, você precisa apertar o prefixo primeiro, para dizer ao tmux que está acionando um comando. O prefixo padrão é `CTRL + b`.\n\n{% blockquote %}\nVou usar o acento `^` para indicar o `CTRL`. Por exemplo, `^b` é o mesmo que `CTRL + b`. Lembre-se que todos os comandos do tmux *são* sensivos a caixa alta e baixa. Então, `^b` não é o mesmo que `^B`. Todo conteúdo sobre tmux que você pesquisar, vai usar essa notação.\n{% endblockquote %}\n\n## Alguns pontos sobre o tmux:\n\n- Você vai notar uma barra inferior assim que entrar em uma sessão do tmux, nela você vai ver o nome da sua sessão, suas janelas, seu usuário@grupo, horário e data atual\n- Se você quiser sair do tmux, basta digitar `exit` no terminal\n\n## Painéis\n\nVamos começar a brincar. Aperte `prefix + %` - coloque seu prefixo no lugar de `prefix` e você pode apertar `Shift + 5` pra produzir o `%`. \nVocê vai dividir sua tela em duas partes. Quer ir para o outro painel? `prefix + o` é a solução.\n\n- `prefix + %` divide sua tela horizontalmente\n- `prefix + \"` (aspas duplas) divide sua tela verticalmente\n- `prefix + o` te coloca no próximo painel\n- `exit` sai do terminal(consequentemente, da sessão do tmux)\n\n# Até a próxima!\n\nIsso foi só por hoje. No próximo artigo vou falar mais sobre as janelas do tmux, mas isso já é o suficiente pra você aprender a brincar com o tmux.\n\ntmux no Github: [https://github.com/tmux/tmux](https://github.com/tmux/tmux)\nWiki to tmux: [https://github.com/tmux/tmux/wiki](https://github.com/tmux/tmux/wiki)\nawesome-tmux: [https://github.com/rothgar/awesome-tmux](https://github.com/rothgar/awesome-tmux)\n","source":"_posts/O-incrivel-mundo-do-tmux.md","raw":"---\ntitle: O incrível mundo do tmux\ndate: 2018-04-19 15:52:16\ntags: tmux produtividade terminal\ndescription: Você tem um momento para falar de tmux? Venha para o lado negro da força e aumente sua produtividade!\nthumbnail: thumbnail.jpg\n---\n\n# tmux - o que é\n\nTmux é uma ferramenta que basicamente te dá o controle de sessões, janelas e painéis dentro de um único terminal. Sim, você pode voltar pro bom e velho `xterm` e configurar como quiser. Segundo o Wiki deles:\n\n{% blockquote %}\ntmux is a \"terminal multiplexer\", it enables a number of terminals (or windows) to be accessed and controlled from a single terminal. tmux is intended to be a simple, modern, BSD-licensed alternative to programs such as GNU screen\n{% endblockquote %}\n\n![](tmux.gif)\n\n# Instalando\n\nProvavelmente o tmux é suportado pelo seu gerenciador de pacotes - não sei como estão as coisas pra Windows.\n\nUsando o Pacman: `sudo pacman -S tmux`\nUsando o apt-get: `sudo apt-get install tmux`\n\n# Básico\n\nPara começar o tmux, você precisa criar uma sessão. Você tem duas formas, apenas digitando `tmux` no terminal(criando uma sessão chamada 0), ou `tmux new -s <nome-da-sessao>`\n\nAssim que você entrar no tmux, estará dentro de uma sessão, no primeiro painel e na primeira janela.\n\nPara acionar qualquer coisa do tmux, você precisa apertar o prefixo primeiro, para dizer ao tmux que está acionando um comando. O prefixo padrão é `CTRL + b`.\n\n{% blockquote %}\nVou usar o acento `^` para indicar o `CTRL`. Por exemplo, `^b` é o mesmo que `CTRL + b`. Lembre-se que todos os comandos do tmux *são* sensivos a caixa alta e baixa. Então, `^b` não é o mesmo que `^B`. Todo conteúdo sobre tmux que você pesquisar, vai usar essa notação.\n{% endblockquote %}\n\n## Alguns pontos sobre o tmux:\n\n- Você vai notar uma barra inferior assim que entrar em uma sessão do tmux, nela você vai ver o nome da sua sessão, suas janelas, seu usuário@grupo, horário e data atual\n- Se você quiser sair do tmux, basta digitar `exit` no terminal\n\n## Painéis\n\nVamos começar a brincar. Aperte `prefix + %` - coloque seu prefixo no lugar de `prefix` e você pode apertar `Shift + 5` pra produzir o `%`. \nVocê vai dividir sua tela em duas partes. Quer ir para o outro painel? `prefix + o` é a solução.\n\n- `prefix + %` divide sua tela horizontalmente\n- `prefix + \"` (aspas duplas) divide sua tela verticalmente\n- `prefix + o` te coloca no próximo painel\n- `exit` sai do terminal(consequentemente, da sessão do tmux)\n\n# Até a próxima!\n\nIsso foi só por hoje. No próximo artigo vou falar mais sobre as janelas do tmux, mas isso já é o suficiente pra você aprender a brincar com o tmux.\n\ntmux no Github: [https://github.com/tmux/tmux](https://github.com/tmux/tmux)\nWiki to tmux: [https://github.com/tmux/tmux/wiki](https://github.com/tmux/tmux/wiki)\nawesome-tmux: [https://github.com/rothgar/awesome-tmux](https://github.com/rothgar/awesome-tmux)\n","slug":"O-incrivel-mundo-do-tmux","published":1,"updated":"2018-06-02T19:06:12.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmf456x800064grp8u1qftnm","content":"<h1 id=\"tmux-o-que-e\"><a href=\"#tmux-o-que-e\" class=\"headerlink\" title=\"tmux - o que é\"></a>tmux - o que é</h1><p>Tmux é uma ferramenta que basicamente te dá o controle de sessões, janelas e painéis dentro de um único terminal. Sim, você pode voltar pro bom e velho <code>xterm</code> e configurar como quiser. Segundo o Wiki deles:</p>\n<blockquote><p>tmux is a “terminal multiplexer”, it enables a number of terminals (or windows) to be accessed and controlled from a single terminal. tmux is intended to be a simple, modern, BSD-licensed alternative to programs such as GNU screen</p>\n</blockquote>\n<p><img src=\"tmux.gif\" alt=\"\"></p>\n<h1 id=\"Instalando\"><a href=\"#Instalando\" class=\"headerlink\" title=\"Instalando\"></a>Instalando</h1><p>Provavelmente o tmux é suportado pelo seu gerenciador de pacotes - não sei como estão as coisas pra Windows.</p>\n<p>Usando o Pacman: <code>sudo pacman -S tmux</code><br>Usando o apt-get: <code>sudo apt-get install tmux</code></p>\n<h1 id=\"Basico\"><a href=\"#Basico\" class=\"headerlink\" title=\"Básico\"></a>Básico</h1><p>Para começar o tmux, você precisa criar uma sessão. Você tem duas formas, apenas digitando <code>tmux</code> no terminal(criando uma sessão chamada 0), ou <code>tmux new -s &lt;nome-da-sessao&gt;</code></p>\n<p>Assim que você entrar no tmux, estará dentro de uma sessão, no primeiro painel e na primeira janela.</p>\n<p>Para acionar qualquer coisa do tmux, você precisa apertar o prefixo primeiro, para dizer ao tmux que está acionando um comando. O prefixo padrão é <code>CTRL + b</code>.</p>\n<blockquote><p>Vou usar o acento <code>^</code> para indicar o <code>CTRL</code>. Por exemplo, <code>^b</code> é o mesmo que <code>CTRL + b</code>. Lembre-se que todos os comandos do tmux <em>são</em> sensivos a caixa alta e baixa. Então, <code>^b</code> não é o mesmo que <code>^B</code>. Todo conteúdo sobre tmux que você pesquisar, vai usar essa notação.</p>\n</blockquote>\n<h2 id=\"Alguns-pontos-sobre-o-tmux\"><a href=\"#Alguns-pontos-sobre-o-tmux\" class=\"headerlink\" title=\"Alguns pontos sobre o tmux:\"></a>Alguns pontos sobre o tmux:</h2><ul>\n<li>Você vai notar uma barra inferior assim que entrar em uma sessão do tmux, nela você vai ver o nome da sua sessão, suas janelas, seu usuário@grupo, horário e data atual</li>\n<li>Se você quiser sair do tmux, basta digitar <code>exit</code> no terminal</li>\n</ul>\n<h2 id=\"Paineis\"><a href=\"#Paineis\" class=\"headerlink\" title=\"Painéis\"></a>Painéis</h2><p>Vamos começar a brincar. Aperte <code>prefix + %</code> - coloque seu prefixo no lugar de <code>prefix</code> e você pode apertar <code>Shift + 5</code> pra produzir o <code>%</code>.<br>Você vai dividir sua tela em duas partes. Quer ir para o outro painel? <code>prefix + o</code> é a solução.</p>\n<ul>\n<li><code>prefix + %</code> divide sua tela horizontalmente</li>\n<li><code>prefix + &quot;</code> (aspas duplas) divide sua tela verticalmente</li>\n<li><code>prefix + o</code> te coloca no próximo painel</li>\n<li><code>exit</code> sai do terminal(consequentemente, da sessão do tmux)</li>\n</ul>\n<h1 id=\"Ate-a-proxima\"><a href=\"#Ate-a-proxima\" class=\"headerlink\" title=\"Até a próxima!\"></a>Até a próxima!</h1><p>Isso foi só por hoje. No próximo artigo vou falar mais sobre as janelas do tmux, mas isso já é o suficiente pra você aprender a brincar com o tmux.</p>\n<p>tmux no Github: <a href=\"https://github.com/tmux/tmux\" target=\"_blank\" rel=\"noopener\">https://github.com/tmux/tmux</a><br>Wiki to tmux: <a href=\"https://github.com/tmux/tmux/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/tmux/tmux/wiki</a><br>awesome-tmux: <a href=\"https://github.com/rothgar/awesome-tmux\" target=\"_blank\" rel=\"noopener\">https://github.com/rothgar/awesome-tmux</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"tmux-o-que-e\"><a href=\"#tmux-o-que-e\" class=\"headerlink\" title=\"tmux - o que é\"></a>tmux - o que é</h1><p>Tmux é uma ferramenta que basicamente te dá o controle de sessões, janelas e painéis dentro de um único terminal. Sim, você pode voltar pro bom e velho <code>xterm</code> e configurar como quiser. Segundo o Wiki deles:</p>\n<blockquote><p>tmux is a “terminal multiplexer”, it enables a number of terminals (or windows) to be accessed and controlled from a single terminal. tmux is intended to be a simple, modern, BSD-licensed alternative to programs such as GNU screen</p>\n</blockquote>\n<p><img src=\"tmux.gif\" alt=\"\"></p>\n<h1 id=\"Instalando\"><a href=\"#Instalando\" class=\"headerlink\" title=\"Instalando\"></a>Instalando</h1><p>Provavelmente o tmux é suportado pelo seu gerenciador de pacotes - não sei como estão as coisas pra Windows.</p>\n<p>Usando o Pacman: <code>sudo pacman -S tmux</code><br>Usando o apt-get: <code>sudo apt-get install tmux</code></p>\n<h1 id=\"Basico\"><a href=\"#Basico\" class=\"headerlink\" title=\"Básico\"></a>Básico</h1><p>Para começar o tmux, você precisa criar uma sessão. Você tem duas formas, apenas digitando <code>tmux</code> no terminal(criando uma sessão chamada 0), ou <code>tmux new -s &lt;nome-da-sessao&gt;</code></p>\n<p>Assim que você entrar no tmux, estará dentro de uma sessão, no primeiro painel e na primeira janela.</p>\n<p>Para acionar qualquer coisa do tmux, você precisa apertar o prefixo primeiro, para dizer ao tmux que está acionando um comando. O prefixo padrão é <code>CTRL + b</code>.</p>\n<blockquote><p>Vou usar o acento <code>^</code> para indicar o <code>CTRL</code>. Por exemplo, <code>^b</code> é o mesmo que <code>CTRL + b</code>. Lembre-se que todos os comandos do tmux <em>são</em> sensivos a caixa alta e baixa. Então, <code>^b</code> não é o mesmo que <code>^B</code>. Todo conteúdo sobre tmux que você pesquisar, vai usar essa notação.</p>\n</blockquote>\n<h2 id=\"Alguns-pontos-sobre-o-tmux\"><a href=\"#Alguns-pontos-sobre-o-tmux\" class=\"headerlink\" title=\"Alguns pontos sobre o tmux:\"></a>Alguns pontos sobre o tmux:</h2><ul>\n<li>Você vai notar uma barra inferior assim que entrar em uma sessão do tmux, nela você vai ver o nome da sua sessão, suas janelas, seu usuário@grupo, horário e data atual</li>\n<li>Se você quiser sair do tmux, basta digitar <code>exit</code> no terminal</li>\n</ul>\n<h2 id=\"Paineis\"><a href=\"#Paineis\" class=\"headerlink\" title=\"Painéis\"></a>Painéis</h2><p>Vamos começar a brincar. Aperte <code>prefix + %</code> - coloque seu prefixo no lugar de <code>prefix</code> e você pode apertar <code>Shift + 5</code> pra produzir o <code>%</code>.<br>Você vai dividir sua tela em duas partes. Quer ir para o outro painel? <code>prefix + o</code> é a solução.</p>\n<ul>\n<li><code>prefix + %</code> divide sua tela horizontalmente</li>\n<li><code>prefix + &quot;</code> (aspas duplas) divide sua tela verticalmente</li>\n<li><code>prefix + o</code> te coloca no próximo painel</li>\n<li><code>exit</code> sai do terminal(consequentemente, da sessão do tmux)</li>\n</ul>\n<h1 id=\"Ate-a-proxima\"><a href=\"#Ate-a-proxima\" class=\"headerlink\" title=\"Até a próxima!\"></a>Até a próxima!</h1><p>Isso foi só por hoje. No próximo artigo vou falar mais sobre as janelas do tmux, mas isso já é o suficiente pra você aprender a brincar com o tmux.</p>\n<p>tmux no Github: <a href=\"https://github.com/tmux/tmux\" target=\"_blank\" rel=\"noopener\">https://github.com/tmux/tmux</a><br>Wiki to tmux: <a href=\"https://github.com/tmux/tmux/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/tmux/tmux/wiki</a><br>awesome-tmux: <a href=\"https://github.com/rothgar/awesome-tmux\" target=\"_blank\" rel=\"noopener\">https://github.com/rothgar/awesome-tmux</a></p>\n"},{"title":"Terminais são legais v2: trabalhando com arquivos e pastas","date":"2018-06-10T23:14:57.000Z","description":"Aprendendo a mexer com pastas e arquivos","thumbnail":"files.jpg","_content":"\n![](files.jpg)\n\nAnteriormente dei [uma breve introdução sobre o terminal](https://hernands.com/terminais-sao-legais-como-comecar-a-usar/) e falei também sobre [como ler e filtrar coisas](https://hernands.com/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/). Hoje vou abordar um pouco mais sobre arquivos e pastas.\n\nAntes de tudo, recomendo você executar o seguinte comando: `cd $HOME`. Isso irá te levar até sua pasta pessoal, então criaremos tudo a partir dela.\n\n## Comandos básicos\n\nVou abordar os seguintes comandos:\n\n- `ls`\n- `cd`\n- `mkdir`\n- `mv`\n- `rm`\n- `touch`\n- `cp`\n\nJá falei aqui sobre alguns deles, mas vou me aprofundar mais dessa vez, vamos lá:\n\n### Um rápido lembrete\n\nNo terminal, você navega entre pastas, e a pasta atual é sempre denotada antes do *$* que aparece, como aqui temos o nome do meu usuário, meu grupo e minha pasta atual:\n\n![](/Terminais-sao-legais-como-comecar-a-usar/user-terminal.png)\n\nOk, eu sei que é um pouco repetitivo, mas quando formatei não tive ideia de qual nome colocar, então ficou nisso mesmo hehe.\n\nPara se referir à um nível superior à sua pasta atual, use `../`. E para sua pasta atual, use apenas o `./`. Para se referir à raiz do sistema, comece com uma `/`.\n\n## Criando pastas e arquivos\n\nComo disse em outro artigo, para criar arquivos, podemos usar o comando `touch`, passando o nome completo do arquivo. Seja na mesma pasta, ou em outro caminho, ele irá fazer seu trabalho. Você também pode mudar o horário de acesso ao arquivo, usando o parâmetro `-a`, e pode definir o tempo com `-d` ou `--date=STRING`. Bom, eu normalmente uso ele apenas para criar arquivos, embora você possa também alterar a data de modificação e abertura.\n\nMas e se você quiser criar uma pasta? Use o `mkdir`, passando o caminho desejado, como em `mkdir teste`. Irá criar uma pasta chamada `teste` onde estiver. Para verificar, execute `ls -l`, assim você irá listar o conteúdo da pasta atual, veja se o que criou está lá. Se quiser abrir o gerenciador de arquivos e navegar até sua pasta pessoa, verá que ela estará lá.\n\nVocê também pode criar várias pastas, se passar um nome em seguida do outro, como `mkdir teste teste2 teste3` - o mesmo serve para o `touch`\n\nE se quiser criar uma pasta dentro de outra? Bom, aqui temos duas formas possíveis: usando uma combinação de `mkdir` com `cd`, criando uma pasta, entrando nela, criando outra e assim consequentemente ou...\n\nUsando o parâmetro `-p`. Ele faz todo esse serviço pra você, se executar `mkdir -p teste/com/mkdir`, verá que ele criou a pasta `teste`, dentro dela, `com`, e dentro dela também, `mkdir`.\n\nAté aqui você criou várias pastas, e acredito que não precisará delas mais. Para apagá-las, use o comando `rm -r PASTA`, como em `mkdir -r teste`. Ele irá apagar a pasta `teste` e tudo que estiver dentro dela.\n\n## Copiando e movendos arquivos e pastas\n\nMas digamos que agora você precise copiar alguns arquivos de uma pasta para outra, ou quem sabe, uma pasta inteira para outro lugar?\n\nPode usar o comando `cp`. Ele simplesmente copia algo e envia para outro lugar. Funciona assim: `cp ORIGEM DESTINO`\n\nPrimeiro, vamos criar o arquivo `teste.txt` e a pasta `textos` com `touch teste.txt` e `mkdir textos`.\n\nVamos copiar o arquivo para dentro da pasta, executando `cp teste.txt textos/`\n\nAlguns pontos:\n\n- Você percebeu que aqui, eu passei o nome do arquivo diretamente? Eu poderia também ter feito `./teste.txt`, caso o caminho absoluto seja omitido, o terminal irá considerar que o arquivo está na mesma pasta que você.\n- Aqui eu usei `textos/`, porque também, o terminal considerou que a pasta está na mesma que eu estou.\n\nAgora vamos dar uma olhada dentro de `textos` com `ls textos/`. Veja que o mesmo arquivo está lá. Como foi uma *cópia*, o arquivo existe em ambos lugares, e são iguais(agora, pois não alteramos nenhum deles). Se você apagar o arquivo inicial, a cópia ainda estará lá, pois não estão ligados de nenhuma forma.\n\nJá pensou se um dia você precisar mover mais de um arquivo? Talvez terá que executar o comando várias vezes, mudando apenas o nome do arquivo de origem...ou não. \n\nCaso os arquivos de origem estejam na mesma pasta, você pode fazer algo como `cp ./* textos/`, para selecionar todos os arquivos dentro da pasta atual, ou caso queira especificar apenas alguns de uma extensão específica, pode fazer `cp ./*.jpg textos/`, selecionando apenas aqueles que sejam do formato .jpg. Você também pode fazer coisas como `cp teste* textos/`, selecionando tudo que comece com a palavra `teste`.\n\nVocê também pode passar várias origens, o último caminho será usado como destino.\n\nCaso esteja copiando pastas, pode usar o parâmetro `-r`, para copiar pastas recursivamente.\n\nOk, mas agora precisamos *mover* o arquivo. Primeiro, remova a cópia de `textos/`, usando o comando `rm`: `rm textos/teste.txt`.\n\nPara mover arquivos, você pode usar o comando `mv`, ele funciona exatamente como o `cp`. A diferença é que ele *move* arquivos, então o arquivo existirá apenas no destino.\n\nExecute `mv teste.txt textos/` e veja que o arquivo não existe mais, apenas dentro de `textos/`.\n\nOutra grande utilidade para o comando `mv`, é a capacidade de *renomear* as coisas. Você simplesmente move o arquivo para o mesmo lugar, com um nome diferente. Execute `cd textos/`, para entrar na pasta e depois faça `mv teste.txt starwars.txt` e use `ls` para ver o conteúdo da pasta, veja que não há mais `teste.txt`, apenas `starwars.txt`. O mesmo pode ser feito com pastas =]\n\n# Até mais!\n\nBom, até aqui, você aprendeu como copiar, mover, renomear, remover e criar pastas e arquivos, também a navegar entre eles. Logo falarei mais sobre permissões de arquivos e outras coisas bem legais.\n\nSe tiver alguma dúvida, deixe nos comentários aí!\n\nAté a próxima =]\n","source":"_posts/Terminais-sao-legais-v2-pastas.md","raw":"---\ntitle: 'Terminais são legais v2: trabalhando com arquivos e pastas'\ndate: 2018-06-10 20:14:57\ndescription: 'Aprendendo a mexer com pastas e arquivos'\nthumbnail: files.jpg\ntags:\n---\n\n![](files.jpg)\n\nAnteriormente dei [uma breve introdução sobre o terminal](https://hernands.com/terminais-sao-legais-como-comecar-a-usar/) e falei também sobre [como ler e filtrar coisas](https://hernands.com/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/). Hoje vou abordar um pouco mais sobre arquivos e pastas.\n\nAntes de tudo, recomendo você executar o seguinte comando: `cd $HOME`. Isso irá te levar até sua pasta pessoal, então criaremos tudo a partir dela.\n\n## Comandos básicos\n\nVou abordar os seguintes comandos:\n\n- `ls`\n- `cd`\n- `mkdir`\n- `mv`\n- `rm`\n- `touch`\n- `cp`\n\nJá falei aqui sobre alguns deles, mas vou me aprofundar mais dessa vez, vamos lá:\n\n### Um rápido lembrete\n\nNo terminal, você navega entre pastas, e a pasta atual é sempre denotada antes do *$* que aparece, como aqui temos o nome do meu usuário, meu grupo e minha pasta atual:\n\n![](/Terminais-sao-legais-como-comecar-a-usar/user-terminal.png)\n\nOk, eu sei que é um pouco repetitivo, mas quando formatei não tive ideia de qual nome colocar, então ficou nisso mesmo hehe.\n\nPara se referir à um nível superior à sua pasta atual, use `../`. E para sua pasta atual, use apenas o `./`. Para se referir à raiz do sistema, comece com uma `/`.\n\n## Criando pastas e arquivos\n\nComo disse em outro artigo, para criar arquivos, podemos usar o comando `touch`, passando o nome completo do arquivo. Seja na mesma pasta, ou em outro caminho, ele irá fazer seu trabalho. Você também pode mudar o horário de acesso ao arquivo, usando o parâmetro `-a`, e pode definir o tempo com `-d` ou `--date=STRING`. Bom, eu normalmente uso ele apenas para criar arquivos, embora você possa também alterar a data de modificação e abertura.\n\nMas e se você quiser criar uma pasta? Use o `mkdir`, passando o caminho desejado, como em `mkdir teste`. Irá criar uma pasta chamada `teste` onde estiver. Para verificar, execute `ls -l`, assim você irá listar o conteúdo da pasta atual, veja se o que criou está lá. Se quiser abrir o gerenciador de arquivos e navegar até sua pasta pessoa, verá que ela estará lá.\n\nVocê também pode criar várias pastas, se passar um nome em seguida do outro, como `mkdir teste teste2 teste3` - o mesmo serve para o `touch`\n\nE se quiser criar uma pasta dentro de outra? Bom, aqui temos duas formas possíveis: usando uma combinação de `mkdir` com `cd`, criando uma pasta, entrando nela, criando outra e assim consequentemente ou...\n\nUsando o parâmetro `-p`. Ele faz todo esse serviço pra você, se executar `mkdir -p teste/com/mkdir`, verá que ele criou a pasta `teste`, dentro dela, `com`, e dentro dela também, `mkdir`.\n\nAté aqui você criou várias pastas, e acredito que não precisará delas mais. Para apagá-las, use o comando `rm -r PASTA`, como em `mkdir -r teste`. Ele irá apagar a pasta `teste` e tudo que estiver dentro dela.\n\n## Copiando e movendos arquivos e pastas\n\nMas digamos que agora você precise copiar alguns arquivos de uma pasta para outra, ou quem sabe, uma pasta inteira para outro lugar?\n\nPode usar o comando `cp`. Ele simplesmente copia algo e envia para outro lugar. Funciona assim: `cp ORIGEM DESTINO`\n\nPrimeiro, vamos criar o arquivo `teste.txt` e a pasta `textos` com `touch teste.txt` e `mkdir textos`.\n\nVamos copiar o arquivo para dentro da pasta, executando `cp teste.txt textos/`\n\nAlguns pontos:\n\n- Você percebeu que aqui, eu passei o nome do arquivo diretamente? Eu poderia também ter feito `./teste.txt`, caso o caminho absoluto seja omitido, o terminal irá considerar que o arquivo está na mesma pasta que você.\n- Aqui eu usei `textos/`, porque também, o terminal considerou que a pasta está na mesma que eu estou.\n\nAgora vamos dar uma olhada dentro de `textos` com `ls textos/`. Veja que o mesmo arquivo está lá. Como foi uma *cópia*, o arquivo existe em ambos lugares, e são iguais(agora, pois não alteramos nenhum deles). Se você apagar o arquivo inicial, a cópia ainda estará lá, pois não estão ligados de nenhuma forma.\n\nJá pensou se um dia você precisar mover mais de um arquivo? Talvez terá que executar o comando várias vezes, mudando apenas o nome do arquivo de origem...ou não. \n\nCaso os arquivos de origem estejam na mesma pasta, você pode fazer algo como `cp ./* textos/`, para selecionar todos os arquivos dentro da pasta atual, ou caso queira especificar apenas alguns de uma extensão específica, pode fazer `cp ./*.jpg textos/`, selecionando apenas aqueles que sejam do formato .jpg. Você também pode fazer coisas como `cp teste* textos/`, selecionando tudo que comece com a palavra `teste`.\n\nVocê também pode passar várias origens, o último caminho será usado como destino.\n\nCaso esteja copiando pastas, pode usar o parâmetro `-r`, para copiar pastas recursivamente.\n\nOk, mas agora precisamos *mover* o arquivo. Primeiro, remova a cópia de `textos/`, usando o comando `rm`: `rm textos/teste.txt`.\n\nPara mover arquivos, você pode usar o comando `mv`, ele funciona exatamente como o `cp`. A diferença é que ele *move* arquivos, então o arquivo existirá apenas no destino.\n\nExecute `mv teste.txt textos/` e veja que o arquivo não existe mais, apenas dentro de `textos/`.\n\nOutra grande utilidade para o comando `mv`, é a capacidade de *renomear* as coisas. Você simplesmente move o arquivo para o mesmo lugar, com um nome diferente. Execute `cd textos/`, para entrar na pasta e depois faça `mv teste.txt starwars.txt` e use `ls` para ver o conteúdo da pasta, veja que não há mais `teste.txt`, apenas `starwars.txt`. O mesmo pode ser feito com pastas =]\n\n# Até mais!\n\nBom, até aqui, você aprendeu como copiar, mover, renomear, remover e criar pastas e arquivos, também a navegar entre eles. Logo falarei mais sobre permissões de arquivos e outras coisas bem legais.\n\nSe tiver alguma dúvida, deixe nos comentários aí!\n\nAté a próxima =]\n","slug":"Terminais-sao-legais-v2-pastas","published":1,"updated":"2018-06-10T23:58:43.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmf456y000094grpy1vdhhab","content":"<p><img src=\"files.jpg\" alt=\"\"></p>\n<p>Anteriormente dei <a href=\"https://hernands.com/terminais-sao-legais-como-comecar-a-usar/\" target=\"_blank\" rel=\"noopener\">uma breve introdução sobre o terminal</a> e falei também sobre <a href=\"https://hernands.com/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/\" target=\"_blank\" rel=\"noopener\">como ler e filtrar coisas</a>. Hoje vou abordar um pouco mais sobre arquivos e pastas.</p>\n<p>Antes de tudo, recomendo você executar o seguinte comando: <code>cd $HOME</code>. Isso irá te levar até sua pasta pessoal, então criaremos tudo a partir dela.</p>\n<h2 id=\"Comandos-basicos\"><a href=\"#Comandos-basicos\" class=\"headerlink\" title=\"Comandos básicos\"></a>Comandos básicos</h2><p>Vou abordar os seguintes comandos:</p>\n<ul>\n<li><code>ls</code></li>\n<li><code>cd</code></li>\n<li><code>mkdir</code></li>\n<li><code>mv</code></li>\n<li><code>rm</code></li>\n<li><code>touch</code></li>\n<li><code>cp</code></li>\n</ul>\n<p>Já falei aqui sobre alguns deles, mas vou me aprofundar mais dessa vez, vamos lá:</p>\n<h3 id=\"Um-rapido-lembrete\"><a href=\"#Um-rapido-lembrete\" class=\"headerlink\" title=\"Um rápido lembrete\"></a>Um rápido lembrete</h3><p>No terminal, você navega entre pastas, e a pasta atual é sempre denotada antes do <em>$</em> que aparece, como aqui temos o nome do meu usuário, meu grupo e minha pasta atual:</p>\n<p><img src=\"/Terminais-sao-legais-como-comecar-a-usar/user-terminal.png\" alt=\"\"></p>\n<p>Ok, eu sei que é um pouco repetitivo, mas quando formatei não tive ideia de qual nome colocar, então ficou nisso mesmo hehe.</p>\n<p>Para se referir à um nível superior à sua pasta atual, use <code>../</code>. E para sua pasta atual, use apenas o <code>./</code>. Para se referir à raiz do sistema, comece com uma <code>/</code>.</p>\n<h2 id=\"Criando-pastas-e-arquivos\"><a href=\"#Criando-pastas-e-arquivos\" class=\"headerlink\" title=\"Criando pastas e arquivos\"></a>Criando pastas e arquivos</h2><p>Como disse em outro artigo, para criar arquivos, podemos usar o comando <code>touch</code>, passando o nome completo do arquivo. Seja na mesma pasta, ou em outro caminho, ele irá fazer seu trabalho. Você também pode mudar o horário de acesso ao arquivo, usando o parâmetro <code>-a</code>, e pode definir o tempo com <code>-d</code> ou <code>--date=STRING</code>. Bom, eu normalmente uso ele apenas para criar arquivos, embora você possa também alterar a data de modificação e abertura.</p>\n<p>Mas e se você quiser criar uma pasta? Use o <code>mkdir</code>, passando o caminho desejado, como em <code>mkdir teste</code>. Irá criar uma pasta chamada <code>teste</code> onde estiver. Para verificar, execute <code>ls -l</code>, assim você irá listar o conteúdo da pasta atual, veja se o que criou está lá. Se quiser abrir o gerenciador de arquivos e navegar até sua pasta pessoa, verá que ela estará lá.</p>\n<p>Você também pode criar várias pastas, se passar um nome em seguida do outro, como <code>mkdir teste teste2 teste3</code> - o mesmo serve para o <code>touch</code></p>\n<p>E se quiser criar uma pasta dentro de outra? Bom, aqui temos duas formas possíveis: usando uma combinação de <code>mkdir</code> com <code>cd</code>, criando uma pasta, entrando nela, criando outra e assim consequentemente ou…</p>\n<p>Usando o parâmetro <code>-p</code>. Ele faz todo esse serviço pra você, se executar <code>mkdir -p teste/com/mkdir</code>, verá que ele criou a pasta <code>teste</code>, dentro dela, <code>com</code>, e dentro dela também, <code>mkdir</code>.</p>\n<p>Até aqui você criou várias pastas, e acredito que não precisará delas mais. Para apagá-las, use o comando <code>rm -r PASTA</code>, como em <code>mkdir -r teste</code>. Ele irá apagar a pasta <code>teste</code> e tudo que estiver dentro dela.</p>\n<h2 id=\"Copiando-e-movendos-arquivos-e-pastas\"><a href=\"#Copiando-e-movendos-arquivos-e-pastas\" class=\"headerlink\" title=\"Copiando e movendos arquivos e pastas\"></a>Copiando e movendos arquivos e pastas</h2><p>Mas digamos que agora você precise copiar alguns arquivos de uma pasta para outra, ou quem sabe, uma pasta inteira para outro lugar?</p>\n<p>Pode usar o comando <code>cp</code>. Ele simplesmente copia algo e envia para outro lugar. Funciona assim: <code>cp ORIGEM DESTINO</code></p>\n<p>Primeiro, vamos criar o arquivo <code>teste.txt</code> e a pasta <code>textos</code> com <code>touch teste.txt</code> e <code>mkdir textos</code>.</p>\n<p>Vamos copiar o arquivo para dentro da pasta, executando <code>cp teste.txt textos/</code></p>\n<p>Alguns pontos:</p>\n<ul>\n<li>Você percebeu que aqui, eu passei o nome do arquivo diretamente? Eu poderia também ter feito <code>./teste.txt</code>, caso o caminho absoluto seja omitido, o terminal irá considerar que o arquivo está na mesma pasta que você.</li>\n<li>Aqui eu usei <code>textos/</code>, porque também, o terminal considerou que a pasta está na mesma que eu estou.</li>\n</ul>\n<p>Agora vamos dar uma olhada dentro de <code>textos</code> com <code>ls textos/</code>. Veja que o mesmo arquivo está lá. Como foi uma <em>cópia</em>, o arquivo existe em ambos lugares, e são iguais(agora, pois não alteramos nenhum deles). Se você apagar o arquivo inicial, a cópia ainda estará lá, pois não estão ligados de nenhuma forma.</p>\n<p>Já pensou se um dia você precisar mover mais de um arquivo? Talvez terá que executar o comando várias vezes, mudando apenas o nome do arquivo de origem…ou não. </p>\n<p>Caso os arquivos de origem estejam na mesma pasta, você pode fazer algo como <code>cp ./* textos/</code>, para selecionar todos os arquivos dentro da pasta atual, ou caso queira especificar apenas alguns de uma extensão específica, pode fazer <code>cp ./*.jpg textos/</code>, selecionando apenas aqueles que sejam do formato .jpg. Você também pode fazer coisas como <code>cp teste* textos/</code>, selecionando tudo que comece com a palavra <code>teste</code>.</p>\n<p>Você também pode passar várias origens, o último caminho será usado como destino.</p>\n<p>Caso esteja copiando pastas, pode usar o parâmetro <code>-r</code>, para copiar pastas recursivamente.</p>\n<p>Ok, mas agora precisamos <em>mover</em> o arquivo. Primeiro, remova a cópia de <code>textos/</code>, usando o comando <code>rm</code>: <code>rm textos/teste.txt</code>.</p>\n<p>Para mover arquivos, você pode usar o comando <code>mv</code>, ele funciona exatamente como o <code>cp</code>. A diferença é que ele <em>move</em> arquivos, então o arquivo existirá apenas no destino.</p>\n<p>Execute <code>mv teste.txt textos/</code> e veja que o arquivo não existe mais, apenas dentro de <code>textos/</code>.</p>\n<p>Outra grande utilidade para o comando <code>mv</code>, é a capacidade de <em>renomear</em> as coisas. Você simplesmente move o arquivo para o mesmo lugar, com um nome diferente. Execute <code>cd textos/</code>, para entrar na pasta e depois faça <code>mv teste.txt starwars.txt</code> e use <code>ls</code> para ver o conteúdo da pasta, veja que não há mais <code>teste.txt</code>, apenas <code>starwars.txt</code>. O mesmo pode ser feito com pastas =]</p>\n<h1 id=\"Ate-mais\"><a href=\"#Ate-mais\" class=\"headerlink\" title=\"Até mais!\"></a>Até mais!</h1><p>Bom, até aqui, você aprendeu como copiar, mover, renomear, remover e criar pastas e arquivos, também a navegar entre eles. Logo falarei mais sobre permissões de arquivos e outras coisas bem legais.</p>\n<p>Se tiver alguma dúvida, deixe nos comentários aí!</p>\n<p>Até a próxima =]</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"files.jpg\" alt=\"\"></p>\n<p>Anteriormente dei <a href=\"https://hernands.com/terminais-sao-legais-como-comecar-a-usar/\" target=\"_blank\" rel=\"noopener\">uma breve introdução sobre o terminal</a> e falei também sobre <a href=\"https://hernands.com/terminais-sao-legais-v1-lendo-e-filtrando-arquivos/\" target=\"_blank\" rel=\"noopener\">como ler e filtrar coisas</a>. Hoje vou abordar um pouco mais sobre arquivos e pastas.</p>\n<p>Antes de tudo, recomendo você executar o seguinte comando: <code>cd $HOME</code>. Isso irá te levar até sua pasta pessoal, então criaremos tudo a partir dela.</p>\n<h2 id=\"Comandos-basicos\"><a href=\"#Comandos-basicos\" class=\"headerlink\" title=\"Comandos básicos\"></a>Comandos básicos</h2><p>Vou abordar os seguintes comandos:</p>\n<ul>\n<li><code>ls</code></li>\n<li><code>cd</code></li>\n<li><code>mkdir</code></li>\n<li><code>mv</code></li>\n<li><code>rm</code></li>\n<li><code>touch</code></li>\n<li><code>cp</code></li>\n</ul>\n<p>Já falei aqui sobre alguns deles, mas vou me aprofundar mais dessa vez, vamos lá:</p>\n<h3 id=\"Um-rapido-lembrete\"><a href=\"#Um-rapido-lembrete\" class=\"headerlink\" title=\"Um rápido lembrete\"></a>Um rápido lembrete</h3><p>No terminal, você navega entre pastas, e a pasta atual é sempre denotada antes do <em>$</em> que aparece, como aqui temos o nome do meu usuário, meu grupo e minha pasta atual:</p>\n<p><img src=\"/Terminais-sao-legais-como-comecar-a-usar/user-terminal.png\" alt=\"\"></p>\n<p>Ok, eu sei que é um pouco repetitivo, mas quando formatei não tive ideia de qual nome colocar, então ficou nisso mesmo hehe.</p>\n<p>Para se referir à um nível superior à sua pasta atual, use <code>../</code>. E para sua pasta atual, use apenas o <code>./</code>. Para se referir à raiz do sistema, comece com uma <code>/</code>.</p>\n<h2 id=\"Criando-pastas-e-arquivos\"><a href=\"#Criando-pastas-e-arquivos\" class=\"headerlink\" title=\"Criando pastas e arquivos\"></a>Criando pastas e arquivos</h2><p>Como disse em outro artigo, para criar arquivos, podemos usar o comando <code>touch</code>, passando o nome completo do arquivo. Seja na mesma pasta, ou em outro caminho, ele irá fazer seu trabalho. Você também pode mudar o horário de acesso ao arquivo, usando o parâmetro <code>-a</code>, e pode definir o tempo com <code>-d</code> ou <code>--date=STRING</code>. Bom, eu normalmente uso ele apenas para criar arquivos, embora você possa também alterar a data de modificação e abertura.</p>\n<p>Mas e se você quiser criar uma pasta? Use o <code>mkdir</code>, passando o caminho desejado, como em <code>mkdir teste</code>. Irá criar uma pasta chamada <code>teste</code> onde estiver. Para verificar, execute <code>ls -l</code>, assim você irá listar o conteúdo da pasta atual, veja se o que criou está lá. Se quiser abrir o gerenciador de arquivos e navegar até sua pasta pessoa, verá que ela estará lá.</p>\n<p>Você também pode criar várias pastas, se passar um nome em seguida do outro, como <code>mkdir teste teste2 teste3</code> - o mesmo serve para o <code>touch</code></p>\n<p>E se quiser criar uma pasta dentro de outra? Bom, aqui temos duas formas possíveis: usando uma combinação de <code>mkdir</code> com <code>cd</code>, criando uma pasta, entrando nela, criando outra e assim consequentemente ou…</p>\n<p>Usando o parâmetro <code>-p</code>. Ele faz todo esse serviço pra você, se executar <code>mkdir -p teste/com/mkdir</code>, verá que ele criou a pasta <code>teste</code>, dentro dela, <code>com</code>, e dentro dela também, <code>mkdir</code>.</p>\n<p>Até aqui você criou várias pastas, e acredito que não precisará delas mais. Para apagá-las, use o comando <code>rm -r PASTA</code>, como em <code>mkdir -r teste</code>. Ele irá apagar a pasta <code>teste</code> e tudo que estiver dentro dela.</p>\n<h2 id=\"Copiando-e-movendos-arquivos-e-pastas\"><a href=\"#Copiando-e-movendos-arquivos-e-pastas\" class=\"headerlink\" title=\"Copiando e movendos arquivos e pastas\"></a>Copiando e movendos arquivos e pastas</h2><p>Mas digamos que agora você precise copiar alguns arquivos de uma pasta para outra, ou quem sabe, uma pasta inteira para outro lugar?</p>\n<p>Pode usar o comando <code>cp</code>. Ele simplesmente copia algo e envia para outro lugar. Funciona assim: <code>cp ORIGEM DESTINO</code></p>\n<p>Primeiro, vamos criar o arquivo <code>teste.txt</code> e a pasta <code>textos</code> com <code>touch teste.txt</code> e <code>mkdir textos</code>.</p>\n<p>Vamos copiar o arquivo para dentro da pasta, executando <code>cp teste.txt textos/</code></p>\n<p>Alguns pontos:</p>\n<ul>\n<li>Você percebeu que aqui, eu passei o nome do arquivo diretamente? Eu poderia também ter feito <code>./teste.txt</code>, caso o caminho absoluto seja omitido, o terminal irá considerar que o arquivo está na mesma pasta que você.</li>\n<li>Aqui eu usei <code>textos/</code>, porque também, o terminal considerou que a pasta está na mesma que eu estou.</li>\n</ul>\n<p>Agora vamos dar uma olhada dentro de <code>textos</code> com <code>ls textos/</code>. Veja que o mesmo arquivo está lá. Como foi uma <em>cópia</em>, o arquivo existe em ambos lugares, e são iguais(agora, pois não alteramos nenhum deles). Se você apagar o arquivo inicial, a cópia ainda estará lá, pois não estão ligados de nenhuma forma.</p>\n<p>Já pensou se um dia você precisar mover mais de um arquivo? Talvez terá que executar o comando várias vezes, mudando apenas o nome do arquivo de origem…ou não. </p>\n<p>Caso os arquivos de origem estejam na mesma pasta, você pode fazer algo como <code>cp ./* textos/</code>, para selecionar todos os arquivos dentro da pasta atual, ou caso queira especificar apenas alguns de uma extensão específica, pode fazer <code>cp ./*.jpg textos/</code>, selecionando apenas aqueles que sejam do formato .jpg. Você também pode fazer coisas como <code>cp teste* textos/</code>, selecionando tudo que comece com a palavra <code>teste</code>.</p>\n<p>Você também pode passar várias origens, o último caminho será usado como destino.</p>\n<p>Caso esteja copiando pastas, pode usar o parâmetro <code>-r</code>, para copiar pastas recursivamente.</p>\n<p>Ok, mas agora precisamos <em>mover</em> o arquivo. Primeiro, remova a cópia de <code>textos/</code>, usando o comando <code>rm</code>: <code>rm textos/teste.txt</code>.</p>\n<p>Para mover arquivos, você pode usar o comando <code>mv</code>, ele funciona exatamente como o <code>cp</code>. A diferença é que ele <em>move</em> arquivos, então o arquivo existirá apenas no destino.</p>\n<p>Execute <code>mv teste.txt textos/</code> e veja que o arquivo não existe mais, apenas dentro de <code>textos/</code>.</p>\n<p>Outra grande utilidade para o comando <code>mv</code>, é a capacidade de <em>renomear</em> as coisas. Você simplesmente move o arquivo para o mesmo lugar, com um nome diferente. Execute <code>cd textos/</code>, para entrar na pasta e depois faça <code>mv teste.txt starwars.txt</code> e use <code>ls</code> para ver o conteúdo da pasta, veja que não há mais <code>teste.txt</code>, apenas <code>starwars.txt</code>. O mesmo pode ser feito com pastas =]</p>\n<h1 id=\"Ate-mais\"><a href=\"#Ate-mais\" class=\"headerlink\" title=\"Até mais!\"></a>Até mais!</h1><p>Bom, até aqui, você aprendeu como copiar, mover, renomear, remover e criar pastas e arquivos, também a navegar entre eles. Logo falarei mais sobre permissões de arquivos e outras coisas bem legais.</p>\n<p>Se tiver alguma dúvida, deixe nos comentários aí!</p>\n<p>Até a próxima =]</p>\n"},{"title":"Terminais são legais: como começar a usar","description":"Todo mundo talvez precise usar o terminal uma hora ou outra, e não é tão difícil quanto parece!","thumbnail":"learning.jpg","date":"2018-06-02T19:47:14.000Z","_content":"\n![](learning.jpg)\n\n# Terminal, o que é?\n\nBasicamente, uma janela onde você escreve `comandos` para o computador executar. Esses comandos podem ler um arquivo, criar pastas, executar scripts, fazer café e muito mais. (é sério, da pra fazer café)\n\n# Por onde começar?\n\nBom, se você já programa, trabalha com PHP, NodeJS, Python, etc, talvez já tenha usado o terminal algumas vezes, copiando e colando comandos da documentação e/ou do StackOverflow. Mas hoje vou mostrar alguns comandos básicos e simples pra te ajudar no dia a dia.\n\nSe você é novo na área, acabou de entrar e etc, eu sugiro você escutar [o podcast QuebraDev](http://quebradev.com.br/) pra te ajudar. Você vai entender melhor depois de escutar os primeiros episódios =]\n\n## Introdução\n\nPara começar, abra o terminal. Vou considerar que está no Linux ou MAC.\n\nAssim que você abrir o terminal, estará em uma pasta, normalmente vai aparecer logo depois do nome do seu usuário e do seu grupo atual, como na imagem:\n\n![](user-terminal.png)\n\nAqui é tudo muito simples: você sabe seu usuário atual, grupo, pasta e tem um espaço pra digitar os comandos, mais nada.\n\nVocê só precisa abrir a janela, digitar seu comando e apertar `Enter` para executar.\n\nNão é difícil, certo? Você só precisa ser cuidadoso com o que vai executar.\n\n## Pastas, caminhos e etc\n\nEssa é a parte crucial de se usar um terminal: você precisa entender como as coisas são ordenadas. Aqui você tem pastas, arquivos e _symlinks_(que são como atalhos comuns).\n\nVou citar aqui alguns atalhos:\n\n- Quando você ver `.` significa que está se referindo à pasta atual, independente de onde estiver. Por exemplo: `./arquivo.txt` significa que estou me referindo ao arquivo `arquivo.txt` na pasta atual.\n- Quando ver `..`, significa que está se referindo à pasta *superior*. Como em `../`.\n- Quando você ver qualquer *caminho* começando com `/`, é porque aquele caminho *começa* da pasta raiz do sistema.\n- Sempre quando você precisar definir caminhos, isto é, dizer onde está cada coisa, vai usar a `/` como separador. No Windows você usa `\\`, no Linux e OSX, usa `/`. Como `./uma/pasta/aqui`.\n\n\n## Variáveis e _piping_\n\nDentro do terminal - você pode ver alguém falar do terminal como `shell`, `bash`, são a mesma coisa -, você pode ter variáveis. É onde você guarda valores para usar em vários lugares(dentro da mesma janela) ou pelo sistema.\n\nVamos ver qual o caminho completo da sua pasta pessoal? Execute `echo $HOME`.\n\n{% blockquote %}\nO comando `echo` serve para exibir na tela algum texto, variável, etc. Você pode usar com qualquer outra coisa, como `echo 123`.\n{% endblockquote %}\n\nViu que saiu algo como `/home/NOME_DO_SEU_USUARIO`? É o caminho da sua pasta pessoal.\n\nVocê pode criar sua própria variável *local* executando `VARIAVEL=VALOR`, em seguida, pode dar um `echo $VARIAVEL` para ver o valor. Quando for usar a variável em algum lugar, coloque um `$` no começo do nome, sem espaços.\n\nLembrando que variáveis podem ser minúsculas ou maiúsculas, mas não podem conter acentuação ou espaços.\n\nComo costume/padrão, sempre criamos variáveis em caixa alta e separamos nomes com *_*.\n\n### O que é _piping_?\n\nÉ quando você precisa juntar dois comandos, ou executá-los ao mesmo tempo. Talvez você não use isso agora de começo, mas acredito que é necessário te dizer o que significam quando você ver por aí.\n\nPara enviar a saída de um comando para outro, você pode usar o `|`, como em `echo 123 | grep 1` - veremos mais sobre `grep` depois.\n\nPara executar um comando seguido do outro, consecutivamente, use `&&`. Exemplo: `echo 123 && echo 456`.\n\nPara enviar a saída de um comando diretamente para um arquivo(sobreescrevendo ou criando), use `>`. Exemplo: `echo 123 > test.txt`. Para colocar a saída no fim do arquivo, sem reescrevê-lo, use `>>`.\n\nAcredito que você não vai usar isso agora, mas é necessáro entender o que cada coisa significa.\n\n## Aprendendo alguns comandos úteis\n\nVamos brincar com os seguintes comandos:\n\n- `cd` serve para caminhar entre pastas\n- `ls` lista o conteúdo da pasta atual e outras\n- `grep` filtra a saída de algo(texto)\n- `touch` cria um novo arquivo\n- `rm` deleta um arquivo/pasta\n\nOk, parece muita coisa, mas não é, vamos aos poucos. Agora que tal ir para a sua pasta pessoal?\n\nPara chegar lá, temos várias formas de navegar usando `cd`:\n\n- Use `cd ~`, o `~` serve como atalho pessoal\n- Use `cd $HOME`, sendo que `$HOME` é uma variável que contém o caminho completo\n- Use `cd /home/NOME_DO_SEU_USUARIO`, indicando um caminho direto da raiz do sistema\n\nTodas as alternativas levam para o mesmo lugar: sua pasta pessoal.\n\nMas, um momento, o que tem aqui? Execute `ls`. \n\nViu que surgiu várias palavras, digo, nomes de pastas e arquivos? Mas está tudo na mesma linha, está difícil de ler...\n\nExecute `ls -l` e veja tudo numa lista/tabela bonita. Ok, tem algumas coisas estranhas a esquerda, mas você percebeu que tem o seu nome de usuário, nome do seu grupo, alguns números, data e o nome dos arquivos?\n\nO `-l` faz a listagem ficar mais fácil pra leitura.\n\n{% blockquote %}\nQuase todo comando aceita _parâmetros_, ou seja, são configurações especiais para dizer o que fazer exatamente e como fazer. No caso de `-l`, indica que queremos em forma de lista. \n{% endblockquote %}\n\nEscolha uma pasta, arquivo, qualquer coisa que tenha aparecido na lista. Só o primeiro nome ou parte dele serve.\n\nAgora execute `ls -l | grep NOME`, com o nome que você escolheu - atente-se ao `|`. Percebeu que só apareceu o que você *filtrou*?\n\n`grep` serve basicamente para filtrar coisas. O `|` que você colocou, indica que `grep` será executado após `ls -l` e usará o resultado de `ls -l` como entrada.\n\nParece legal, não?\n\nDigamos que você precise criar um arquivo agora, como faria? Iria abrir algum editor? Não precisa! Vá até a pasta que queira criar o arquivo e execute `touch ARQUIVO`, onde você pode colocar o nome do arquivo e extensão, ex: `touch texto.txt`, `touch index.js`.\n\nDepois de criar o arquivo, é melhor verificar: na mesma pasta, execute `ls -l | grep ARQUIVO`, e veja se ele aparece.\n\nBom, mas e se você criar um arquivo, e depois decidir que não precisa mais dele? Você pode apagar usando `rm`: execute `rm ARQUIVO`.\n\n{% blockquote %}\n`rm` também pode ser usado para apagar vários arquivos do mesmo formato, com `rm *.js`, pastas com `rm -rf PASTA`, ou apenas o conteúdo de uma pasta, como `rm PASTA/*`. Há várias formas de usar o `rm` e você vai se acostumar mais logo logo. Só não use `rm -rf /` ou qualquer pasta na raiz, porque isso irá prejudicar seu sistema(é sério).\n{% endblockquote %}\n\n# Até a próxima\n\nBom, o artigo ficou um pouco extenso e vou deixar mais para outro. Por agora você já aprendeu alguns comandos bacanas, logo falo mais sobre permissões e outras coisas interessantes, inclusive mais a fundo sobre comandos básicos. Se tiver dúvidas, coloque nos comentários =D\n\n\n","source":"_posts/Terminais-sao-legais-como-comecar-a-usar.md","raw":"---\ntitle: 'Terminais são legais: como começar a usar'\ndescription: 'Todo mundo talvez precise usar o terminal uma hora ou outra, e não é tão difícil quanto parece!'\nthumbnail: 'learning.jpg'\ndate: 2018-06-02 16:47:14\ntags:\n---\n\n![](learning.jpg)\n\n# Terminal, o que é?\n\nBasicamente, uma janela onde você escreve `comandos` para o computador executar. Esses comandos podem ler um arquivo, criar pastas, executar scripts, fazer café e muito mais. (é sério, da pra fazer café)\n\n# Por onde começar?\n\nBom, se você já programa, trabalha com PHP, NodeJS, Python, etc, talvez já tenha usado o terminal algumas vezes, copiando e colando comandos da documentação e/ou do StackOverflow. Mas hoje vou mostrar alguns comandos básicos e simples pra te ajudar no dia a dia.\n\nSe você é novo na área, acabou de entrar e etc, eu sugiro você escutar [o podcast QuebraDev](http://quebradev.com.br/) pra te ajudar. Você vai entender melhor depois de escutar os primeiros episódios =]\n\n## Introdução\n\nPara começar, abra o terminal. Vou considerar que está no Linux ou MAC.\n\nAssim que você abrir o terminal, estará em uma pasta, normalmente vai aparecer logo depois do nome do seu usuário e do seu grupo atual, como na imagem:\n\n![](user-terminal.png)\n\nAqui é tudo muito simples: você sabe seu usuário atual, grupo, pasta e tem um espaço pra digitar os comandos, mais nada.\n\nVocê só precisa abrir a janela, digitar seu comando e apertar `Enter` para executar.\n\nNão é difícil, certo? Você só precisa ser cuidadoso com o que vai executar.\n\n## Pastas, caminhos e etc\n\nEssa é a parte crucial de se usar um terminal: você precisa entender como as coisas são ordenadas. Aqui você tem pastas, arquivos e _symlinks_(que são como atalhos comuns).\n\nVou citar aqui alguns atalhos:\n\n- Quando você ver `.` significa que está se referindo à pasta atual, independente de onde estiver. Por exemplo: `./arquivo.txt` significa que estou me referindo ao arquivo `arquivo.txt` na pasta atual.\n- Quando ver `..`, significa que está se referindo à pasta *superior*. Como em `../`.\n- Quando você ver qualquer *caminho* começando com `/`, é porque aquele caminho *começa* da pasta raiz do sistema.\n- Sempre quando você precisar definir caminhos, isto é, dizer onde está cada coisa, vai usar a `/` como separador. No Windows você usa `\\`, no Linux e OSX, usa `/`. Como `./uma/pasta/aqui`.\n\n\n## Variáveis e _piping_\n\nDentro do terminal - você pode ver alguém falar do terminal como `shell`, `bash`, são a mesma coisa -, você pode ter variáveis. É onde você guarda valores para usar em vários lugares(dentro da mesma janela) ou pelo sistema.\n\nVamos ver qual o caminho completo da sua pasta pessoal? Execute `echo $HOME`.\n\n{% blockquote %}\nO comando `echo` serve para exibir na tela algum texto, variável, etc. Você pode usar com qualquer outra coisa, como `echo 123`.\n{% endblockquote %}\n\nViu que saiu algo como `/home/NOME_DO_SEU_USUARIO`? É o caminho da sua pasta pessoal.\n\nVocê pode criar sua própria variável *local* executando `VARIAVEL=VALOR`, em seguida, pode dar um `echo $VARIAVEL` para ver o valor. Quando for usar a variável em algum lugar, coloque um `$` no começo do nome, sem espaços.\n\nLembrando que variáveis podem ser minúsculas ou maiúsculas, mas não podem conter acentuação ou espaços.\n\nComo costume/padrão, sempre criamos variáveis em caixa alta e separamos nomes com *_*.\n\n### O que é _piping_?\n\nÉ quando você precisa juntar dois comandos, ou executá-los ao mesmo tempo. Talvez você não use isso agora de começo, mas acredito que é necessário te dizer o que significam quando você ver por aí.\n\nPara enviar a saída de um comando para outro, você pode usar o `|`, como em `echo 123 | grep 1` - veremos mais sobre `grep` depois.\n\nPara executar um comando seguido do outro, consecutivamente, use `&&`. Exemplo: `echo 123 && echo 456`.\n\nPara enviar a saída de um comando diretamente para um arquivo(sobreescrevendo ou criando), use `>`. Exemplo: `echo 123 > test.txt`. Para colocar a saída no fim do arquivo, sem reescrevê-lo, use `>>`.\n\nAcredito que você não vai usar isso agora, mas é necessáro entender o que cada coisa significa.\n\n## Aprendendo alguns comandos úteis\n\nVamos brincar com os seguintes comandos:\n\n- `cd` serve para caminhar entre pastas\n- `ls` lista o conteúdo da pasta atual e outras\n- `grep` filtra a saída de algo(texto)\n- `touch` cria um novo arquivo\n- `rm` deleta um arquivo/pasta\n\nOk, parece muita coisa, mas não é, vamos aos poucos. Agora que tal ir para a sua pasta pessoal?\n\nPara chegar lá, temos várias formas de navegar usando `cd`:\n\n- Use `cd ~`, o `~` serve como atalho pessoal\n- Use `cd $HOME`, sendo que `$HOME` é uma variável que contém o caminho completo\n- Use `cd /home/NOME_DO_SEU_USUARIO`, indicando um caminho direto da raiz do sistema\n\nTodas as alternativas levam para o mesmo lugar: sua pasta pessoal.\n\nMas, um momento, o que tem aqui? Execute `ls`. \n\nViu que surgiu várias palavras, digo, nomes de pastas e arquivos? Mas está tudo na mesma linha, está difícil de ler...\n\nExecute `ls -l` e veja tudo numa lista/tabela bonita. Ok, tem algumas coisas estranhas a esquerda, mas você percebeu que tem o seu nome de usuário, nome do seu grupo, alguns números, data e o nome dos arquivos?\n\nO `-l` faz a listagem ficar mais fácil pra leitura.\n\n{% blockquote %}\nQuase todo comando aceita _parâmetros_, ou seja, são configurações especiais para dizer o que fazer exatamente e como fazer. No caso de `-l`, indica que queremos em forma de lista. \n{% endblockquote %}\n\nEscolha uma pasta, arquivo, qualquer coisa que tenha aparecido na lista. Só o primeiro nome ou parte dele serve.\n\nAgora execute `ls -l | grep NOME`, com o nome que você escolheu - atente-se ao `|`. Percebeu que só apareceu o que você *filtrou*?\n\n`grep` serve basicamente para filtrar coisas. O `|` que você colocou, indica que `grep` será executado após `ls -l` e usará o resultado de `ls -l` como entrada.\n\nParece legal, não?\n\nDigamos que você precise criar um arquivo agora, como faria? Iria abrir algum editor? Não precisa! Vá até a pasta que queira criar o arquivo e execute `touch ARQUIVO`, onde você pode colocar o nome do arquivo e extensão, ex: `touch texto.txt`, `touch index.js`.\n\nDepois de criar o arquivo, é melhor verificar: na mesma pasta, execute `ls -l | grep ARQUIVO`, e veja se ele aparece.\n\nBom, mas e se você criar um arquivo, e depois decidir que não precisa mais dele? Você pode apagar usando `rm`: execute `rm ARQUIVO`.\n\n{% blockquote %}\n`rm` também pode ser usado para apagar vários arquivos do mesmo formato, com `rm *.js`, pastas com `rm -rf PASTA`, ou apenas o conteúdo de uma pasta, como `rm PASTA/*`. Há várias formas de usar o `rm` e você vai se acostumar mais logo logo. Só não use `rm -rf /` ou qualquer pasta na raiz, porque isso irá prejudicar seu sistema(é sério).\n{% endblockquote %}\n\n# Até a próxima\n\nBom, o artigo ficou um pouco extenso e vou deixar mais para outro. Por agora você já aprendeu alguns comandos bacanas, logo falo mais sobre permissões e outras coisas interessantes, inclusive mais a fundo sobre comandos básicos. Se tiver dúvidas, coloque nos comentários =D\n\n\n","slug":"Terminais-sao-legais-como-comecar-a-usar","published":1,"updated":"2018-06-02T20:16:26.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmf456yc000a4grpfstgawqe","content":"<p><img src=\"learning.jpg\" alt=\"\"></p>\n<h1 id=\"Terminal-o-que-e\"><a href=\"#Terminal-o-que-e\" class=\"headerlink\" title=\"Terminal, o que é?\"></a>Terminal, o que é?</h1><p>Basicamente, uma janela onde você escreve <code>comandos</code> para o computador executar. Esses comandos podem ler um arquivo, criar pastas, executar scripts, fazer café e muito mais. (é sério, da pra fazer café)</p>\n<h1 id=\"Por-onde-comecar\"><a href=\"#Por-onde-comecar\" class=\"headerlink\" title=\"Por onde começar?\"></a>Por onde começar?</h1><p>Bom, se você já programa, trabalha com PHP, NodeJS, Python, etc, talvez já tenha usado o terminal algumas vezes, copiando e colando comandos da documentação e/ou do StackOverflow. Mas hoje vou mostrar alguns comandos básicos e simples pra te ajudar no dia a dia.</p>\n<p>Se você é novo na área, acabou de entrar e etc, eu sugiro você escutar <a href=\"http://quebradev.com.br/\" target=\"_blank\" rel=\"noopener\">o podcast QuebraDev</a> pra te ajudar. Você vai entender melhor depois de escutar os primeiros episódios =]</p>\n<h2 id=\"Introducao\"><a href=\"#Introducao\" class=\"headerlink\" title=\"Introdução\"></a>Introdução</h2><p>Para começar, abra o terminal. Vou considerar que está no Linux ou MAC.</p>\n<p>Assim que você abrir o terminal, estará em uma pasta, normalmente vai aparecer logo depois do nome do seu usuário e do seu grupo atual, como na imagem:</p>\n<p><img src=\"user-terminal.png\" alt=\"\"></p>\n<p>Aqui é tudo muito simples: você sabe seu usuário atual, grupo, pasta e tem um espaço pra digitar os comandos, mais nada.</p>\n<p>Você só precisa abrir a janela, digitar seu comando e apertar <code>Enter</code> para executar.</p>\n<p>Não é difícil, certo? Você só precisa ser cuidadoso com o que vai executar.</p>\n<h2 id=\"Pastas-caminhos-e-etc\"><a href=\"#Pastas-caminhos-e-etc\" class=\"headerlink\" title=\"Pastas, caminhos e etc\"></a>Pastas, caminhos e etc</h2><p>Essa é a parte crucial de se usar um terminal: você precisa entender como as coisas são ordenadas. Aqui você tem pastas, arquivos e <em>symlinks</em>(que são como atalhos comuns).</p>\n<p>Vou citar aqui alguns atalhos:</p>\n<ul>\n<li>Quando você ver <code>.</code> significa que está se referindo à pasta atual, independente de onde estiver. Por exemplo: <code>./arquivo.txt</code> significa que estou me referindo ao arquivo <code>arquivo.txt</code> na pasta atual.</li>\n<li>Quando ver <code>..</code>, significa que está se referindo à pasta <em>superior</em>. Como em <code>../</code>.</li>\n<li>Quando você ver qualquer <em>caminho</em> começando com <code>/</code>, é porque aquele caminho <em>começa</em> da pasta raiz do sistema.</li>\n<li>Sempre quando você precisar definir caminhos, isto é, dizer onde está cada coisa, vai usar a <code>/</code> como separador. No Windows você usa <code>\\</code>, no Linux e OSX, usa <code>/</code>. Como <code>./uma/pasta/aqui</code>.</li>\n</ul>\n<h2 id=\"Variaveis-e-piping\"><a href=\"#Variaveis-e-piping\" class=\"headerlink\" title=\"Variáveis e piping\"></a>Variáveis e <em>piping</em></h2><p>Dentro do terminal - você pode ver alguém falar do terminal como <code>shell</code>, <code>bash</code>, são a mesma coisa -, você pode ter variáveis. É onde você guarda valores para usar em vários lugares(dentro da mesma janela) ou pelo sistema.</p>\n<p>Vamos ver qual o caminho completo da sua pasta pessoal? Execute <code>echo $HOME</code>.</p>\n<blockquote><p>O comando <code>echo</code> serve para exibir na tela algum texto, variável, etc. Você pode usar com qualquer outra coisa, como <code>echo 123</code>.</p>\n</blockquote>\n<p>Viu que saiu algo como <code>/home/NOME_DO_SEU_USUARIO</code>? É o caminho da sua pasta pessoal.</p>\n<p>Você pode criar sua própria variável <em>local</em> executando <code>VARIAVEL=VALOR</code>, em seguida, pode dar um <code>echo $VARIAVEL</code> para ver o valor. Quando for usar a variável em algum lugar, coloque um <code>$</code> no começo do nome, sem espaços.</p>\n<p>Lembrando que variáveis podem ser minúsculas ou maiúsculas, mas não podem conter acentuação ou espaços.</p>\n<p>Como costume/padrão, sempre criamos variáveis em caixa alta e separamos nomes com <em>_</em>.</p>\n<h3 id=\"O-que-e-piping\"><a href=\"#O-que-e-piping\" class=\"headerlink\" title=\"O que é piping?\"></a>O que é <em>piping</em>?</h3><p>É quando você precisa juntar dois comandos, ou executá-los ao mesmo tempo. Talvez você não use isso agora de começo, mas acredito que é necessário te dizer o que significam quando você ver por aí.</p>\n<p>Para enviar a saída de um comando para outro, você pode usar o <code>|</code>, como em <code>echo 123 | grep 1</code> - veremos mais sobre <code>grep</code> depois.</p>\n<p>Para executar um comando seguido do outro, consecutivamente, use <code>&amp;&amp;</code>. Exemplo: <code>echo 123 &amp;&amp; echo 456</code>.</p>\n<p>Para enviar a saída de um comando diretamente para um arquivo(sobreescrevendo ou criando), use <code>&gt;</code>. Exemplo: <code>echo 123 &gt; test.txt</code>. Para colocar a saída no fim do arquivo, sem reescrevê-lo, use <code>&gt;&gt;</code>.</p>\n<p>Acredito que você não vai usar isso agora, mas é necessáro entender o que cada coisa significa.</p>\n<h2 id=\"Aprendendo-alguns-comandos-uteis\"><a href=\"#Aprendendo-alguns-comandos-uteis\" class=\"headerlink\" title=\"Aprendendo alguns comandos úteis\"></a>Aprendendo alguns comandos úteis</h2><p>Vamos brincar com os seguintes comandos:</p>\n<ul>\n<li><code>cd</code> serve para caminhar entre pastas</li>\n<li><code>ls</code> lista o conteúdo da pasta atual e outras</li>\n<li><code>grep</code> filtra a saída de algo(texto)</li>\n<li><code>touch</code> cria um novo arquivo</li>\n<li><code>rm</code> deleta um arquivo/pasta</li>\n</ul>\n<p>Ok, parece muita coisa, mas não é, vamos aos poucos. Agora que tal ir para a sua pasta pessoal?</p>\n<p>Para chegar lá, temos várias formas de navegar usando <code>cd</code>:</p>\n<ul>\n<li>Use <code>cd ~</code>, o <code>~</code> serve como atalho pessoal</li>\n<li>Use <code>cd $HOME</code>, sendo que <code>$HOME</code> é uma variável que contém o caminho completo</li>\n<li>Use <code>cd /home/NOME_DO_SEU_USUARIO</code>, indicando um caminho direto da raiz do sistema</li>\n</ul>\n<p>Todas as alternativas levam para o mesmo lugar: sua pasta pessoal.</p>\n<p>Mas, um momento, o que tem aqui? Execute <code>ls</code>. </p>\n<p>Viu que surgiu várias palavras, digo, nomes de pastas e arquivos? Mas está tudo na mesma linha, está difícil de ler…</p>\n<p>Execute <code>ls -l</code> e veja tudo numa lista/tabela bonita. Ok, tem algumas coisas estranhas a esquerda, mas você percebeu que tem o seu nome de usuário, nome do seu grupo, alguns números, data e o nome dos arquivos?</p>\n<p>O <code>-l</code> faz a listagem ficar mais fácil pra leitura.</p>\n<blockquote><p>Quase todo comando aceita <em>parâmetros</em>, ou seja, são configurações especiais para dizer o que fazer exatamente e como fazer. No caso de <code>-l</code>, indica que queremos em forma de lista. </p>\n</blockquote>\n<p>Escolha uma pasta, arquivo, qualquer coisa que tenha aparecido na lista. Só o primeiro nome ou parte dele serve.</p>\n<p>Agora execute <code>ls -l | grep NOME</code>, com o nome que você escolheu - atente-se ao <code>|</code>. Percebeu que só apareceu o que você <em>filtrou</em>?</p>\n<p><code>grep</code> serve basicamente para filtrar coisas. O <code>|</code> que você colocou, indica que <code>grep</code> será executado após <code>ls -l</code> e usará o resultado de <code>ls -l</code> como entrada.</p>\n<p>Parece legal, não?</p>\n<p>Digamos que você precise criar um arquivo agora, como faria? Iria abrir algum editor? Não precisa! Vá até a pasta que queira criar o arquivo e execute <code>touch ARQUIVO</code>, onde você pode colocar o nome do arquivo e extensão, ex: <code>touch texto.txt</code>, <code>touch index.js</code>.</p>\n<p>Depois de criar o arquivo, é melhor verificar: na mesma pasta, execute <code>ls -l | grep ARQUIVO</code>, e veja se ele aparece.</p>\n<p>Bom, mas e se você criar um arquivo, e depois decidir que não precisa mais dele? Você pode apagar usando <code>rm</code>: execute <code>rm ARQUIVO</code>.</p>\n<blockquote><p><code>rm</code> também pode ser usado para apagar vários arquivos do mesmo formato, com <code>rm *.js</code>, pastas com <code>rm -rf PASTA</code>, ou apenas o conteúdo de uma pasta, como <code>rm PASTA/*</code>. Há várias formas de usar o <code>rm</code> e você vai se acostumar mais logo logo. Só não use <code>rm -rf /</code> ou qualquer pasta na raiz, porque isso irá prejudicar seu sistema(é sério).</p>\n</blockquote>\n<h1 id=\"Ate-a-proxima\"><a href=\"#Ate-a-proxima\" class=\"headerlink\" title=\"Até a próxima\"></a>Até a próxima</h1><p>Bom, o artigo ficou um pouco extenso e vou deixar mais para outro. Por agora você já aprendeu alguns comandos bacanas, logo falo mais sobre permissões e outras coisas interessantes, inclusive mais a fundo sobre comandos básicos. Se tiver dúvidas, coloque nos comentários =D</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"learning.jpg\" alt=\"\"></p>\n<h1 id=\"Terminal-o-que-e\"><a href=\"#Terminal-o-que-e\" class=\"headerlink\" title=\"Terminal, o que é?\"></a>Terminal, o que é?</h1><p>Basicamente, uma janela onde você escreve <code>comandos</code> para o computador executar. Esses comandos podem ler um arquivo, criar pastas, executar scripts, fazer café e muito mais. (é sério, da pra fazer café)</p>\n<h1 id=\"Por-onde-comecar\"><a href=\"#Por-onde-comecar\" class=\"headerlink\" title=\"Por onde começar?\"></a>Por onde começar?</h1><p>Bom, se você já programa, trabalha com PHP, NodeJS, Python, etc, talvez já tenha usado o terminal algumas vezes, copiando e colando comandos da documentação e/ou do StackOverflow. Mas hoje vou mostrar alguns comandos básicos e simples pra te ajudar no dia a dia.</p>\n<p>Se você é novo na área, acabou de entrar e etc, eu sugiro você escutar <a href=\"http://quebradev.com.br/\" target=\"_blank\" rel=\"noopener\">o podcast QuebraDev</a> pra te ajudar. Você vai entender melhor depois de escutar os primeiros episódios =]</p>\n<h2 id=\"Introducao\"><a href=\"#Introducao\" class=\"headerlink\" title=\"Introdução\"></a>Introdução</h2><p>Para começar, abra o terminal. Vou considerar que está no Linux ou MAC.</p>\n<p>Assim que você abrir o terminal, estará em uma pasta, normalmente vai aparecer logo depois do nome do seu usuário e do seu grupo atual, como na imagem:</p>\n<p><img src=\"user-terminal.png\" alt=\"\"></p>\n<p>Aqui é tudo muito simples: você sabe seu usuário atual, grupo, pasta e tem um espaço pra digitar os comandos, mais nada.</p>\n<p>Você só precisa abrir a janela, digitar seu comando e apertar <code>Enter</code> para executar.</p>\n<p>Não é difícil, certo? Você só precisa ser cuidadoso com o que vai executar.</p>\n<h2 id=\"Pastas-caminhos-e-etc\"><a href=\"#Pastas-caminhos-e-etc\" class=\"headerlink\" title=\"Pastas, caminhos e etc\"></a>Pastas, caminhos e etc</h2><p>Essa é a parte crucial de se usar um terminal: você precisa entender como as coisas são ordenadas. Aqui você tem pastas, arquivos e <em>symlinks</em>(que são como atalhos comuns).</p>\n<p>Vou citar aqui alguns atalhos:</p>\n<ul>\n<li>Quando você ver <code>.</code> significa que está se referindo à pasta atual, independente de onde estiver. Por exemplo: <code>./arquivo.txt</code> significa que estou me referindo ao arquivo <code>arquivo.txt</code> na pasta atual.</li>\n<li>Quando ver <code>..</code>, significa que está se referindo à pasta <em>superior</em>. Como em <code>../</code>.</li>\n<li>Quando você ver qualquer <em>caminho</em> começando com <code>/</code>, é porque aquele caminho <em>começa</em> da pasta raiz do sistema.</li>\n<li>Sempre quando você precisar definir caminhos, isto é, dizer onde está cada coisa, vai usar a <code>/</code> como separador. No Windows você usa <code>\\</code>, no Linux e OSX, usa <code>/</code>. Como <code>./uma/pasta/aqui</code>.</li>\n</ul>\n<h2 id=\"Variaveis-e-piping\"><a href=\"#Variaveis-e-piping\" class=\"headerlink\" title=\"Variáveis e piping\"></a>Variáveis e <em>piping</em></h2><p>Dentro do terminal - você pode ver alguém falar do terminal como <code>shell</code>, <code>bash</code>, são a mesma coisa -, você pode ter variáveis. É onde você guarda valores para usar em vários lugares(dentro da mesma janela) ou pelo sistema.</p>\n<p>Vamos ver qual o caminho completo da sua pasta pessoal? Execute <code>echo $HOME</code>.</p>\n<blockquote><p>O comando <code>echo</code> serve para exibir na tela algum texto, variável, etc. Você pode usar com qualquer outra coisa, como <code>echo 123</code>.</p>\n</blockquote>\n<p>Viu que saiu algo como <code>/home/NOME_DO_SEU_USUARIO</code>? É o caminho da sua pasta pessoal.</p>\n<p>Você pode criar sua própria variável <em>local</em> executando <code>VARIAVEL=VALOR</code>, em seguida, pode dar um <code>echo $VARIAVEL</code> para ver o valor. Quando for usar a variável em algum lugar, coloque um <code>$</code> no começo do nome, sem espaços.</p>\n<p>Lembrando que variáveis podem ser minúsculas ou maiúsculas, mas não podem conter acentuação ou espaços.</p>\n<p>Como costume/padrão, sempre criamos variáveis em caixa alta e separamos nomes com <em>_</em>.</p>\n<h3 id=\"O-que-e-piping\"><a href=\"#O-que-e-piping\" class=\"headerlink\" title=\"O que é piping?\"></a>O que é <em>piping</em>?</h3><p>É quando você precisa juntar dois comandos, ou executá-los ao mesmo tempo. Talvez você não use isso agora de começo, mas acredito que é necessário te dizer o que significam quando você ver por aí.</p>\n<p>Para enviar a saída de um comando para outro, você pode usar o <code>|</code>, como em <code>echo 123 | grep 1</code> - veremos mais sobre <code>grep</code> depois.</p>\n<p>Para executar um comando seguido do outro, consecutivamente, use <code>&amp;&amp;</code>. Exemplo: <code>echo 123 &amp;&amp; echo 456</code>.</p>\n<p>Para enviar a saída de um comando diretamente para um arquivo(sobreescrevendo ou criando), use <code>&gt;</code>. Exemplo: <code>echo 123 &gt; test.txt</code>. Para colocar a saída no fim do arquivo, sem reescrevê-lo, use <code>&gt;&gt;</code>.</p>\n<p>Acredito que você não vai usar isso agora, mas é necessáro entender o que cada coisa significa.</p>\n<h2 id=\"Aprendendo-alguns-comandos-uteis\"><a href=\"#Aprendendo-alguns-comandos-uteis\" class=\"headerlink\" title=\"Aprendendo alguns comandos úteis\"></a>Aprendendo alguns comandos úteis</h2><p>Vamos brincar com os seguintes comandos:</p>\n<ul>\n<li><code>cd</code> serve para caminhar entre pastas</li>\n<li><code>ls</code> lista o conteúdo da pasta atual e outras</li>\n<li><code>grep</code> filtra a saída de algo(texto)</li>\n<li><code>touch</code> cria um novo arquivo</li>\n<li><code>rm</code> deleta um arquivo/pasta</li>\n</ul>\n<p>Ok, parece muita coisa, mas não é, vamos aos poucos. Agora que tal ir para a sua pasta pessoal?</p>\n<p>Para chegar lá, temos várias formas de navegar usando <code>cd</code>:</p>\n<ul>\n<li>Use <code>cd ~</code>, o <code>~</code> serve como atalho pessoal</li>\n<li>Use <code>cd $HOME</code>, sendo que <code>$HOME</code> é uma variável que contém o caminho completo</li>\n<li>Use <code>cd /home/NOME_DO_SEU_USUARIO</code>, indicando um caminho direto da raiz do sistema</li>\n</ul>\n<p>Todas as alternativas levam para o mesmo lugar: sua pasta pessoal.</p>\n<p>Mas, um momento, o que tem aqui? Execute <code>ls</code>. </p>\n<p>Viu que surgiu várias palavras, digo, nomes de pastas e arquivos? Mas está tudo na mesma linha, está difícil de ler…</p>\n<p>Execute <code>ls -l</code> e veja tudo numa lista/tabela bonita. Ok, tem algumas coisas estranhas a esquerda, mas você percebeu que tem o seu nome de usuário, nome do seu grupo, alguns números, data e o nome dos arquivos?</p>\n<p>O <code>-l</code> faz a listagem ficar mais fácil pra leitura.</p>\n<blockquote><p>Quase todo comando aceita <em>parâmetros</em>, ou seja, são configurações especiais para dizer o que fazer exatamente e como fazer. No caso de <code>-l</code>, indica que queremos em forma de lista. </p>\n</blockquote>\n<p>Escolha uma pasta, arquivo, qualquer coisa que tenha aparecido na lista. Só o primeiro nome ou parte dele serve.</p>\n<p>Agora execute <code>ls -l | grep NOME</code>, com o nome que você escolheu - atente-se ao <code>|</code>. Percebeu que só apareceu o que você <em>filtrou</em>?</p>\n<p><code>grep</code> serve basicamente para filtrar coisas. O <code>|</code> que você colocou, indica que <code>grep</code> será executado após <code>ls -l</code> e usará o resultado de <code>ls -l</code> como entrada.</p>\n<p>Parece legal, não?</p>\n<p>Digamos que você precise criar um arquivo agora, como faria? Iria abrir algum editor? Não precisa! Vá até a pasta que queira criar o arquivo e execute <code>touch ARQUIVO</code>, onde você pode colocar o nome do arquivo e extensão, ex: <code>touch texto.txt</code>, <code>touch index.js</code>.</p>\n<p>Depois de criar o arquivo, é melhor verificar: na mesma pasta, execute <code>ls -l | grep ARQUIVO</code>, e veja se ele aparece.</p>\n<p>Bom, mas e se você criar um arquivo, e depois decidir que não precisa mais dele? Você pode apagar usando <code>rm</code>: execute <code>rm ARQUIVO</code>.</p>\n<blockquote><p><code>rm</code> também pode ser usado para apagar vários arquivos do mesmo formato, com <code>rm *.js</code>, pastas com <code>rm -rf PASTA</code>, ou apenas o conteúdo de uma pasta, como <code>rm PASTA/*</code>. Há várias formas de usar o <code>rm</code> e você vai se acostumar mais logo logo. Só não use <code>rm -rf /</code> ou qualquer pasta na raiz, porque isso irá prejudicar seu sistema(é sério).</p>\n</blockquote>\n<h1 id=\"Ate-a-proxima\"><a href=\"#Ate-a-proxima\" class=\"headerlink\" title=\"Até a próxima\"></a>Até a próxima</h1><p>Bom, o artigo ficou um pouco extenso e vou deixar mais para outro. Por agora você já aprendeu alguns comandos bacanas, logo falo mais sobre permissões e outras coisas interessantes, inclusive mais a fundo sobre comandos básicos. Se tiver dúvidas, coloque nos comentários =D</p>\n"}],"PostAsset":[{"_id":"source/_posts/Terminais-sao-legais-v3-usuarios/people.jpg","slug":"people.jpg","post":"cjmf456ws00054grpwtikn9nz","modified":0,"renderable":0},{"_id":"source/_drafts/Terminais-sao-legais-v4-0-processos/top.png","slug":"top.png","post":"cjmf456we00004grpuxr1gmbe","modified":0,"renderable":0},{"_id":"source/_posts/Brincando-com-janelas-no-tmux/current-tmux-windows.jpg","slug":"current-tmux-windows.jpg","post":"cjmf456wk00014grp2ejo070g","modified":0,"renderable":0},{"_id":"source/_posts/Terminais-sao-legais-v1-lendo-e-filtrando-arquivos/filters-espresso-machine-filter-coffee.jpg","slug":"filters-espresso-machine-filter-coffee.jpg","post":"cjmf456wn00024grpfv9xi2ka","modified":0,"renderable":0},{"_id":"source/_posts/Terminais-sao-legais-v3-1-grupos-de-usuarios/groups.jpg","slug":"groups.jpg","post":"cjmf456wo00034grpg7tr6ti4","modified":0,"renderable":0},{"_id":"source/_posts/Terminais-sao-legais-v3-2-permissoes/ls-l.png","slug":"ls-l.png","post":"cjmf456wq00044grpfrkrxd1s","modified":0,"renderable":0},{"_id":"source/_posts/O-incrivel-mundo-do-tmux/thumbnail.jpg","slug":"thumbnail.jpg","post":"cjmf456x800064grp8u1qftnm","modified":0,"renderable":0},{"_id":"source/_posts/O-incrivel-mundo-do-tmux/tmux.gif","slug":"tmux.gif","post":"cjmf456x800064grp8u1qftnm","modified":0,"renderable":0},{"_id":"source/_posts/Terminais-sao-legais-v2-pastas/files.jpg","slug":"files.jpg","post":"cjmf456y000094grpy1vdhhab","modified":0,"renderable":0},{"_id":"source/_posts/Terminais-sao-legais-como-comecar-a-usar/learning.jpg","slug":"learning.jpg","post":"cjmf456yc000a4grpfstgawqe","modified":0,"renderable":0},{"_id":"source/_posts/Terminais-sao-legais-como-comecar-a-usar/user-terminal.png","slug":"user-terminal.png","post":"cjmf456yc000a4grpfstgawqe","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cjmf456x800064grp8u1qftnm","tag_id":"cjmf456xb00074grpl1imn86b","_id":"cjmf456xe00084grpd1x1olb8"}],"Tag":[{"name":"tmux produtividade terminal","_id":"cjmf456xb00074grpl1imn86b"}]}}